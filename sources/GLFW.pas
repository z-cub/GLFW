{==============================================================================
   ____ _     _______        __
  / ___| |   |  ___\ \      / /
 | |  _| |   | |_   \ \ /\ / / 
 | |_| | |___|  _|   \ V  V /  
  \____|_____|_|      \_/\_/   
 Graphics Library Framework for
 OpenGL                               

 Pascal bindings that allow you to use GLFW and other useful C libraries
 with Delphi.

 Included:
   - GLFW (https://github.com/glfw/glfw)
   - enet (https://github.com/lsalzman/enet)
   - miniaudio (https://github.com/mackron/miniaudio)
   - minizip (https://github.com/madler/zlib)
   - physfs (https://github.com/icculus/physfs)
   - pl_mpeg (https://github.com/phoboslab/pl_mpeg)
   - Nuklear (https://github.com/Immediate-Mode-UI/Nuklear)
      
 Minimum Requirements:
   - Windows 10+ (64 bits)
   - Delphi Community Edition (Win64 platform only)
   
 Usage:
   You simply add GLFW to your uses section and everything will be linked in
   and ready for use. You will have direct access to all the aforementioned
   libraries.

 Copyright © 2021-2022 tinyBigGAMES™ LLC
 All Rights Reserved.

 Website: https://tinybiggames.com
 Email  : support@tinybiggames.com

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software. If you use this software in
    a product, an acknowledgment in the product documentation would be
    appreciated but is not required.
 2. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

 3. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

 4. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

 5. All video, audio, graphics and other content accessed through the
    software in this distro is the property of the applicable content owner
    and may be protected by applicable copyright law. This License gives
    Customer no rights to such content, and Company disclaims any liability
    for misuse of content.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
============================================================================= }

{$IFNDEF WIN64}
  {$MESSAGE Error 'Unsupported platform'}
{$ENDIF}

{$Z4}
{$A8}

unit GLFW;

interface

uses
  WinAPI.Windows,
  WinAPI.Winsock2;

const
  NK_INCLUDE_STANDARD_BOOL = 1;
  NK_INCLUDE_FIXED_TYPES = 1;
  NK_INCLUDE_STANDARD_IO = 1;
  NK_INCLUDE_STANDARD_VARARGS = 1;
  NK_INCLUDE_DEFAULT_ALLOCATOR = 1;
  NK_INCLUDE_FONT_BAKING = 1;
  NK_INCLUDE_DEFAULT_FONT = 1;
  NK_INCLUDE_SOFTWARE_FONT = 1;
  GLFW_VERSION_MAJOR = 3;
  GLFW_VERSION_MINOR = 3;
  GLFW_VERSION_REVISION = 6;
  GLFW_TRUE = 1;
  GLFW_FALSE = 0;
  GLFW_RELEASE = 0;
  GLFW_PRESS = 1;
  GLFW_REPEAT = 2;
  GLFW_HAT_CENTERED = 0;
  GLFW_HAT_UP = 1;
  GLFW_HAT_RIGHT = 2;
  GLFW_HAT_DOWN = 4;
  GLFW_HAT_LEFT = 8;
  GLFW_HAT_RIGHT_UP = (GLFW_HAT_RIGHT or GLFW_HAT_UP);
  GLFW_HAT_RIGHT_DOWN = (GLFW_HAT_RIGHT or GLFW_HAT_DOWN);
  GLFW_HAT_LEFT_UP = (GLFW_HAT_LEFT or GLFW_HAT_UP);
  GLFW_HAT_LEFT_DOWN = (GLFW_HAT_LEFT or GLFW_HAT_DOWN);
  GLFW_KEY_UNKNOWN = -1;
  GLFW_KEY_SPACE = 32;
  GLFW_KEY_APOSTROPHE = 39;
  GLFW_KEY_COMMA = 44;
  GLFW_KEY_MINUS = 45;
  GLFW_KEY_PERIOD = 46;
  GLFW_KEY_SLASH = 47;
  GLFW_KEY_0 = 48;
  GLFW_KEY_1 = 49;
  GLFW_KEY_2 = 50;
  GLFW_KEY_3 = 51;
  GLFW_KEY_4 = 52;
  GLFW_KEY_5 = 53;
  GLFW_KEY_6 = 54;
  GLFW_KEY_7 = 55;
  GLFW_KEY_8 = 56;
  GLFW_KEY_9 = 57;
  GLFW_KEY_SEMICOLON = 59;
  GLFW_KEY_EQUAL = 61;
  GLFW_KEY_A = 65;
  GLFW_KEY_B = 66;
  GLFW_KEY_C = 67;
  GLFW_KEY_D = 68;
  GLFW_KEY_E = 69;
  GLFW_KEY_F = 70;
  GLFW_KEY_G = 71;
  GLFW_KEY_H = 72;
  GLFW_KEY_I = 73;
  GLFW_KEY_J = 74;
  GLFW_KEY_K = 75;
  GLFW_KEY_L = 76;
  GLFW_KEY_M = 77;
  GLFW_KEY_N = 78;
  GLFW_KEY_O = 79;
  GLFW_KEY_P = 80;
  GLFW_KEY_Q = 81;
  GLFW_KEY_R = 82;
  GLFW_KEY_S = 83;
  GLFW_KEY_T = 84;
  GLFW_KEY_U = 85;
  GLFW_KEY_V = 86;
  GLFW_KEY_W = 87;
  GLFW_KEY_X = 88;
  GLFW_KEY_Y = 89;
  GLFW_KEY_Z = 90;
  GLFW_KEY_LEFT_BRACKET = 91;
  GLFW_KEY_BACKSLASH = 92;
  GLFW_KEY_RIGHT_BRACKET = 93;
  GLFW_KEY_GRAVE_ACCENT = 96;
  GLFW_KEY_WORLD_1 = 161;
  GLFW_KEY_WORLD_2 = 162;
  GLFW_KEY_ESCAPE = 256;
  GLFW_KEY_ENTER = 257;
  GLFW_KEY_TAB = 258;
  GLFW_KEY_BACKSPACE = 259;
  GLFW_KEY_INSERT = 260;
  GLFW_KEY_DELETE = 261;
  GLFW_KEY_RIGHT = 262;
  GLFW_KEY_LEFT = 263;
  GLFW_KEY_DOWN = 264;
  GLFW_KEY_UP = 265;
  GLFW_KEY_PAGE_UP = 266;
  GLFW_KEY_PAGE_DOWN = 267;
  GLFW_KEY_HOME = 268;
  GLFW_KEY_END = 269;
  GLFW_KEY_CAPS_LOCK = 280;
  GLFW_KEY_SCROLL_LOCK = 281;
  GLFW_KEY_NUM_LOCK = 282;
  GLFW_KEY_PRINT_SCREEN = 283;
  GLFW_KEY_PAUSE = 284;
  GLFW_KEY_F1 = 290;
  GLFW_KEY_F2 = 291;
  GLFW_KEY_F3 = 292;
  GLFW_KEY_F4 = 293;
  GLFW_KEY_F5 = 294;
  GLFW_KEY_F6 = 295;
  GLFW_KEY_F7 = 296;
  GLFW_KEY_F8 = 297;
  GLFW_KEY_F9 = 298;
  GLFW_KEY_F10 = 299;
  GLFW_KEY_F11 = 300;
  GLFW_KEY_F12 = 301;
  GLFW_KEY_F13 = 302;
  GLFW_KEY_F14 = 303;
  GLFW_KEY_F15 = 304;
  GLFW_KEY_F16 = 305;
  GLFW_KEY_F17 = 306;
  GLFW_KEY_F18 = 307;
  GLFW_KEY_F19 = 308;
  GLFW_KEY_F20 = 309;
  GLFW_KEY_F21 = 310;
  GLFW_KEY_F22 = 311;
  GLFW_KEY_F23 = 312;
  GLFW_KEY_F24 = 313;
  GLFW_KEY_F25 = 314;
  GLFW_KEY_KP_0 = 320;
  GLFW_KEY_KP_1 = 321;
  GLFW_KEY_KP_2 = 322;
  GLFW_KEY_KP_3 = 323;
  GLFW_KEY_KP_4 = 324;
  GLFW_KEY_KP_5 = 325;
  GLFW_KEY_KP_6 = 326;
  GLFW_KEY_KP_7 = 327;
  GLFW_KEY_KP_8 = 328;
  GLFW_KEY_KP_9 = 329;
  GLFW_KEY_KP_DECIMAL = 330;
  GLFW_KEY_KP_DIVIDE = 331;
  GLFW_KEY_KP_MULTIPLY = 332;
  GLFW_KEY_KP_SUBTRACT = 333;
  GLFW_KEY_KP_ADD = 334;
  GLFW_KEY_KP_ENTER = 335;
  GLFW_KEY_KP_EQUAL = 336;
  GLFW_KEY_LEFT_SHIFT = 340;
  GLFW_KEY_LEFT_CONTROL = 341;
  GLFW_KEY_LEFT_ALT = 342;
  GLFW_KEY_LEFT_SUPER = 343;
  GLFW_KEY_RIGHT_SHIFT = 344;
  GLFW_KEY_RIGHT_CONTROL = 345;
  GLFW_KEY_RIGHT_ALT = 346;
  GLFW_KEY_RIGHT_SUPER = 347;
  GLFW_KEY_MENU = 348;
  GLFW_KEY_LAST = GLFW_KEY_MENU;
  GLFW_MOD_SHIFT = $0001;
  GLFW_MOD_CONTROL = $0002;
  GLFW_MOD_ALT = $0004;
  GLFW_MOD_SUPER = $0008;
  GLFW_MOD_CAPS_LOCK = $0010;
  GLFW_MOD_NUM_LOCK = $0020;
  GLFW_MOUSE_BUTTON_1 = 0;
  GLFW_MOUSE_BUTTON_2 = 1;
  GLFW_MOUSE_BUTTON_3 = 2;
  GLFW_MOUSE_BUTTON_4 = 3;
  GLFW_MOUSE_BUTTON_5 = 4;
  GLFW_MOUSE_BUTTON_6 = 5;
  GLFW_MOUSE_BUTTON_7 = 6;
  GLFW_MOUSE_BUTTON_8 = 7;
  GLFW_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_8;
  GLFW_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_1;
  GLFW_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_2;
  GLFW_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_3;
  GLFW_JOYSTICK_1 = 0;
  GLFW_JOYSTICK_2 = 1;
  GLFW_JOYSTICK_3 = 2;
  GLFW_JOYSTICK_4 = 3;
  GLFW_JOYSTICK_5 = 4;
  GLFW_JOYSTICK_6 = 5;
  GLFW_JOYSTICK_7 = 6;
  GLFW_JOYSTICK_8 = 7;
  GLFW_JOYSTICK_9 = 8;
  GLFW_JOYSTICK_10 = 9;
  GLFW_JOYSTICK_11 = 10;
  GLFW_JOYSTICK_12 = 11;
  GLFW_JOYSTICK_13 = 12;
  GLFW_JOYSTICK_14 = 13;
  GLFW_JOYSTICK_15 = 14;
  GLFW_JOYSTICK_16 = 15;
  GLFW_JOYSTICK_LAST = GLFW_JOYSTICK_16;
  GLFW_GAMEPAD_BUTTON_A = 0;
  GLFW_GAMEPAD_BUTTON_B = 1;
  GLFW_GAMEPAD_BUTTON_X = 2;
  GLFW_GAMEPAD_BUTTON_Y = 3;
  GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = 4;
  GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = 5;
  GLFW_GAMEPAD_BUTTON_BACK = 6;
  GLFW_GAMEPAD_BUTTON_START = 7;
  GLFW_GAMEPAD_BUTTON_GUIDE = 8;
  GLFW_GAMEPAD_BUTTON_LEFT_THUMB = 9;
  GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = 10;
  GLFW_GAMEPAD_BUTTON_DPAD_UP = 11;
  GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = 12;
  GLFW_GAMEPAD_BUTTON_DPAD_DOWN = 13;
  GLFW_GAMEPAD_BUTTON_DPAD_LEFT = 14;
  GLFW_GAMEPAD_BUTTON_LAST = GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
  GLFW_GAMEPAD_BUTTON_CROSS = GLFW_GAMEPAD_BUTTON_A;
  GLFW_GAMEPAD_BUTTON_CIRCLE = GLFW_GAMEPAD_BUTTON_B;
  GLFW_GAMEPAD_BUTTON_SQUARE = GLFW_GAMEPAD_BUTTON_X;
  GLFW_GAMEPAD_BUTTON_TRIANGLE = GLFW_GAMEPAD_BUTTON_Y;
  GLFW_GAMEPAD_AXIS_LEFT_X = 0;
  GLFW_GAMEPAD_AXIS_LEFT_Y = 1;
  GLFW_GAMEPAD_AXIS_RIGHT_X = 2;
  GLFW_GAMEPAD_AXIS_RIGHT_Y = 3;
  GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = 4;
  GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = 5;
  GLFW_GAMEPAD_AXIS_LAST = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
  GLFW_NO_ERROR = 0;
  GLFW_NOT_INITIALIZED = $00010001;
  GLFW_NO_CURRENT_CONTEXT = $00010002;
  GLFW_INVALID_ENUM = $00010003;
  GLFW_INVALID_VALUE = $00010004;
  GLFW_OUT_OF_MEMORY = $00010005;
  GLFW_API_UNAVAILABLE = $00010006;
  GLFW_VERSION_UNAVAILABLE = $00010007;
  GLFW_PLATFORM_ERROR = $00010008;
  GLFW_FORMAT_UNAVAILABLE = $00010009;
  GLFW_NO_WINDOW_CONTEXT = $0001000A;
  GLFW_FOCUSED = $00020001;
  GLFW_ICONIFIED = $00020002;
  GLFW_RESIZABLE = $00020003;
  GLFW_VISIBLE = $00020004;
  GLFW_DECORATED = $00020005;
  GLFW_AUTO_ICONIFY = $00020006;
  GLFW_FLOATING = $00020007;
  GLFW_MAXIMIZED = $00020008;
  GLFW_CENTER_CURSOR = $00020009;
  GLFW_TRANSPARENT_FRAMEBUFFER = $0002000A;
  GLFW_HOVERED = $0002000B;
  GLFW_FOCUS_ON_SHOW = $0002000C;
  GLFW_RED_BITS = $00021001;
  GLFW_GREEN_BITS = $00021002;
  GLFW_BLUE_BITS = $00021003;
  GLFW_ALPHA_BITS = $00021004;
  GLFW_DEPTH_BITS = $00021005;
  GLFW_STENCIL_BITS = $00021006;
  GLFW_ACCUM_RED_BITS = $00021007;
  GLFW_ACCUM_GREEN_BITS = $00021008;
  GLFW_ACCUM_BLUE_BITS = $00021009;
  GLFW_ACCUM_ALPHA_BITS = $0002100A;
  GLFW_AUX_BUFFERS = $0002100B;
  GLFW_STEREO = $0002100C;
  GLFW_SAMPLES = $0002100D;
  GLFW_SRGB_CAPABLE = $0002100E;
  GLFW_REFRESH_RATE = $0002100F;
  GLFW_DOUBLEBUFFER = $00021010;
  GLFW_CLIENT_API = $00022001;
  GLFW_CONTEXT_VERSION_MAJOR = $00022002;
  GLFW_CONTEXT_VERSION_MINOR = $00022003;
  GLFW_CONTEXT_REVISION = $00022004;
  GLFW_CONTEXT_ROBUSTNESS = $00022005;
  GLFW_OPENGL_FORWARD_COMPAT = $00022006;
  GLFW_OPENGL_DEBUG_CONTEXT = $00022007;
  GLFW_OPENGL_PROFILE = $00022008;
  GLFW_CONTEXT_RELEASE_BEHAVIOR = $00022009;
  GLFW_CONTEXT_NO_ERROR = $0002200A;
  GLFW_CONTEXT_CREATION_API = $0002200B;
  GLFW_SCALE_TO_MONITOR = $0002200C;
  GLFW_COCOA_RETINA_FRAMEBUFFER = $00023001;
  GLFW_COCOA_FRAME_NAME = $00023002;
  GLFW_COCOA_GRAPHICS_SWITCHING = $00023003;
  GLFW_X11_CLASS_NAME = $00024001;
  GLFW_X11_INSTANCE_NAME = $00024002;
  GLFW_NO_API = 0;
  GLFW_OPENGL_API = $00030001;
  GLFW_OPENGL_ES_API = $00030002;
  GLFW_NO_ROBUSTNESS = 0;
  GLFW_NO_RESET_NOTIFICATION = $00031001;
  GLFW_LOSE_CONTEXT_ON_RESET = $00031002;
  GLFW_OPENGL_ANY_PROFILE = 0;
  GLFW_OPENGL_CORE_PROFILE = $00032001;
  GLFW_OPENGL_COMPAT_PROFILE = $00032002;
  GLFW_CURSOR = $00033001;
  GLFW_STICKY_KEYS = $00033002;
  GLFW_STICKY_MOUSE_BUTTONS = $00033003;
  GLFW_LOCK_KEY_MODS = $00033004;
  GLFW_RAW_MOUSE_MOTION = $00033005;
  GLFW_CURSOR_NORMAL = $00034001;
  GLFW_CURSOR_HIDDEN = $00034002;
  GLFW_CURSOR_DISABLED = $00034003;
  GLFW_ANY_RELEASE_BEHAVIOR = 0;
  GLFW_RELEASE_BEHAVIOR_FLUSH = $00035001;
  GLFW_RELEASE_BEHAVIOR_NONE = $00035002;
  GLFW_NATIVE_CONTEXT_API = $00036001;
  GLFW_EGL_CONTEXT_API = $00036002;
  GLFW_OSMESA_CONTEXT_API = $00036003;
  GLFW_ARROW_CURSOR = $00036001;
  GLFW_IBEAM_CURSOR = $00036002;
  GLFW_CROSSHAIR_CURSOR = $00036003;
  GLFW_HAND_CURSOR = $00036004;
  GLFW_HRESIZE_CURSOR = $00036005;
  GLFW_VRESIZE_CURSOR = $00036006;
  GLFW_CONNECTED = $00040001;
  GLFW_DISCONNECTED = $00040002;
  GLFW_JOYSTICK_HAT_BUTTONS = $00050001;
  GLFW_COCOA_CHDIR_RESOURCES = $00051001;
  GLFW_COCOA_MENUBAR = $00051002;
  GLFW_DONT_CARE = -1;
  MA_VERSION_MAJOR = 0;
  MA_VERSION_MINOR = 11;
  MA_VERSION_REVISION = 4;
  MA_SIZEOF_PTR = 8;
  MA_TRUE = 1;
  MA_FALSE = 0;
  SIZE_MAX = $ffffffffffffffff;
  MA_SIZE_MAX = SIZE_MAX;
  MA_SIMD_ALIGNMENT = 32;
  MA_MIN_CHANNELS = 1;
  MA_MAX_CHANNELS = 254;
  MA_MAX_FILTER_ORDER = 8;
  MA_MAX_LOG_CALLBACKS = 4;
  MA_CHANNEL_INDEX_NULL = 255;
  MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE = (1 shl 1);
  MA_MAX_DEVICE_NAME_LENGTH = 255;
  MA_DATA_SOURCE_SELF_MANAGED_RANGE_AND_LOOP_POINT = $00000001;
  MA_RESOURCE_MANAGER_MAX_JOB_THREAD_COUNT = 64;
  MA_MAX_NODE_BUS_COUNT = 254;
  MA_MAX_NODE_LOCAL_BUS_COUNT = 2;
  MA_NODE_BUS_COUNT_UNKNOWN = 255;
  MA_ENGINE_MAX_LISTENERS = 4;
  MA_SOUND_SOURCE_CHANNEL_COUNT = $FFFFFFFF;
  NK_UNDEFINED = (-1.0);
  NK_UTF_INVALID = $FFFD;
  NK_UTF_SIZE = 4;
  NK_INPUT_MAX = 16;
  NK_MAX_NUMBER_BUFFER = 64;
  NK_SCROLLBAR_HIDING_TIMEOUT = 4.0;
  NK_TEXTEDIT_UNDOSTATECOUNT = 99;
  NK_TEXTEDIT_UNDOCHARCOUNT = 999;
  NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS = 16;
  NK_CHART_MAX_SLOT = 4;
  NK_WINDOW_MAX_NAME = 64;
  NK_BUTTON_BEHAVIOR_STACK_SIZE = 8;
  NK_FONT_STACK_SIZE = 8;
  NK_STYLE_ITEM_STACK_SIZE = 16;
  NK_FLOAT_STACK_SIZE = 32;
  NK_VECTOR_STACK_SIZE = 16;
  NK_FLAGS_STACK_SIZE = 32;
  NK_COLOR_STACK_SIZE = 32;
  NK_PI = 3.141592654;
  NK_MAX_FLOAT_PRECISION = 2;
  PHYSFS_VER_MAJOR = 3;
  PHYSFS_VER_MINOR = 1;
  PHYSFS_VER_PATCH = 0;
  PLM_PACKET_INVALID_TS = -1;
  PLM_AUDIO_SAMPLES_PER_FRAME = 1152;
  PLM_BUFFER_DEFAULT_SIZE = (128*1024);
  STBI_VERSION = 1;
  STBTT_MACSTYLE_DONTCARE = 0;
  STBTT_MACSTYLE_BOLD = 1;
  STBTT_MACSTYLE_ITALIC = 2;
  STBTT_MACSTYLE_UNDERSCORE = 4;
  STBTT_MACSTYLE_NONE = 8;
  INVALID_SOCKET = ( not 0);
  ENET_SOCKET_NULL = -1;
  ENET_VERSION_MAJOR = 1;
  ENET_VERSION_MINOR = 3;
  ENET_VERSION_PATCH = 17;
  ENET_HOST_ANY = 0;
  _ENET_HOST_BROADCAST = $FFFFFFFF;
  ENET_PORT_ANY = 0;
  Z_BZIP2ED = 12;
  ZIP_OK = (0);
  ZIP_EOF = (0);
  ZIP_ERRNO = (-1);
  ZIP_PARAMERROR = (-102);
  ZIP_BADZIPFILE = (-103);
  ZIP_INTERNALERROR = (-104);
  Z_DEFLATED = 8;
  Z_DEFAULT_STRATEGY = 0;
  APPEND_STATUS_CREATE = (0);
  APPEND_STATUS_CREATEAFTER = (1);
  APPEND_STATUS_ADDINZIP = (2);
  MA_LOG_LEVEL_DEBUG = 4;
  MA_LOG_LEVEL_INFO = 3;
  MA_LOG_LEVEL_WARNING = 2;
  MA_LOG_LEVEL_ERROR = 1;
  MA_CHANNEL_NONE = 0;
  MA_CHANNEL_MONO = 1;
  MA_CHANNEL_FRONT_LEFT = 2;
  MA_CHANNEL_FRONT_RIGHT = 3;
  MA_CHANNEL_FRONT_CENTER = 4;
  MA_CHANNEL_LFE = 5;
  MA_CHANNEL_BACK_LEFT = 6;
  MA_CHANNEL_BACK_RIGHT = 7;
  MA_CHANNEL_FRONT_LEFT_CENTER = 8;
  MA_CHANNEL_FRONT_RIGHT_CENTER = 9;
  MA_CHANNEL_BACK_CENTER = 10;
  MA_CHANNEL_SIDE_LEFT = 11;
  MA_CHANNEL_SIDE_RIGHT = 12;
  MA_CHANNEL_TOP_CENTER = 13;
  MA_CHANNEL_TOP_FRONT_LEFT = 14;
  MA_CHANNEL_TOP_FRONT_CENTER = 15;
  MA_CHANNEL_TOP_FRONT_RIGHT = 16;
  MA_CHANNEL_TOP_BACK_LEFT = 17;
  MA_CHANNEL_TOP_BACK_CENTER = 18;
  MA_CHANNEL_TOP_BACK_RIGHT = 19;
  MA_CHANNEL_AUX_0 = 20;
  MA_CHANNEL_AUX_1 = 21;
  MA_CHANNEL_AUX_2 = 22;
  MA_CHANNEL_AUX_3 = 23;
  MA_CHANNEL_AUX_4 = 24;
  MA_CHANNEL_AUX_5 = 25;
  MA_CHANNEL_AUX_6 = 26;
  MA_CHANNEL_AUX_7 = 27;
  MA_CHANNEL_AUX_8 = 28;
  MA_CHANNEL_AUX_9 = 29;
  MA_CHANNEL_AUX_10 = 30;
  MA_CHANNEL_AUX_11 = 31;
  MA_CHANNEL_AUX_12 = 32;
  MA_CHANNEL_AUX_13 = 33;
  MA_CHANNEL_AUX_14 = 34;
  MA_CHANNEL_AUX_15 = 35;
  MA_CHANNEL_AUX_16 = 36;
  MA_CHANNEL_AUX_17 = 37;
  MA_CHANNEL_AUX_18 = 38;
  MA_CHANNEL_AUX_19 = 39;
  MA_CHANNEL_AUX_20 = 40;
  MA_CHANNEL_AUX_21 = 41;
  MA_CHANNEL_AUX_22 = 42;
  MA_CHANNEL_AUX_23 = 43;
  MA_CHANNEL_AUX_24 = 44;
  MA_CHANNEL_AUX_25 = 45;
  MA_CHANNEL_AUX_26 = 46;
  MA_CHANNEL_AUX_27 = 47;
  MA_CHANNEL_AUX_28 = 48;
  MA_CHANNEL_AUX_29 = 49;
  MA_CHANNEL_AUX_30 = 50;
  MA_CHANNEL_AUX_31 = 51;
  MA_CHANNEL_LEFT = 2;
  MA_CHANNEL_RIGHT = 3;
  MA_CHANNEL_POSITION_COUNT = 52;
  MA_SUCCESS = 0;
  MA_ERROR = -1;
  MA_INVALID_ARGS = -2;
  MA_INVALID_OPERATION = -3;
  MA_OUT_OF_MEMORY = -4;
  MA_OUT_OF_RANGE = -5;
  MA_ACCESS_DENIED = -6;
  MA_DOES_NOT_EXIST = -7;
  MA_ALREADY_EXISTS = -8;
  MA_TOO_MANY_OPEN_FILES = -9;
  MA_INVALID_FILE = -10;
  MA_TOO_BIG = -11;
  MA_PATH_TOO_LONG = -12;
  MA_NAME_TOO_LONG = -13;
  MA_NOT_DIRECTORY = -14;
  MA_IS_DIRECTORY = -15;
  MA_DIRECTORY_NOT_EMPTY = -16;
  MA_AT_END = -17;
  MA_NO_SPACE = -18;
  MA_BUSY = -19;
  MA_IO_ERROR = -20;
  MA_INTERRUPT = -21;
  MA_UNAVAILABLE = -22;
  MA_ALREADY_IN_USE = -23;
  MA_BAD_ADDRESS = -24;
  MA_BAD_SEEK = -25;
  MA_BAD_PIPE = -26;
  MA_DEADLOCK = -27;
  MA_TOO_MANY_LINKS = -28;
  MA_NOT_IMPLEMENTED = -29;
  MA_NO_MESSAGE = -30;
  MA_BAD_MESSAGE = -31;
  MA_NO_DATA_AVAILABLE = -32;
  MA_INVALID_DATA = -33;
  MA_TIMEOUT = -34;
  MA_NO_NETWORK = -35;
  MA_NOT_UNIQUE = -36;
  MA_NOT_SOCKET = -37;
  MA_NO_ADDRESS = -38;
  MA_BAD_PROTOCOL = -39;
  MA_PROTOCOL_UNAVAILABLE = -40;
  MA_PROTOCOL_NOT_SUPPORTED = -41;
  MA_PROTOCOL_FAMILY_NOT_SUPPORTED = -42;
  MA_ADDRESS_FAMILY_NOT_SUPPORTED = -43;
  MA_SOCKET_NOT_SUPPORTED = -44;
  MA_CONNECTION_RESET = -45;
  MA_ALREADY_CONNECTED = -46;
  MA_NOT_CONNECTED = -47;
  MA_CONNECTION_REFUSED = -48;
  MA_NO_HOST = -49;
  MA_IN_PROGRESS = -50;
  MA_CANCELLED = -51;
  MA_MEMORY_ALREADY_MAPPED = -52;
  MA_FORMAT_NOT_SUPPORTED = -100;
  MA_DEVICE_TYPE_NOT_SUPPORTED = -101;
  MA_SHARE_MODE_NOT_SUPPORTED = -102;
  MA_NO_BACKEND = -103;
  MA_NO_DEVICE = -104;
  MA_API_NOT_FOUND = -105;
  MA_INVALID_DEVICE_CONFIG = -106;
  MA_LOOP = -107;
  MA_DEVICE_NOT_INITIALIZED = -200;
  MA_DEVICE_ALREADY_INITIALIZED = -201;
  MA_DEVICE_NOT_STARTED = -202;
  MA_DEVICE_NOT_STOPPED = -203;
  MA_FAILED_TO_INIT_BACKEND = -300;
  MA_FAILED_TO_OPEN_BACKEND_DEVICE = -301;
  MA_FAILED_TO_START_BACKEND_DEVICE = -302;
  MA_FAILED_TO_STOP_BACKEND_DEVICE = -303;
  ma_stream_format_pcm = 0;
  ma_stream_layout_interleaved = 0;
  ma_stream_layout_deinterleaved = 1;
  ma_dither_mode_none = 0;
  ma_dither_mode_rectangle = 1;
  ma_dither_mode_triangle = 2;
  ma_format_unknown = 0;
  ma_format_u8 = 1;
  ma_format_s16 = 2;
  ma_format_s24 = 3;
  ma_format_s32 = 4;
  ma_format_f32 = 5;
  ma_format_count = 6;
  ma_standard_sample_rate_48000 = 48000;
  ma_standard_sample_rate_44100 = 44100;
  ma_standard_sample_rate_32000 = 32000;
  ma_standard_sample_rate_24000 = 24000;
  ma_standard_sample_rate_22050 = 22050;
  ma_standard_sample_rate_88200 = 88200;
  ma_standard_sample_rate_96000 = 96000;
  ma_standard_sample_rate_176400 = 176400;
  ma_standard_sample_rate_192000 = 192000;
  ma_standard_sample_rate_16000 = 16000;
  ma_standard_sample_rate_11025 = 11250;
  ma_standard_sample_rate_8000 = 8000;
  ma_standard_sample_rate_352800 = 352800;
  ma_standard_sample_rate_384000 = 384000;
  ma_standard_sample_rate_min = 8000;
  ma_standard_sample_rate_max = 384000;
  ma_standard_sample_rate_count = 14;
  ma_channel_mix_mode_rectangular = 0;
  ma_channel_mix_mode_simple = 1;
  ma_channel_mix_mode_custom_weights = 2;
  ma_channel_mix_mode_default = 0;
  ma_standard_channel_map_microsoft = 0;
  ma_standard_channel_map_alsa = 1;
  ma_standard_channel_map_rfc3551 = 2;
  ma_standard_channel_map_flac = 3;
  ma_standard_channel_map_vorbis = 4;
  ma_standard_channel_map_sound4 = 5;
  ma_standard_channel_map_sndio = 6;
  ma_standard_channel_map_webaudio = 3;
  ma_standard_channel_map_default = 0;
  ma_performance_profile_low_latency = 0;
  ma_performance_profile_conservative = 1;
  ma_thread_priority_idle = -5;
  ma_thread_priority_lowest = -4;
  ma_thread_priority_low = -3;
  ma_thread_priority_normal = -2;
  ma_thread_priority_high = -1;
  ma_thread_priority_highest = 0;
  ma_thread_priority_realtime = 1;
  ma_thread_priority_default = 0;
  ma_pan_mode_balance = 0;
  ma_pan_mode_pan = 1;
  ma_attenuation_model_none = 0;
  ma_attenuation_model_inverse = 1;
  ma_attenuation_model_linear = 2;
  ma_attenuation_model_exponential = 3;
  ma_positioning_absolute = 0;
  ma_positioning_relative = 1;
  ma_handedness_right = 0;
  ma_handedness_left = 1;
  ma_resample_algorithm_linear = 0;
  ma_resample_algorithm_custom = 1;
  ma_channel_conversion_path_unknown = 0;
  ma_channel_conversion_path_passthrough = 1;
  ma_channel_conversion_path_mono_out = 2;
  ma_channel_conversion_path_mono_in = 3;
  ma_channel_conversion_path_shuffle = 4;
  ma_channel_conversion_path_weights = 5;
  ma_mono_expansion_mode_duplicate = 0;
  ma_mono_expansion_mode_average = 1;
  ma_mono_expansion_mode_stereo_only = 2;
  ma_mono_expansion_mode_default = 0;
  ma_data_converter_execution_path_passthrough = 0;
  ma_data_converter_execution_path_format_only = 1;
  ma_data_converter_execution_path_channels_only = 2;
  ma_data_converter_execution_path_resample_only = 3;
  ma_data_converter_execution_path_resample_first = 4;
  ma_data_converter_execution_path_channels_first = 5;
  MA_JOB_TYPE_QUIT = 0;
  MA_JOB_TYPE_CUSTOM = 1;
  MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER_NODE = 2;
  MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER_NODE = 3;
  MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE = 4;
  MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER = 5;
  MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER = 6;
  MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_STREAM = 7;
  MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_STREAM = 8;
  MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_STREAM = 9;
  MA_JOB_TYPE_RESOURCE_MANAGER_SEEK_DATA_STREAM = 10;
  MA_JOB_TYPE_DEVICE_AAUDIO_REROUTE = 11;
  MA_JOB_TYPE_COUNT = 12;
  MA_JOB_QUEUE_FLAG_NON_BLOCKING = 1;
  ma_device_state_uninitialized = 0;
  ma_device_state_stopped = 1;
  ma_device_state_started = 2;
  ma_device_state_starting = 3;
  ma_device_state_stopping = 4;
  ma_backend_wasapi = 0;
  ma_backend_dsound = 1;
  ma_backend_winmm = 2;
  ma_backend_coreaudio = 3;
  ma_backend_sndio = 4;
  ma_backend_audio4 = 5;
  ma_backend_oss = 6;
  ma_backend_pulseaudio = 7;
  ma_backend_alsa = 8;
  ma_backend_jack = 9;
  ma_backend_aaudio = 10;
  ma_backend_opensl = 11;
  ma_backend_webaudio = 12;
  ma_backend_custom = 13;
  ma_backend_null = 14;
  ma_device_notification_type_started = 0;
  ma_device_notification_type_stopped = 1;
  ma_device_notification_type_rerouted = 2;
  ma_device_notification_type_interruption_began = 3;
  ma_device_notification_type_interruption_ended = 4;
  ma_device_type_playback = 1;
  ma_device_type_capture = 2;
  ma_device_type_duplex = 3;
  ma_device_type_loopback = 4;
  ma_share_mode_shared = 0;
  ma_share_mode_exclusive = 1;
  ma_ios_session_category_default = 0;
  ma_ios_session_category_none = 1;
  ma_ios_session_category_ambient = 2;
  ma_ios_session_category_solo_ambient = 3;
  ma_ios_session_category_playback = 4;
  ma_ios_session_category_record = 5;
  ma_ios_session_category_play_and_record = 6;
  ma_ios_session_category_multi_route = 7;
  ma_ios_session_category_option_mix_with_others = 1;
  ma_ios_session_category_option_duck_others = 2;
  ma_ios_session_category_option_allow_bluetooth = 4;
  ma_ios_session_category_option_default_to_speaker = 8;
  ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others = 17;
  ma_ios_session_category_option_allow_bluetooth_a2dp = 32;
  ma_ios_session_category_option_allow_air_play = 64;
  ma_opensl_stream_type_default = 0;
  ma_opensl_stream_type_voice = 1;
  ma_opensl_stream_type_system = 2;
  ma_opensl_stream_type_ring = 3;
  ma_opensl_stream_type_media = 4;
  ma_opensl_stream_type_alarm = 5;
  ma_opensl_stream_type_notification = 6;
  ma_opensl_recording_preset_default = 0;
  ma_opensl_recording_preset_generic = 1;
  ma_opensl_recording_preset_camcorder = 2;
  ma_opensl_recording_preset_voice_recognition = 3;
  ma_opensl_recording_preset_voice_communication = 4;
  ma_opensl_recording_preset_voice_unprocessed = 5;
  ma_aaudio_usage_default = 0;
  ma_aaudio_usage_announcement = 1;
  ma_aaudio_usage_emergency = 2;
  ma_aaudio_usage_safety = 3;
  ma_aaudio_usage_vehicle_status = 4;
  ma_aaudio_usage_alarm = 5;
  ma_aaudio_usage_assistance_accessibility = 6;
  ma_aaudio_usage_assistance_navigation_guidance = 7;
  ma_aaudio_usage_assistance_sonification = 8;
  ma_aaudio_usage_assitant = 9;
  ma_aaudio_usage_game = 10;
  ma_aaudio_usage_media = 11;
  ma_aaudio_usage_notification = 12;
  ma_aaudio_usage_notification_event = 13;
  ma_aaudio_usage_notification_ringtone = 14;
  ma_aaudio_usage_voice_communication = 15;
  ma_aaudio_usage_voice_communication_signalling = 16;
  ma_aaudio_content_type_default = 0;
  ma_aaudio_content_type_movie = 1;
  ma_aaudio_content_type_music = 2;
  ma_aaudio_content_type_sonification = 3;
  ma_aaudio_content_type_speech = 4;
  ma_aaudio_input_preset_default = 0;
  ma_aaudio_input_preset_generic = 1;
  ma_aaudio_input_preset_camcorder = 2;
  ma_aaudio_input_preset_unprocessed = 3;
  ma_aaudio_input_preset_voice_recognition = 4;
  ma_aaudio_input_preset_voice_communication = 5;
  ma_aaudio_input_preset_voice_performance = 6;
  MA_OPEN_MODE_READ = 1;
  MA_OPEN_MODE_WRITE = 2;
  ma_seek_origin_start = 0;
  ma_seek_origin_current = 1;
  ma_seek_origin_end = 2;
  ma_encoding_format_unknown = 0;
  ma_encoding_format_wav = 1;
  ma_encoding_format_flac = 2;
  ma_encoding_format_mp3 = 3;
  ma_encoding_format_vorbis = 4;
  ma_waveform_type_sine = 0;
  ma_waveform_type_square = 1;
  ma_waveform_type_triangle = 2;
  ma_waveform_type_sawtooth = 3;
  ma_noise_type_white = 0;
  ma_noise_type_pink = 1;
  ma_noise_type_brownian = 2;
  MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM = 1;
  MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE = 2;
  MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC = 4;
  MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_WAIT_INIT = 8;
  MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING = 1;
  MA_RESOURCE_MANAGER_FLAG_NO_THREADING = 2;
  ma_resource_manager_data_supply_type_unknown = 0;
  ma_resource_manager_data_supply_type_encoded = 1;
  ma_resource_manager_data_supply_type_decoded = 2;
  ma_resource_manager_data_supply_type_decoded_paged = 3;
  MA_NODE_FLAG_PASSTHROUGH = 1;
  MA_NODE_FLAG_CONTINUOUS_PROCESSING = 2;
  MA_NODE_FLAG_ALLOW_NULL_INPUT = 4;
  MA_NODE_FLAG_DIFFERENT_PROCESSING_RATES = 8;
  MA_NODE_FLAG_SILENT_OUTPUT = 16;
  ma_node_state_started = 0;
  ma_node_state_stopped = 1;
  MA_SOUND_FLAG_STREAM = 1;
  MA_SOUND_FLAG_DECODE = 2;
  MA_SOUND_FLAG_ASYNC = 4;
  MA_SOUND_FLAG_WAIT_INIT = 8;
  MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT = 16;
  MA_SOUND_FLAG_NO_PITCH = 32;
  MA_SOUND_FLAG_NO_SPATIALIZATION = 64;
  ma_engine_node_type_sound = 0;
  ma_engine_node_type_group = 1;
  nk_false = 0;
  nk_true = 1;
  NK_UP = 0;
  NK_RIGHT = 1;
  NK_DOWN = 2;
  NK_LEFT = 3;
  NK_BUTTON_DEFAULT = 0;
  NK_BUTTON_REPEATER = 1;
  NK_FIXED = 0;
  NK_MODIFIABLE = 1;
  NK_VERTICAL = 0;
  NK_HORIZONTAL = 1;
  NK_MINIMIZED = 0;
  NK_MAXIMIZED = 1;
  NK_HIDDEN = 0;
  NK_SHOWN = 1;
  NK_CHART_LINES = 0;
  NK_CHART_COLUMN = 1;
  NK_CHART_MAX = 2;
  NK_CHART_HOVERING = 1;
  NK_CHART_CLICKED = 2;
  NK_RGB = 0;
  NK_RGBA = 1;
  NK_POPUP_STATIC = 0;
  NK_POPUP_DYNAMIC = 1;
  NK_DYNAMIC = 0;
  NK_STATIC = 1;
  NK_TREE_NODE = 0;
  NK_TREE_TAB = 1;
  NK_SYMBOL_NONE = 0;
  NK_SYMBOL_X = 1;
  NK_SYMBOL_UNDERSCORE = 2;
  NK_SYMBOL_CIRCLE_SOLID = 3;
  NK_SYMBOL_CIRCLE_OUTLINE = 4;
  NK_SYMBOL_RECT_SOLID = 5;
  NK_SYMBOL_RECT_OUTLINE = 6;
  NK_SYMBOL_TRIANGLE_UP = 7;
  NK_SYMBOL_TRIANGLE_DOWN = 8;
  NK_SYMBOL_TRIANGLE_LEFT = 9;
  NK_SYMBOL_TRIANGLE_RIGHT = 10;
  NK_SYMBOL_PLUS = 11;
  NK_SYMBOL_MINUS = 12;
  NK_SYMBOL_MAX = 13;
  NK_KEY_NONE = 0;
  NK_KEY_SHIFT = 1;
  NK_KEY_CTRL = 2;
  NK_KEY_DEL = 3;
  NK_KEY_ENTER = 4;
  NK_KEY_TAB = 5;
  NK_KEY_BACKSPACE = 6;
  NK_KEY_COPY = 7;
  NK_KEY_CUT = 8;
  NK_KEY_PASTE = 9;
  NK_KEY_UP = 10;
  NK_KEY_DOWN = 11;
  NK_KEY_LEFT = 12;
  NK_KEY_RIGHT = 13;
  NK_KEY_TEXT_INSERT_MODE = 14;
  NK_KEY_TEXT_REPLACE_MODE = 15;
  NK_KEY_TEXT_RESET_MODE = 16;
  NK_KEY_TEXT_LINE_START = 17;
  NK_KEY_TEXT_LINE_END = 18;
  NK_KEY_TEXT_START = 19;
  NK_KEY_TEXT_END = 20;
  NK_KEY_TEXT_UNDO = 21;
  NK_KEY_TEXT_REDO = 22;
  NK_KEY_TEXT_SELECT_ALL = 23;
  NK_KEY_TEXT_WORD_LEFT = 24;
  NK_KEY_TEXT_WORD_RIGHT = 25;
  NK_KEY_SCROLL_START = 26;
  NK_KEY_SCROLL_END = 27;
  NK_KEY_SCROLL_DOWN = 28;
  NK_KEY_SCROLL_UP = 29;
  NK_KEY_MAX = 30;
  NK_BUTTON_LEFT = 0;
  NK_BUTTON_MIDDLE = 1;
  NK_BUTTON_RIGHT = 2;
  NK_BUTTON_DOUBLE = 3;
  NK_BUTTON_MAX = 4;
  NK_ANTI_ALIASING_OFF = 0;
  NK_ANTI_ALIASING_ON = 1;
  NK_CONVERT_SUCCESS = 0;
  NK_CONVERT_INVALID_PARAM = 1;
  NK_CONVERT_COMMAND_BUFFER_FULL = 2;
  NK_CONVERT_VERTEX_BUFFER_FULL = 4;
  NK_CONVERT_ELEMENT_BUFFER_FULL = 8;
  NK_WINDOW_BORDER = 1;
  NK_WINDOW_MOVABLE = 2;
  NK_WINDOW_SCALABLE = 4;
  NK_WINDOW_CLOSABLE = 8;
  NK_WINDOW_MINIMIZABLE = 16;
  NK_WINDOW_NO_SCROLLBAR = 32;
  NK_WINDOW_TITLE = 64;
  NK_WINDOW_SCROLL_AUTO_HIDE = 128;
  NK_WINDOW_BACKGROUND = 256;
  NK_WINDOW_SCALE_LEFT = 512;
  NK_WINDOW_NO_INPUT = 1024;
  NK_WIDGET_INVALID = 0;
  NK_WIDGET_VALID = 1;
  NK_WIDGET_ROM = 2;
  NK_WIDGET_STATE_MODIFIED = 2;
  NK_WIDGET_STATE_INACTIVE = 4;
  NK_WIDGET_STATE_ENTERED = 8;
  NK_WIDGET_STATE_HOVER = 16;
  NK_WIDGET_STATE_ACTIVED = 32;
  NK_WIDGET_STATE_LEFT = 64;
  NK_WIDGET_STATE_HOVERED = 18;
  NK_WIDGET_STATE_ACTIVE = 34;
  NK_TEXT_ALIGN_LEFT = 1;
  NK_TEXT_ALIGN_CENTERED = 2;
  NK_TEXT_ALIGN_RIGHT = 4;
  NK_TEXT_ALIGN_TOP = 8;
  NK_TEXT_ALIGN_MIDDLE = 16;
  NK_TEXT_ALIGN_BOTTOM = 32;
  NK_TEXT_LEFT = 17;
  NK_TEXT_CENTERED = 18;
  NK_TEXT_RIGHT = 20;
  NK_EDIT_DEFAULT = 0;
  NK_EDIT_READ_ONLY = 1;
  NK_EDIT_AUTO_SELECT = 2;
  NK_EDIT_SIG_ENTER = 4;
  NK_EDIT_ALLOW_TAB = 8;
  NK_EDIT_NO_CURSOR = 16;
  NK_EDIT_SELECTABLE = 32;
  NK_EDIT_CLIPBOARD = 64;
  NK_EDIT_CTRL_ENTER_NEWLINE = 128;
  NK_EDIT_NO_HORIZONTAL_SCROLL = 256;
  NK_EDIT_ALWAYS_INSERT_MODE = 512;
  NK_EDIT_MULTILINE = 1024;
  NK_EDIT_GOTO_END_ON_ACTIVATE = 2048;
  NK_EDIT_SIMPLE = 512;
  NK_EDIT_FIELD = 608;
  NK_EDIT_BOX = 1640;
  NK_EDIT_EDITOR = 1128;
  NK_EDIT_ACTIVE = 1;
  NK_EDIT_INACTIVE = 2;
  NK_EDIT_ACTIVATED = 4;
  NK_EDIT_DEACTIVATED = 8;
  NK_EDIT_COMMITED = 16;
  NK_COLOR_TEXT = 0;
  NK_COLOR_WINDOW = 1;
  NK_COLOR_HEADER = 2;
  NK_COLOR_BORDER = 3;
  NK_COLOR_BUTTON = 4;
  NK_COLOR_BUTTON_HOVER = 5;
  NK_COLOR_BUTTON_ACTIVE = 6;
  NK_COLOR_TOGGLE = 7;
  NK_COLOR_TOGGLE_HOVER = 8;
  NK_COLOR_TOGGLE_CURSOR = 9;
  NK_COLOR_SELECT = 10;
  NK_COLOR_SELECT_ACTIVE = 11;
  NK_COLOR_SLIDER = 12;
  NK_COLOR_SLIDER_CURSOR = 13;
  NK_COLOR_SLIDER_CURSOR_HOVER = 14;
  NK_COLOR_SLIDER_CURSOR_ACTIVE = 15;
  NK_COLOR_PROPERTY = 16;
  NK_COLOR_EDIT = 17;
  NK_COLOR_EDIT_CURSOR = 18;
  NK_COLOR_COMBO = 19;
  NK_COLOR_CHART = 20;
  NK_COLOR_CHART_COLOR = 21;
  NK_COLOR_CHART_COLOR_HIGHLIGHT = 22;
  NK_COLOR_SCROLLBAR = 23;
  NK_COLOR_SCROLLBAR_CURSOR = 24;
  NK_COLOR_SCROLLBAR_CURSOR_HOVER = 25;
  NK_COLOR_SCROLLBAR_CURSOR_ACTIVE = 26;
  NK_COLOR_TAB_HEADER = 27;
  NK_COLOR_COUNT = 28;
  NK_CURSOR_ARROW = 0;
  NK_CURSOR_TEXT = 1;
  NK_CURSOR_MOVE = 2;
  NK_CURSOR_RESIZE_VERTICAL = 3;
  NK_CURSOR_RESIZE_HORIZONTAL = 4;
  NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT = 5;
  NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT = 6;
  NK_CURSOR_COUNT = 7;
  NK_COORD_UV = 0;
  NK_COORD_PIXEL = 1;
  NK_FONT_ATLAS_ALPHA8 = 0;
  NK_FONT_ATLAS_RGBA32 = 1;
  NK_BUFFER_FIXED = 0;
  NK_BUFFER_DYNAMIC = 1;
  NK_BUFFER_FRONT = 0;
  NK_BUFFER_BACK = 1;
  NK_BUFFER_MAX = 2;
  NK_TEXT_EDIT_SINGLE_LINE = 0;
  NK_TEXT_EDIT_MULTI_LINE = 1;
  NK_TEXT_EDIT_MODE_VIEW = 0;
  NK_TEXT_EDIT_MODE_INSERT = 1;
  NK_TEXT_EDIT_MODE_REPLACE = 2;
  _NK_COMMAND_NOP = 0;
  _NK_COMMAND_SCISSOR = 1;
  _NK_COMMAND_LINE = 2;
  _NK_COMMAND_CURVE = 3;
  _NK_COMMAND_RECT = 4;
  _NK_COMMAND_RECT_FILLED = 5;
  _NK_COMMAND_RECT_MULTI_COLOR = 6;
  _NK_COMMAND_CIRCLE = 7;
  _NK_COMMAND_CIRCLE_FILLED = 8;
  _NK_COMMAND_ARC = 9;
  _NK_COMMAND_ARC_FILLED = 10;
  _NK_COMMAND_TRIANGLE = 11;
  _NK_COMMAND_TRIANGLE_FILLED = 12;
  _NK_COMMAND_POLYGON = 13;
  _NK_COMMAND_POLYGON_FILLED = 14;
  _NK_COMMAND_POLYLINE = 15;
  _NK_COMMAND_TEXT = 16;
  _NK_COMMAND_IMAGE = 17;
  _NK_COMMAND_CUSTOM = 18;
  NK_CLIPPING_OFF = 0;
  NK_CLIPPING_ON = 1;
  NK_STYLE_ITEM_COLOR = 0;
  NK_STYLE_ITEM_IMAGE = 1;
  NK_STYLE_ITEM_NINE_SLICE = 2;
  NK_HEADER_LEFT = 0;
  NK_HEADER_RIGHT = 1;
  NK_PANEL_NONE = 0;
  NK_PANEL_WINDOW = 1;
  NK_PANEL_GROUP = 2;
  NK_PANEL_POPUP = 4;
  NK_PANEL_CONTEXTUAL = 16;
  NK_PANEL_COMBO = 32;
  NK_PANEL_MENU = 64;
  NK_PANEL_TOOLTIP = 128;
  NK_PANEL_SET_NONBLOCK = 240;
  NK_PANEL_SET_POPUP = 244;
  NK_PANEL_SET_SUB = 246;
  NK_LAYOUT_DYNAMIC_FIXED = 0;
  NK_LAYOUT_DYNAMIC_ROW = 1;
  NK_LAYOUT_DYNAMIC_FREE = 2;
  NK_LAYOUT_DYNAMIC = 3;
  NK_LAYOUT_STATIC_FIXED = 4;
  NK_LAYOUT_STATIC_ROW = 5;
  NK_LAYOUT_STATIC_FREE = 6;
  NK_LAYOUT_STATIC = 7;
  NK_LAYOUT_TEMPLATE = 8;
  NK_LAYOUT_COUNT = 9;
  NK_WINDOW_PRIVATE = 2048;
  NK_WINDOW_DYNAMIC = 2048;
  NK_WINDOW_ROM = 4096;
  NK_WINDOW_NOT_INTERACTIVE = 5120;
  NK_WINDOW_HIDDEN = 8192;
  NK_WINDOW_CLOSED = 16384;
  NK_WINDOW_MINIMIZED = 32768;
  NK_WINDOW_REMOVE_ROM = 65536;
  PHYSFS_ENUM_ERROR = -1;
  PHYSFS_ENUM_STOP = 0;
  PHYSFS_ENUM_OK = 1;
  PHYSFS_FILETYPE_REGULAR = 0;
  PHYSFS_FILETYPE_DIRECTORY = 1;
  PHYSFS_FILETYPE_SYMLINK = 2;
  PHYSFS_FILETYPE_OTHER = 3;
  PHYSFS_ERR_OK = 0;
  PHYSFS_ERR_OTHER_ERROR = 1;
  PHYSFS_ERR_OUT_OF_MEMORY = 2;
  PHYSFS_ERR_NOT_INITIALIZED = 3;
  PHYSFS_ERR_IS_INITIALIZED = 4;
  PHYSFS_ERR_ARGV0_IS_NULL = 5;
  PHYSFS_ERR_UNSUPPORTED = 6;
  PHYSFS_ERR_PAST_EOF = 7;
  PHYSFS_ERR_FILES_STILL_OPEN = 8;
  PHYSFS_ERR_INVALID_ARGUMENT = 9;
  PHYSFS_ERR_NOT_MOUNTED = 10;
  PHYSFS_ERR_NOT_FOUND = 11;
  PHYSFS_ERR_SYMLINK_FORBIDDEN = 12;
  PHYSFS_ERR_NO_WRITE_DIR = 13;
  PHYSFS_ERR_OPEN_FOR_READING = 14;
  PHYSFS_ERR_OPEN_FOR_WRITING = 15;
  PHYSFS_ERR_NOT_A_FILE = 16;
  PHYSFS_ERR_READ_ONLY = 17;
  PHYSFS_ERR_CORRUPT = 18;
  PHYSFS_ERR_SYMLINK_LOOP = 19;
  PHYSFS_ERR_IO = 20;
  PHYSFS_ERR_PERMISSION = 21;
  PHYSFS_ERR_NO_SPACE = 22;
  PHYSFS_ERR_BAD_FILENAME = 23;
  PHYSFS_ERR_BUSY = 24;
  PHYSFS_ERR_DIR_NOT_EMPTY = 25;
  PHYSFS_ERR_OS_ERROR = 26;
  PHYSFS_ERR_DUPLICATE = 27;
  PHYSFS_ERR_BAD_PASSWORD = 28;
  PHYSFS_ERR_APP_CALLBACK = 29;
  STBI_default = 0;
  STBI_grey = 1;
  STBI_grey_alpha = 2;
  STBI_rgb = 3;
  STBI_rgb_alpha = 4;
  STBTT_vmove = 1;
  STBTT_vline = 2;
  STBTT_vcurve = 3;
  STBTT_vcubic = 4;
  STBTT_PLATFORM_ID_UNICODE = 0;
  STBTT_PLATFORM_ID_MAC = 1;
  STBTT_PLATFORM_ID_ISO = 2;
  STBTT_PLATFORM_ID_MICROSOFT = 3;
  STBTT_UNICODE_EID_UNICODE_1_0 = 0;
  STBTT_UNICODE_EID_UNICODE_1_1 = 1;
  STBTT_UNICODE_EID_ISO_10646 = 2;
  STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
  STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
  STBTT_MS_EID_SYMBOL = 0;
  STBTT_MS_EID_UNICODE_BMP = 1;
  STBTT_MS_EID_SHIFTJIS = 2;
  STBTT_MS_EID_UNICODE_FULL = 10;
  STBTT_MAC_EID_ROMAN = 0;
  STBTT_MAC_EID_ARABIC = 4;
  STBTT_MAC_EID_JAPANESE = 1;
  STBTT_MAC_EID_HEBREW = 5;
  STBTT_MAC_EID_CHINESE_TRAD = 2;
  STBTT_MAC_EID_GREEK = 6;
  STBTT_MAC_EID_KOREAN = 3;
  STBTT_MAC_EID_RUSSIAN = 7;
  STBTT_MS_LANG_ENGLISH = 1033;
  STBTT_MS_LANG_ITALIAN = 1040;
  STBTT_MS_LANG_CHINESE = 2052;
  STBTT_MS_LANG_JAPANESE = 1041;
  STBTT_MS_LANG_DUTCH = 1043;
  STBTT_MS_LANG_KOREAN = 1042;
  STBTT_MS_LANG_FRENCH = 1036;
  STBTT_MS_LANG_RUSSIAN = 1049;
  STBTT_MS_LANG_GERMAN = 1031;
  STBTT_MS_LANG_SPANISH = 1033;
  STBTT_MS_LANG_HEBREW = 1037;
  STBTT_MS_LANG_SWEDISH = 1053;
  STBTT_MAC_LANG_ENGLISH = 0;
  STBTT_MAC_LANG_JAPANESE = 11;
  STBTT_MAC_LANG_ARABIC = 12;
  STBTT_MAC_LANG_KOREAN = 23;
  STBTT_MAC_LANG_DUTCH = 4;
  STBTT_MAC_LANG_RUSSIAN = 32;
  STBTT_MAC_LANG_FRENCH = 1;
  STBTT_MAC_LANG_SPANISH = 6;
  STBTT_MAC_LANG_GERMAN = 2;
  STBTT_MAC_LANG_SWEDISH = 5;
  STBTT_MAC_LANG_HEBREW = 10;
  STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
  STBTT_MAC_LANG_ITALIAN = 3;
  STBTT_MAC_LANG_CHINESE_TRAD = 19;
  ENET_PROTOCOL_MINIMUM_MTU = 576;
  ENET_PROTOCOL_MAXIMUM_MTU = 4096;
  ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS = 32;
  ENET_BUFFER_MAXIMUM = (1+2*ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS);
  ENET_PROTOCOL_MINIMUM_WINDOW_SIZE = 4096;
  ENET_PROTOCOL_MAXIMUM_WINDOW_SIZE = 65536;
  ENET_PROTOCOL_MINIMUM_CHANNEL_COUNT = 1;
  ENET_PROTOCOL_MAXIMUM_CHANNEL_COUNT = 255;
  ENET_PROTOCOL_MAXIMUM_PEER_ID = 4095;
  ENET_PROTOCOL_MAXIMUM_FRAGMENT_COUNT = 1048576;
  ENET_PROTOCOL_COMMAND_NONE = 0;
  ENET_PROTOCOL_COMMAND_ACKNOWLEDGE = 1;
  ENET_PROTOCOL_COMMAND_CONNECT = 2;
  ENET_PROTOCOL_COMMAND_VERIFY_CONNECT = 3;
  ENET_PROTOCOL_COMMAND_DISCONNECT = 4;
  ENET_PROTOCOL_COMMAND_PING = 5;
  ENET_PROTOCOL_COMMAND_SEND_RELIABLE = 6;
  ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE = 7;
  ENET_PROTOCOL_COMMAND_SEND_FRAGMENT = 8;
  ENET_PROTOCOL_COMMAND_SEND_UNSEQUENCED = 9;
  ENET_PROTOCOL_COMMAND_BANDWIDTH_LIMIT = 10;
  ENET_PROTOCOL_COMMAND_THROTTLE_CONFIGURE = 11;
  ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE_FRAGMENT = 12;
  ENET_PROTOCOL_COMMAND_COUNT = 13;
  ENET_PROTOCOL_COMMAND_MASK = 15;
  ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE = 128;
  ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED = 64;
  ENET_PROTOCOL_HEADER_FLAG_COMPRESSED = 16384;
  ENET_PROTOCOL_HEADER_FLAG_SENT_TIME = 32768;
  ENET_PROTOCOL_HEADER_FLAG_MASK = 49152;
  ENET_PROTOCOL_HEADER_SESSION_MASK = 12288;
  ENET_PROTOCOL_HEADER_SESSION_SHIFT = 12;
  ENET_SOCKET_TYPE_STREAM = 1;
  ENET_SOCKET_TYPE_DATAGRAM = 2;
  ENET_SOCKET_WAIT_NONE = 0;
  ENET_SOCKET_WAIT_SEND = 1;
  ENET_SOCKET_WAIT_RECEIVE = 2;
  ENET_SOCKET_WAIT_INTERRUPT = 4;
  ENET_SOCKOPT_NONBLOCK = 1;
  ENET_SOCKOPT_BROADCAST = 2;
  ENET_SOCKOPT_RCVBUF = 3;
  ENET_SOCKOPT_SNDBUF = 4;
  ENET_SOCKOPT_REUSEADDR = 5;
  ENET_SOCKOPT_RCVTIMEO = 6;
  ENET_SOCKOPT_SNDTIMEO = 7;
  ENET_SOCKOPT_ERROR = 8;
  ENET_SOCKOPT_NODELAY = 9;
  ENET_SOCKET_SHUTDOWN_READ = 0;
  ENET_SOCKET_SHUTDOWN_WRITE = 1;
  ENET_SOCKET_SHUTDOWN_READ_WRITE = 2;
  ENET_PACKET_FLAG_RELIABLE = 1;
  ENET_PACKET_FLAG_UNSEQUENCED = 2;
  ENET_PACKET_FLAG_NO_ALLOCATE = 4;
  ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT = 8;
  ENET_PACKET_FLAG_SENT = 256;
  ENET_PEER_STATE_DISCONNECTED = 0;
  ENET_PEER_STATE_CONNECTING = 1;
  ENET_PEER_STATE_ACKNOWLEDGING_CONNECT = 2;
  ENET_PEER_STATE_CONNECTION_PENDING = 3;
  ENET_PEER_STATE_CONNECTION_SUCCEEDED = 4;
  ENET_PEER_STATE_CONNECTED = 5;
  ENET_PEER_STATE_DISCONNECT_LATER = 6;
  ENET_PEER_STATE_DISCONNECTING = 7;
  ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT = 8;
  ENET_PEER_STATE_ZOMBIE = 9;
  ENET_HOST_RECEIVE_BUFFER_SIZE = 262144;
  ENET_HOST_SEND_BUFFER_SIZE = 262144;
  ENET_HOST_BANDWIDTH_THROTTLE_INTERVAL = 1000;
  ENET_HOST_DEFAULT_MTU = 1400;
  ENET_HOST_DEFAULT_MAXIMUM_PACKET_SIZE = 33554432;
  ENET_HOST_DEFAULT_MAXIMUM_WAITING_DATA = 33554432;
  ENET_PEER_DEFAULT_ROUND_TRIP_TIME = 500;
  ENET_PEER_DEFAULT_PACKET_THROTTLE = 32;
  ENET_PEER_PACKET_THROTTLE_SCALE = 32;
  ENET_PEER_PACKET_THROTTLE_COUNTER = 7;
  ENET_PEER_PACKET_THROTTLE_ACCELERATION = 2;
  ENET_PEER_PACKET_THROTTLE_DECELERATION = 2;
  ENET_PEER_PACKET_THROTTLE_INTERVAL = 5000;
  ENET_PEER_PACKET_LOSS_SCALE = 65536;
  ENET_PEER_PACKET_LOSS_INTERVAL = 10000;
  ENET_PEER_WINDOW_SIZE_SCALE = 65536;
  ENET_PEER_TIMEOUT_LIMIT = 32;
  ENET_PEER_TIMEOUT_MINIMUM = 5000;
  ENET_PEER_TIMEOUT_MAXIMUM = 30000;
  _ENET_PEER_PING_INTERVAL = 500;
  ENET_PEER_UNSEQUENCED_WINDOWS = 64;
  ENET_PEER_UNSEQUENCED_WINDOW_SIZE = 1024;
  ENET_PEER_FREE_UNSEQUENCED_WINDOWS = 32;
  ENET_PEER_RELIABLE_WINDOWS = 16;
  ENET_PEER_RELIABLE_WINDOW_SIZE = 4096;
  ENET_PEER_FREE_RELIABLE_WINDOWS = 8;
  ENET_PEER_FLAG_NEEDS_DISPATCH = 1;
  ENET_EVENT_TYPE_NONE = 0;
  ENET_EVENT_TYPE_CONNECT = 1;
  ENET_EVENT_TYPE_DISCONNECT = 2;
  ENET_EVENT_TYPE_RECEIVE = 3;

type

  { ma_log_level  }
  ma_log_level = Integer;

  { Pma_log_level  }
  Pma_log_level = ^ma_log_level;

  { _ma_channel_position  }
  _ma_channel_position = Integer;

  { P_ma_channel_position  }
  P_ma_channel_position = ^_ma_channel_position;

  { ma_result  }
  ma_result = Integer;

  { Pma_result  }
  Pma_result = ^ma_result;

  { ma_stream_format  }
  ma_stream_format = Integer;

  { Pma_stream_format  }
  Pma_stream_format = ^ma_stream_format;

  { ma_stream_layout  }
  ma_stream_layout = Integer;

  { Pma_stream_layout  }
  Pma_stream_layout = ^ma_stream_layout;

  { ma_dither_mode  }
  ma_dither_mode = Integer;

  { Pma_dither_mode  }
  Pma_dither_mode = ^ma_dither_mode;

  { ma_format  }
  ma_format = Integer;

  { Pma_format  }
  Pma_format = ^ma_format;

  { ma_standard_sample_rate  }
  ma_standard_sample_rate = Integer;

  { Pma_standard_sample_rate  }
  Pma_standard_sample_rate = ^ma_standard_sample_rate;

  { ma_channel_mix_mode  }
  ma_channel_mix_mode = Integer;

  { Pma_channel_mix_mode  }
  Pma_channel_mix_mode = ^ma_channel_mix_mode;

  { ma_standard_channel_map  }
  ma_standard_channel_map = Integer;

  { Pma_standard_channel_map  }
  Pma_standard_channel_map = ^ma_standard_channel_map;

  { ma_performance_profile  }
  ma_performance_profile = Integer;

  { Pma_performance_profile  }
  Pma_performance_profile = ^ma_performance_profile;

  { ma_thread_priority  }
  ma_thread_priority = Integer;

  { Pma_thread_priority  }
  Pma_thread_priority = ^ma_thread_priority;

  { ma_pan_mode  }
  ma_pan_mode = Integer;

  { Pma_pan_mode  }
  Pma_pan_mode = ^ma_pan_mode;

  { ma_attenuation_model  }
  ma_attenuation_model = Integer;

  { Pma_attenuation_model  }
  Pma_attenuation_model = ^ma_attenuation_model;

  { ma_positioning  }
  ma_positioning = Integer;

  { Pma_positioning  }
  Pma_positioning = ^ma_positioning;

  { ma_handedness  }
  ma_handedness = Integer;

  { Pma_handedness  }
  Pma_handedness = ^ma_handedness;

  { ma_resample_algorithm  }
  ma_resample_algorithm = Integer;

  { Pma_resample_algorithm  }
  Pma_resample_algorithm = ^ma_resample_algorithm;

  { ma_channel_conversion_path  }
  ma_channel_conversion_path = Integer;

  { Pma_channel_conversion_path  }
  Pma_channel_conversion_path = ^ma_channel_conversion_path;

  { ma_mono_expansion_mode  }
  ma_mono_expansion_mode = Integer;

  { Pma_mono_expansion_mode  }
  Pma_mono_expansion_mode = ^ma_mono_expansion_mode;

  { ma_data_converter_execution_path  }
  ma_data_converter_execution_path = Integer;

  { Pma_data_converter_execution_path  }
  Pma_data_converter_execution_path = ^ma_data_converter_execution_path;

  { ma_job_type  }
  ma_job_type = Integer;

  { Pma_job_type  }
  Pma_job_type = ^ma_job_type;

  { ma_job_queue_flags  }
  ma_job_queue_flags = Integer;

  { Pma_job_queue_flags  }
  Pma_job_queue_flags = ^ma_job_queue_flags;

  { ma_device_state  }
  ma_device_state = Integer;

  { Pma_device_state  }
  Pma_device_state = ^ma_device_state;

  { ma_backend  }
  ma_backend = Integer;

  { Pma_backend  }
  Pma_backend = ^ma_backend;

  { ma_device_notification_type  }
  ma_device_notification_type = Integer;

  { Pma_device_notification_type  }
  Pma_device_notification_type = ^ma_device_notification_type;

  { ma_device_type  }
  ma_device_type = Integer;

  { Pma_device_type  }
  Pma_device_type = ^ma_device_type;

  { ma_share_mode  }
  ma_share_mode = Integer;

  { Pma_share_mode  }
  Pma_share_mode = ^ma_share_mode;

  { ma_ios_session_category  }
  ma_ios_session_category = Integer;

  { Pma_ios_session_category  }
  Pma_ios_session_category = ^ma_ios_session_category;

  { ma_ios_session_category_option  }
  ma_ios_session_category_option = Integer;

  { Pma_ios_session_category_option  }
  Pma_ios_session_category_option = ^ma_ios_session_category_option;

  { ma_opensl_stream_type  }
  ma_opensl_stream_type = Integer;

  { Pma_opensl_stream_type  }
  Pma_opensl_stream_type = ^ma_opensl_stream_type;

  { ma_opensl_recording_preset  }
  ma_opensl_recording_preset = Integer;

  { Pma_opensl_recording_preset  }
  Pma_opensl_recording_preset = ^ma_opensl_recording_preset;

  { ma_aaudio_usage  }
  ma_aaudio_usage = Integer;

  { Pma_aaudio_usage  }
  Pma_aaudio_usage = ^ma_aaudio_usage;

  { ma_aaudio_content_type  }
  ma_aaudio_content_type = Integer;

  { Pma_aaudio_content_type  }
  Pma_aaudio_content_type = ^ma_aaudio_content_type;

  { ma_aaudio_input_preset  }
  ma_aaudio_input_preset = Integer;

  { Pma_aaudio_input_preset  }
  Pma_aaudio_input_preset = ^ma_aaudio_input_preset;

  { ma_open_mode_flags  }
  ma_open_mode_flags = Integer;

  { Pma_open_mode_flags  }
  Pma_open_mode_flags = ^ma_open_mode_flags;

  { ma_seek_origin  }
  ma_seek_origin = Integer;

  { Pma_seek_origin  }
  Pma_seek_origin = ^ma_seek_origin;

  { ma_encoding_format  }
  ma_encoding_format = Integer;

  { Pma_encoding_format  }
  Pma_encoding_format = ^ma_encoding_format;

  { ma_waveform_type  }
  ma_waveform_type = Integer;

  { Pma_waveform_type  }
  Pma_waveform_type = ^ma_waveform_type;

  { ma_noise_type  }
  ma_noise_type = Integer;

  { Pma_noise_type  }
  Pma_noise_type = ^ma_noise_type;

  { ma_resource_manager_data_source_flags  }
  ma_resource_manager_data_source_flags = Integer;

  { Pma_resource_manager_data_source_flags  }
  Pma_resource_manager_data_source_flags = ^ma_resource_manager_data_source_flags;

  { ma_resource_manager_flags  }
  ma_resource_manager_flags = Integer;

  { Pma_resource_manager_flags  }
  Pma_resource_manager_flags = ^ma_resource_manager_flags;

  { ma_resource_manager_data_supply_type  }
  ma_resource_manager_data_supply_type = Integer;

  { Pma_resource_manager_data_supply_type  }
  Pma_resource_manager_data_supply_type = ^ma_resource_manager_data_supply_type;

  { ma_node_flags  }
  ma_node_flags = Integer;

  { Pma_node_flags  }
  Pma_node_flags = ^ma_node_flags;

  { ma_node_state  }
  ma_node_state = Integer;

  { Pma_node_state  }
  Pma_node_state = ^ma_node_state;

  { ma_sound_flags  }
  ma_sound_flags = Integer;

  { Pma_sound_flags  }
  Pma_sound_flags = ^ma_sound_flags;

  { ma_engine_node_type  }
  ma_engine_node_type = Integer;

  { Pma_engine_node_type  }
  Pma_engine_node_type = ^ma_engine_node_type;

  { _anonymous_type_1  }
  _anonymous_type_1 = Integer;

  { P_anonymous_type_1  }
  P_anonymous_type_1 = ^_anonymous_type_1;

  { nk_heading  }
  nk_heading = Integer;

  { Pnk_heading  }
  Pnk_heading = ^nk_heading;

  { nk_button_behavior  }
  nk_button_behavior = Integer;

  { Pnk_button_behavior  }
  Pnk_button_behavior = ^nk_button_behavior;

  { nk_modify  }
  nk_modify = Integer;

  { Pnk_modify  }
  Pnk_modify = ^nk_modify;

  { nk_orientation  }
  nk_orientation = Integer;

  { Pnk_orientation  }
  Pnk_orientation = ^nk_orientation;

  { nk_collapse_states  }
  nk_collapse_states = Integer;

  { Pnk_collapse_states  }
  Pnk_collapse_states = ^nk_collapse_states;

  { nk_show_states  }
  nk_show_states = Integer;

  { Pnk_show_states  }
  Pnk_show_states = ^nk_show_states;

  { nk_chart_type  }
  nk_chart_type = Integer;

  { Pnk_chart_type  }
  Pnk_chart_type = ^nk_chart_type;

  { nk_chart_event  }
  nk_chart_event = Integer;

  { Pnk_chart_event  }
  Pnk_chart_event = ^nk_chart_event;

  { nk_color_format  }
  nk_color_format = Integer;

  { Pnk_color_format  }
  Pnk_color_format = ^nk_color_format;

  { nk_popup_type  }
  nk_popup_type = Integer;

  { Pnk_popup_type  }
  Pnk_popup_type = ^nk_popup_type;

  { nk_layout_format  }
  nk_layout_format = Integer;

  { Pnk_layout_format  }
  Pnk_layout_format = ^nk_layout_format;

  { nk_tree_type  }
  nk_tree_type = Integer;

  { Pnk_tree_type  }
  Pnk_tree_type = ^nk_tree_type;

  { nk_symbol_type  }
  nk_symbol_type = Integer;

  { Pnk_symbol_type  }
  Pnk_symbol_type = ^nk_symbol_type;

  { nk_keys  }
  nk_keys = Integer;

  { Pnk_keys  }
  Pnk_keys = ^nk_keys;

  { nk_buttons  }
  nk_buttons = Integer;

  { Pnk_buttons  }
  Pnk_buttons = ^nk_buttons;

  { nk_anti_aliasing  }
  nk_anti_aliasing = Integer;

  { Pnk_anti_aliasing  }
  Pnk_anti_aliasing = ^nk_anti_aliasing;

  { nk_convert_result  }
  nk_convert_result = Integer;

  { Pnk_convert_result  }
  Pnk_convert_result = ^nk_convert_result;

  { nk_panel_flags  }
  nk_panel_flags = Integer;

  { Pnk_panel_flags  }
  Pnk_panel_flags = ^nk_panel_flags;

  { nk_widget_layout_states  }
  nk_widget_layout_states = Integer;

  { Pnk_widget_layout_states  }
  Pnk_widget_layout_states = ^nk_widget_layout_states;

  { nk_widget_states  }
  nk_widget_states = Integer;

  { Pnk_widget_states  }
  Pnk_widget_states = ^nk_widget_states;

  { nk_text_align  }
  nk_text_align = Integer;

  { Pnk_text_align  }
  Pnk_text_align = ^nk_text_align;

  { nk_text_alignment  }
  nk_text_alignment = Integer;

  { Pnk_text_alignment  }
  Pnk_text_alignment = ^nk_text_alignment;

  { nk_edit_flags  }
  nk_edit_flags = Integer;

  { Pnk_edit_flags  }
  Pnk_edit_flags = ^nk_edit_flags;

  { nk_edit_types  }
  nk_edit_types = Integer;

  { Pnk_edit_types  }
  Pnk_edit_types = ^nk_edit_types;

  { nk_edit_events  }
  nk_edit_events = Integer;

  { Pnk_edit_events  }
  Pnk_edit_events = ^nk_edit_events;

  { nk_style_colors  }
  nk_style_colors = Integer;

  { Pnk_style_colors  }
  Pnk_style_colors = ^nk_style_colors;

  { nk_style_cursor  }
  nk_style_cursor = Integer;

  { Pnk_style_cursor  }
  Pnk_style_cursor = ^nk_style_cursor;

  { nk_font_coord_type  }
  nk_font_coord_type = Integer;

  { Pnk_font_coord_type  }
  Pnk_font_coord_type = ^nk_font_coord_type;

  { nk_font_atlas_format  }
  nk_font_atlas_format = Integer;

  { Pnk_font_atlas_format  }
  Pnk_font_atlas_format = ^nk_font_atlas_format;

  { nk_allocation_type  }
  nk_allocation_type = Integer;

  { Pnk_allocation_type  }
  Pnk_allocation_type = ^nk_allocation_type;

  { nk_buffer_allocation_type  }
  nk_buffer_allocation_type = Integer;

  { Pnk_buffer_allocation_type  }
  Pnk_buffer_allocation_type = ^nk_buffer_allocation_type;

  { nk_text_edit_type  }
  nk_text_edit_type = Integer;

  { Pnk_text_edit_type  }
  Pnk_text_edit_type = ^nk_text_edit_type;

  { nk_text_edit_mode  }
  nk_text_edit_mode = Integer;

  { Pnk_text_edit_mode  }
  Pnk_text_edit_mode = ^nk_text_edit_mode;

  { nk_command_type  }
  nk_command_type = Integer;

  { Pnk_command_type  }
  Pnk_command_type = ^nk_command_type;

  { nk_command_clipping  }
  nk_command_clipping = Integer;

  { Pnk_command_clipping  }
  Pnk_command_clipping = ^nk_command_clipping;

  { nk_style_item_type  }
  nk_style_item_type = Integer;

  { Pnk_style_item_type  }
  Pnk_style_item_type = ^nk_style_item_type;

  { nk_style_header_align  }
  nk_style_header_align = Integer;

  { Pnk_style_header_align  }
  Pnk_style_header_align = ^nk_style_header_align;

  { nk_panel_type  }
  nk_panel_type = Integer;

  { Pnk_panel_type  }
  Pnk_panel_type = ^nk_panel_type;

  { nk_panel_set  }
  nk_panel_set = Integer;

  { Pnk_panel_set  }
  Pnk_panel_set = ^nk_panel_set;

  { nk_panel_row_layout_type  }
  nk_panel_row_layout_type = Integer;

  { Pnk_panel_row_layout_type  }
  Pnk_panel_row_layout_type = ^nk_panel_row_layout_type;

  { nk_window_flags  }
  nk_window_flags = Integer;

  { Pnk_window_flags  }
  Pnk_window_flags = ^nk_window_flags;

  { PHYSFS_EnumerateCallbackResult  }
  PHYSFS_EnumerateCallbackResult = Integer;

  { PPHYSFS_EnumerateCallbackResult  }
  PPHYSFS_EnumerateCallbackResult = ^PHYSFS_EnumerateCallbackResult;

  { PHYSFS_FileType  }
  PHYSFS_FileType = Integer;

  { PPHYSFS_FileType  }
  PPHYSFS_FileType = ^PHYSFS_FileType;

  { PHYSFS_ErrorCode  }
  PHYSFS_ErrorCode = Integer;

  { PPHYSFS_ErrorCode  }
  PPHYSFS_ErrorCode = ^PHYSFS_ErrorCode;

  { _anonymous_type_2  }
  _anonymous_type_2 = Integer;

  { P_anonymous_type_2  }
  P_anonymous_type_2 = ^_anonymous_type_2;

  { _anonymous_type_3  }
  _anonymous_type_3 = Integer;

  { P_anonymous_type_3  }
  P_anonymous_type_3 = ^_anonymous_type_3;

  { _anonymous_type_4  }
  _anonymous_type_4 = Integer;

  { P_anonymous_type_4  }
  P_anonymous_type_4 = ^_anonymous_type_4;

  { _anonymous_type_5  }
  _anonymous_type_5 = Integer;

  { P_anonymous_type_5  }
  P_anonymous_type_5 = ^_anonymous_type_5;

  { _anonymous_type_6  }
  _anonymous_type_6 = Integer;

  { P_anonymous_type_6  }
  P_anonymous_type_6 = ^_anonymous_type_6;

  { _anonymous_type_7  }
  _anonymous_type_7 = Integer;

  { P_anonymous_type_7  }
  P_anonymous_type_7 = ^_anonymous_type_7;

  { _anonymous_type_8  }
  _anonymous_type_8 = Integer;

  { P_anonymous_type_8  }
  P_anonymous_type_8 = ^_anonymous_type_8;

  { _anonymous_type_9  }
  _anonymous_type_9 = Integer;

  { P_anonymous_type_9  }
  P_anonymous_type_9 = ^_anonymous_type_9;

  { _anonymous_type_10  }
  _anonymous_type_10 = Integer;

  { P_anonymous_type_10  }
  P_anonymous_type_10 = ^_anonymous_type_10;

  { _ENetProtocolCommand  }
  _ENetProtocolCommand = Integer;

  { P_ENetProtocolCommand  }
  P_ENetProtocolCommand = ^_ENetProtocolCommand;

  { _ENetProtocolFlag  }
  _ENetProtocolFlag = Integer;

  { P_ENetProtocolFlag  }
  P_ENetProtocolFlag = ^_ENetProtocolFlag;

  { _ENetSocketType  }
  _ENetSocketType = Integer;

  { P_ENetSocketType  }
  P_ENetSocketType = ^_ENetSocketType;

  { _ENetSocketWait  }
  _ENetSocketWait = Integer;

  { P_ENetSocketWait  }
  P_ENetSocketWait = ^_ENetSocketWait;

  { _ENetSocketOption  }
  _ENetSocketOption = Integer;

  { P_ENetSocketOption  }
  P_ENetSocketOption = ^_ENetSocketOption;

  { _ENetSocketShutdown  }
  _ENetSocketShutdown = Integer;

  { P_ENetSocketShutdown  }
  P_ENetSocketShutdown = ^_ENetSocketShutdown;

  { _ENetPacketFlag  }
  _ENetPacketFlag = Integer;

  { P_ENetPacketFlag  }
  P_ENetPacketFlag = ^_ENetPacketFlag;

  { _ENetPeerState  }
  _ENetPeerState = Integer;

  { P_ENetPeerState  }
  P_ENetPeerState = ^_ENetPeerState;

  { _anonymous_type_11  }
  _anonymous_type_11 = Integer;

  { P_anonymous_type_11  }
  P_anonymous_type_11 = ^_anonymous_type_11;

  { _ENetPeerFlag  }
  _ENetPeerFlag = Integer;

  { P_ENetPeerFlag  }
  P_ENetPeerFlag = ^_ENetPeerFlag;

  { _ENetEventType  }
  _ENetEventType = Integer;

  { P_ENetEventType  }
  P_ENetEventType = ^_ENetEventType;
  // Forward declarations

  { PPUTF8Char  }
  PPUTF8Char = ^PUTF8Char;

  { PPInteger  }
  PPInteger = ^PInteger;

  { PPSingle  }
  PPSingle = ^PSingle;

  { PPDouble  }
  PPDouble = ^PDouble;

  { PUInt8  }
  PUInt8 = ^UInt8;

  { PUInt32  }
  PUInt32 = ^UInt32;

  { PWideChar  }
  PWideChar = ^WideChar;

  { PPointer  }
  PPointer = ^Pointer;

  { PNativeUInt  }
  PNativeUInt = ^NativeUInt;

  { Pnk_draw_command  }
  Pnk_draw_command = Pointer;

  { PPnk_draw_command  }
  PPnk_draw_command = ^Pnk_draw_command;

  { Pnk_draw_list  }
  Pnk_draw_list = Pointer;

  { PPnk_draw_list  }
  PPnk_draw_list = ^Pnk_draw_list;

  { Pnk_draw_vertex_layout_element  }
  Pnk_draw_vertex_layout_element = Pointer;

  { PPnk_draw_vertex_layout_element  }
  PPnk_draw_vertex_layout_element = ^Pnk_draw_vertex_layout_element;

  { Pnk_style_slide  }
  Pnk_style_slide = Pointer;

  { PPnk_style_slide  }
  PPnk_style_slide = ^Pnk_style_slide;

  { PGLFWvidmode  }
  PGLFWvidmode = ^GLFWvidmode;

  { PGLFWgammaramp  }
  PGLFWgammaramp = ^GLFWgammaramp;

  { PGLFWimage  }
  PGLFWimage = ^GLFWimage;

  { PGLFWgamepadstate  }
  PGLFWgamepadstate = ^GLFWgamepadstate;

  { Pma_allocation_callbacks  }
  Pma_allocation_callbacks = ^ma_allocation_callbacks;

  { Pma_lcg  }
  Pma_lcg = ^ma_lcg;

  { Pma_log_callback  }
  Pma_log_callback = ^ma_log_callback;

  { Pma_log  }
  Pma_log = ^ma_log;

  { Pma_biquad_config  }
  Pma_biquad_config = ^ma_biquad_config;

  { Pma_biquad  }
  Pma_biquad = ^ma_biquad;

  { Pma_lpf1_config  }
  Pma_lpf1_config = ^ma_lpf1_config;

  { Pma_lpf1  }
  Pma_lpf1 = ^ma_lpf1;

  { Pma_lpf2  }
  Pma_lpf2 = ^ma_lpf2;

  { Pma_lpf_config  }
  Pma_lpf_config = ^ma_lpf_config;

  { Pma_lpf  }
  Pma_lpf = ^ma_lpf;

  { Pma_hpf1_config  }
  Pma_hpf1_config = ^ma_hpf1_config;

  { Pma_hpf1  }
  Pma_hpf1 = ^ma_hpf1;

  { Pma_hpf2  }
  Pma_hpf2 = ^ma_hpf2;

  { Pma_hpf_config  }
  Pma_hpf_config = ^ma_hpf_config;

  { Pma_hpf  }
  Pma_hpf = ^ma_hpf;

  { Pma_bpf2_config  }
  Pma_bpf2_config = ^ma_bpf2_config;

  { Pma_bpf2  }
  Pma_bpf2 = ^ma_bpf2;

  { Pma_bpf_config  }
  Pma_bpf_config = ^ma_bpf_config;

  { Pma_bpf  }
  Pma_bpf = ^ma_bpf;

  { Pma_notch2_config  }
  Pma_notch2_config = ^ma_notch2_config;

  { Pma_notch2  }
  Pma_notch2 = ^ma_notch2;

  { Pma_peak2_config  }
  Pma_peak2_config = ^ma_peak2_config;

  { Pma_peak2  }
  Pma_peak2 = ^ma_peak2;

  { Pma_loshelf2_config  }
  Pma_loshelf2_config = ^ma_loshelf2_config;

  { Pma_loshelf2  }
  Pma_loshelf2 = ^ma_loshelf2;

  { Pma_hishelf2_config  }
  Pma_hishelf2_config = ^ma_hishelf2_config;

  { Pma_hishelf2  }
  Pma_hishelf2 = ^ma_hishelf2;

  { Pma_delay_config  }
  Pma_delay_config = ^ma_delay_config;

  { Pma_delay  }
  Pma_delay = ^ma_delay;

  { Pma_gainer_config  }
  Pma_gainer_config = ^ma_gainer_config;

  { Pma_gainer  }
  Pma_gainer = ^ma_gainer;

  { Pma_panner_config  }
  Pma_panner_config = ^ma_panner_config;

  { Pma_panner  }
  Pma_panner = ^ma_panner;

  { Pma_fader_config  }
  Pma_fader_config = ^ma_fader_config;

  { Pma_fader  }
  Pma_fader = ^ma_fader;

  { Pma_vec3f  }
  Pma_vec3f = ^ma_vec3f;

  { Pma_spatializer_listener_config  }
  Pma_spatializer_listener_config = ^ma_spatializer_listener_config;

  { Pma_spatializer_listener  }
  Pma_spatializer_listener = ^ma_spatializer_listener;

  { Pma_spatializer_config  }
  Pma_spatializer_config = ^ma_spatializer_config;

  { Pma_spatializer  }
  Pma_spatializer = ^ma_spatializer;

  { Pma_linear_resampler_config  }
  Pma_linear_resampler_config = ^ma_linear_resampler_config;

  { Pma_linear_resampler  }
  Pma_linear_resampler = ^ma_linear_resampler;

  { Pma_resampling_backend_vtable  }
  Pma_resampling_backend_vtable = ^ma_resampling_backend_vtable;

  { Pma_resampler_config  }
  Pma_resampler_config = ^ma_resampler_config;

  { Pma_resampler  }
  Pma_resampler = ^ma_resampler;

  { Pma_channel_converter_config  }
  Pma_channel_converter_config = ^ma_channel_converter_config;

  { Pma_channel_converter  }
  Pma_channel_converter = ^ma_channel_converter;

  { Pma_data_converter_config  }
  Pma_data_converter_config = ^ma_data_converter_config;

  { Pma_data_converter  }
  Pma_data_converter = ^ma_data_converter;

  { Pma_rb  }
  Pma_rb = ^ma_rb;

  { Pma_pcm_rb  }
  Pma_pcm_rb = ^ma_pcm_rb;

  { Pma_duplex_rb  }
  Pma_duplex_rb = ^ma_duplex_rb;

  { Pma_fence  }
  Pma_fence = ^ma_fence;

  { Pma_async_notification_callbacks  }
  Pma_async_notification_callbacks = ^ma_async_notification_callbacks;

  { Pma_async_notification_poll  }
  Pma_async_notification_poll = ^ma_async_notification_poll;

  { Pma_async_notification_event  }
  Pma_async_notification_event = ^ma_async_notification_event;

  { Pma_slot_allocator_config  }
  Pma_slot_allocator_config = ^ma_slot_allocator_config;

  { Pma_slot_allocator_group  }
  Pma_slot_allocator_group = ^ma_slot_allocator_group;

  { Pma_slot_allocator  }
  Pma_slot_allocator = ^ma_slot_allocator;

  { Pma_job  }
  Pma_job = ^ma_job;

  { Pma_job_queue_config  }
  Pma_job_queue_config = ^ma_job_queue_config;

  { Pma_job_queue  }
  Pma_job_queue = ^ma_job_queue;

  { Pma_IMMNotificationClient  }
  Pma_IMMNotificationClient = ^ma_IMMNotificationClient;

  { Pma_device_job_thread_config  }
  Pma_device_job_thread_config = ^ma_device_job_thread_config;

  { Pma_device_job_thread  }
  Pma_device_job_thread = ^ma_device_job_thread;

  { Pma_device_notification  }
  Pma_device_notification = ^ma_device_notification;

  { Pma_device_info  }
  Pma_device_info = ^ma_device_info;

  { PPma_device_info  }
  PPma_device_info = ^Pma_device_info;

  { Pma_device_config  }
  Pma_device_config = ^ma_device_config;

  { Pma_device_descriptor  }
  Pma_device_descriptor = ^ma_device_descriptor;

  { Pma_backend_callbacks  }
  Pma_backend_callbacks = ^ma_backend_callbacks;

  { Pma_context_config  }
  Pma_context_config = ^ma_context_config;

  { Pma_context_command__wasapi  }
  Pma_context_command__wasapi = ^ma_context_command__wasapi;

  { Pma_context  }
  Pma_context = ^ma_context;

  { Pma_device  }
  Pma_device = ^ma_device;

  { Pma_data_source_vtable  }
  Pma_data_source_vtable = ^ma_data_source_vtable;

  { Pma_data_source_config  }
  Pma_data_source_config = ^ma_data_source_config;

  { Pma_data_source_base  }
  Pma_data_source_base = ^ma_data_source_base;

  { Pma_audio_buffer_ref  }
  Pma_audio_buffer_ref = ^ma_audio_buffer_ref;

  { Pma_audio_buffer_config  }
  Pma_audio_buffer_config = ^ma_audio_buffer_config;

  { Pma_audio_buffer  }
  Pma_audio_buffer = ^ma_audio_buffer;

  { PPma_audio_buffer  }
  PPma_audio_buffer = ^Pma_audio_buffer;

  { Pma_paged_audio_buffer_page  }
  Pma_paged_audio_buffer_page = ^ma_paged_audio_buffer_page;

  { PPma_paged_audio_buffer_page  }
  PPma_paged_audio_buffer_page = ^Pma_paged_audio_buffer_page;

  { Pma_paged_audio_buffer_data  }
  Pma_paged_audio_buffer_data = ^ma_paged_audio_buffer_data;

  { Pma_paged_audio_buffer_config  }
  Pma_paged_audio_buffer_config = ^ma_paged_audio_buffer_config;

  { Pma_paged_audio_buffer  }
  Pma_paged_audio_buffer = ^ma_paged_audio_buffer;

  { Pma_file_info  }
  Pma_file_info = ^ma_file_info;

  { Pma_vfs_callbacks  }
  Pma_vfs_callbacks = ^ma_vfs_callbacks;

  { Pma_default_vfs  }
  Pma_default_vfs = ^ma_default_vfs;

  { Pma_decoding_backend_config  }
  Pma_decoding_backend_config = ^ma_decoding_backend_config;

  { Pma_decoding_backend_vtable  }
  Pma_decoding_backend_vtable = ^ma_decoding_backend_vtable;

  { PPma_decoding_backend_vtable  }
  PPma_decoding_backend_vtable = ^Pma_decoding_backend_vtable;

  { Pma_decoder_config  }
  Pma_decoder_config = ^ma_decoder_config;

  { Pma_decoder  }
  Pma_decoder = ^ma_decoder;

  { Pma_encoder_config  }
  Pma_encoder_config = ^ma_encoder_config;

  { Pma_encoder  }
  Pma_encoder = ^ma_encoder;

  { Pma_waveform_config  }
  Pma_waveform_config = ^ma_waveform_config;

  { Pma_waveform  }
  Pma_waveform = ^ma_waveform;

  { Pma_noise_config  }
  Pma_noise_config = ^ma_noise_config;

  { Pma_noise  }
  Pma_noise = ^ma_noise;

  { Pma_resource_manager_pipeline_stage_notification  }
  Pma_resource_manager_pipeline_stage_notification = ^ma_resource_manager_pipeline_stage_notification;

  { Pma_resource_manager_pipeline_notifications  }
  Pma_resource_manager_pipeline_notifications = ^ma_resource_manager_pipeline_notifications;

  { Pma_resource_manager_data_source_config  }
  Pma_resource_manager_data_source_config = ^ma_resource_manager_data_source_config;

  { Pma_resource_manager_data_supply  }
  Pma_resource_manager_data_supply = ^ma_resource_manager_data_supply;

  { Pma_resource_manager_data_buffer_node  }
  Pma_resource_manager_data_buffer_node = ^ma_resource_manager_data_buffer_node;

  { Pma_resource_manager_data_buffer  }
  Pma_resource_manager_data_buffer = ^ma_resource_manager_data_buffer;

  { Pma_resource_manager_data_stream  }
  Pma_resource_manager_data_stream = ^ma_resource_manager_data_stream;

  { Pma_resource_manager_data_source  }
  Pma_resource_manager_data_source = ^ma_resource_manager_data_source;

  { Pma_resource_manager_config  }
  Pma_resource_manager_config = ^ma_resource_manager_config;

  { Pma_resource_manager  }
  Pma_resource_manager = ^ma_resource_manager;

  { Pma_node_vtable  }
  Pma_node_vtable = ^ma_node_vtable;

  { Pma_node_config  }
  Pma_node_config = ^ma_node_config;

  { Pma_node_output_bus  }
  Pma_node_output_bus = ^ma_node_output_bus;

  { Pma_node_input_bus  }
  Pma_node_input_bus = ^ma_node_input_bus;

  { Pma_node_base  }
  Pma_node_base = ^ma_node_base;

  { Pma_node_graph_config  }
  Pma_node_graph_config = ^ma_node_graph_config;

  { Pma_node_graph  }
  Pma_node_graph = ^ma_node_graph;

  { Pma_data_source_node_config  }
  Pma_data_source_node_config = ^ma_data_source_node_config;

  { Pma_data_source_node  }
  Pma_data_source_node = ^ma_data_source_node;

  { Pma_splitter_node_config  }
  Pma_splitter_node_config = ^ma_splitter_node_config;

  { Pma_splitter_node  }
  Pma_splitter_node = ^ma_splitter_node;

  { Pma_biquad_node_config  }
  Pma_biquad_node_config = ^ma_biquad_node_config;

  { Pma_biquad_node  }
  Pma_biquad_node = ^ma_biquad_node;

  { Pma_lpf_node_config  }
  Pma_lpf_node_config = ^ma_lpf_node_config;

  { Pma_lpf_node  }
  Pma_lpf_node = ^ma_lpf_node;

  { Pma_hpf_node_config  }
  Pma_hpf_node_config = ^ma_hpf_node_config;

  { Pma_hpf_node  }
  Pma_hpf_node = ^ma_hpf_node;

  { Pma_bpf_node_config  }
  Pma_bpf_node_config = ^ma_bpf_node_config;

  { Pma_bpf_node  }
  Pma_bpf_node = ^ma_bpf_node;

  { Pma_notch_node_config  }
  Pma_notch_node_config = ^ma_notch_node_config;

  { Pma_notch_node  }
  Pma_notch_node = ^ma_notch_node;

  { Pma_peak_node_config  }
  Pma_peak_node_config = ^ma_peak_node_config;

  { Pma_peak_node  }
  Pma_peak_node = ^ma_peak_node;

  { Pma_loshelf_node_config  }
  Pma_loshelf_node_config = ^ma_loshelf_node_config;

  { Pma_loshelf_node  }
  Pma_loshelf_node = ^ma_loshelf_node;

  { Pma_hishelf_node_config  }
  Pma_hishelf_node_config = ^ma_hishelf_node_config;

  { Pma_hishelf_node  }
  Pma_hishelf_node = ^ma_hishelf_node;

  { Pma_delay_node_config  }
  Pma_delay_node_config = ^ma_delay_node_config;

  { Pma_delay_node  }
  Pma_delay_node = ^ma_delay_node;

  { Pma_engine_node_config  }
  Pma_engine_node_config = ^ma_engine_node_config;

  { Pma_engine_node  }
  Pma_engine_node = ^ma_engine_node;

  { Pma_sound_config  }
  Pma_sound_config = ^ma_sound_config;

  { Pma_sound  }
  Pma_sound = ^ma_sound;

  { Pma_sound_inlined  }
  Pma_sound_inlined = ^ma_sound_inlined;

  { Pma_engine_config  }
  Pma_engine_config = ^ma_engine_config;

  { Pma_engine  }
  Pma_engine = ^ma_engine;

  { Pnk_color  }
  Pnk_color = ^nk_color;

  { Pnk_colorf  }
  Pnk_colorf = ^nk_colorf;

  { Pnk_vec2  }
  Pnk_vec2 = ^nk_vec2;

  { Pnk_vec2i  }
  Pnk_vec2i = ^nk_vec2i;

  { Pnk_rect  }
  Pnk_rect = ^nk_rect;

  { Pnk_recti  }
  Pnk_recti = ^nk_recti;

  { Pnk_image  }
  Pnk_image = ^nk_image;

  { Pnk_nine_slice  }
  Pnk_nine_slice = ^nk_nine_slice;

  { Pnk_cursor  }
  Pnk_cursor = ^nk_cursor;

  { Pnk_scroll  }
  Pnk_scroll = ^nk_scroll;

  { Pnk_allocator  }
  Pnk_allocator = ^nk_allocator;

  { Pnk_draw_null_texture  }
  Pnk_draw_null_texture = ^nk_draw_null_texture;

  { Pnk_convert_config  }
  Pnk_convert_config = ^nk_convert_config;

  { Pnk_list_view  }
  Pnk_list_view = ^nk_list_view;

  { Pnk_user_font_glyph  }
  Pnk_user_font_glyph = ^nk_user_font_glyph;

  { Pnk_user_font  }
  Pnk_user_font = ^nk_user_font;

  { PPnk_user_font  }
  PPnk_user_font = ^Pnk_user_font;

  { Pnk_baked_font  }
  Pnk_baked_font = ^nk_baked_font;

  { Pnk_font_config  }
  Pnk_font_config = ^nk_font_config;

  { Pnk_font_glyph  }
  Pnk_font_glyph = ^nk_font_glyph;

  { Pnk_font  }
  Pnk_font = ^nk_font;

  { Pnk_font_atlas  }
  Pnk_font_atlas = ^nk_font_atlas;

  { Pnk_memory_status  }
  Pnk_memory_status = ^nk_memory_status;

  { Pnk_buffer_marker  }
  Pnk_buffer_marker = ^nk_buffer_marker;

  { Pnk_memory  }
  Pnk_memory = ^nk_memory;

  { Pnk_buffer  }
  Pnk_buffer = ^nk_buffer;

  { Pnk_str  }
  Pnk_str = ^nk_str;

  { Pnk_clipboard  }
  Pnk_clipboard = ^nk_clipboard;

  { Pnk_text_undo_record  }
  Pnk_text_undo_record = ^nk_text_undo_record;

  { Pnk_text_undo_state  }
  Pnk_text_undo_state = ^nk_text_undo_state;

  { Pnk_text_edit  }
  Pnk_text_edit = ^nk_text_edit;

  { Pnk_command  }
  Pnk_command = ^nk_command;

  { Pnk_command_scissor  }
  Pnk_command_scissor = ^nk_command_scissor;

  { Pnk_command_line  }
  Pnk_command_line = ^nk_command_line;

  { Pnk_command_curve  }
  Pnk_command_curve = ^nk_command_curve;

  { Pnk_command_rect  }
  Pnk_command_rect = ^nk_command_rect;

  { Pnk_command_rect_filled  }
  Pnk_command_rect_filled = ^nk_command_rect_filled;

  { Pnk_command_rect_multi_color  }
  Pnk_command_rect_multi_color = ^nk_command_rect_multi_color;

  { Pnk_command_triangle  }
  Pnk_command_triangle = ^nk_command_triangle;

  { Pnk_command_triangle_filled  }
  Pnk_command_triangle_filled = ^nk_command_triangle_filled;

  { Pnk_command_circle  }
  Pnk_command_circle = ^nk_command_circle;

  { Pnk_command_circle_filled  }
  Pnk_command_circle_filled = ^nk_command_circle_filled;

  { Pnk_command_arc  }
  Pnk_command_arc = ^nk_command_arc;

  { Pnk_command_arc_filled  }
  Pnk_command_arc_filled = ^nk_command_arc_filled;

  { Pnk_command_polygon  }
  Pnk_command_polygon = ^nk_command_polygon;

  { Pnk_command_polygon_filled  }
  Pnk_command_polygon_filled = ^nk_command_polygon_filled;

  { Pnk_command_polyline  }
  Pnk_command_polyline = ^nk_command_polyline;

  { Pnk_command_image  }
  Pnk_command_image = ^nk_command_image;

  { Pnk_command_custom  }
  Pnk_command_custom = ^nk_command_custom;

  { Pnk_command_text  }
  Pnk_command_text = ^nk_command_text;

  { Pnk_command_buffer  }
  Pnk_command_buffer = ^nk_command_buffer;

  { Pnk_mouse_button  }
  Pnk_mouse_button = ^nk_mouse_button;

  { Pnk_mouse  }
  Pnk_mouse = ^nk_mouse;

  { Pnk_key  }
  Pnk_key = ^nk_key;

  { Pnk_keyboard  }
  Pnk_keyboard = ^nk_keyboard;

  { Pnk_input  }
  Pnk_input = ^nk_input;

  { Pnk_style_item  }
  Pnk_style_item = ^nk_style_item;

  { Pnk_style_text  }
  Pnk_style_text = ^nk_style_text;

  { Pnk_style_button  }
  Pnk_style_button = ^nk_style_button;

  { Pnk_style_toggle  }
  Pnk_style_toggle = ^nk_style_toggle;

  { Pnk_style_selectable  }
  Pnk_style_selectable = ^nk_style_selectable;

  { Pnk_style_slider  }
  Pnk_style_slider = ^nk_style_slider;

  { Pnk_style_progress  }
  Pnk_style_progress = ^nk_style_progress;

  { Pnk_style_scrollbar  }
  Pnk_style_scrollbar = ^nk_style_scrollbar;

  { Pnk_style_edit  }
  Pnk_style_edit = ^nk_style_edit;

  { Pnk_style_property  }
  Pnk_style_property = ^nk_style_property;

  { Pnk_style_chart  }
  Pnk_style_chart = ^nk_style_chart;

  { Pnk_style_combo  }
  Pnk_style_combo = ^nk_style_combo;

  { Pnk_style_tab  }
  Pnk_style_tab = ^nk_style_tab;

  { Pnk_style_window_header  }
  Pnk_style_window_header = ^nk_style_window_header;

  { Pnk_style_window  }
  Pnk_style_window = ^nk_style_window;

  { Pnk_style  }
  Pnk_style = ^nk_style;

  { Pnk_chart_slot  }
  Pnk_chart_slot = ^nk_chart_slot;

  { Pnk_chart  }
  Pnk_chart = ^nk_chart;

  { Pnk_row_layout  }
  Pnk_row_layout = ^nk_row_layout;

  { Pnk_popup_buffer  }
  Pnk_popup_buffer = ^nk_popup_buffer;

  { Pnk_menu_state  }
  Pnk_menu_state = ^nk_menu_state;

  { Pnk_panel  }
  Pnk_panel = ^nk_panel;

  { Pnk_popup_state  }
  Pnk_popup_state = ^nk_popup_state;

  { Pnk_edit_state  }
  Pnk_edit_state = ^nk_edit_state;

  { Pnk_property_state  }
  Pnk_property_state = ^nk_property_state;

  { Pnk_window  }
  Pnk_window = ^nk_window;

  { Pnk_config_stack_style_item_element  }
  Pnk_config_stack_style_item_element = ^nk_config_stack_style_item_element;

  { Pnk_config_stack_float_element  }
  Pnk_config_stack_float_element = ^nk_config_stack_float_element;

  { Pnk_config_stack_vec2_element  }
  Pnk_config_stack_vec2_element = ^nk_config_stack_vec2_element;

  { Pnk_config_stack_flags_element  }
  Pnk_config_stack_flags_element = ^nk_config_stack_flags_element;

  { Pnk_config_stack_color_element  }
  Pnk_config_stack_color_element = ^nk_config_stack_color_element;

  { Pnk_config_stack_user_font_element  }
  Pnk_config_stack_user_font_element = ^nk_config_stack_user_font_element;

  { Pnk_config_stack_button_behavior_element  }
  Pnk_config_stack_button_behavior_element = ^nk_config_stack_button_behavior_element;

  { Pnk_config_stack_style_item  }
  Pnk_config_stack_style_item = ^nk_config_stack_style_item;

  { Pnk_config_stack_float  }
  Pnk_config_stack_float = ^nk_config_stack_float;

  { Pnk_config_stack_vec2  }
  Pnk_config_stack_vec2 = ^nk_config_stack_vec2;

  { Pnk_config_stack_flags  }
  Pnk_config_stack_flags = ^nk_config_stack_flags;

  { Pnk_config_stack_color  }
  Pnk_config_stack_color = ^nk_config_stack_color;

  { Pnk_config_stack_user_font  }
  Pnk_config_stack_user_font = ^nk_config_stack_user_font;

  { Pnk_config_stack_button_behavior  }
  Pnk_config_stack_button_behavior = ^nk_config_stack_button_behavior;

  { Pnk_configuration_stacks  }
  Pnk_configuration_stacks = ^nk_configuration_stacks;

  { Pnk_table  }
  Pnk_table = ^nk_table;

  { Pnk_page_element  }
  Pnk_page_element = ^nk_page_element;

  { Pnk_page  }
  Pnk_page = ^nk_page;

  { Pnk_pool  }
  Pnk_pool = ^nk_pool;

  { Pnk_context  }
  Pnk_context = ^nk_context;

  { PPHYSFS_File  }
  PPHYSFS_File = ^PHYSFS_File;

  { PPHYSFS_ArchiveInfo  }
  PPHYSFS_ArchiveInfo = ^PHYSFS_ArchiveInfo;

  { PPPHYSFS_ArchiveInfo  }
  PPPHYSFS_ArchiveInfo = ^PPHYSFS_ArchiveInfo;

  { PPHYSFS_Version  }
  PPHYSFS_Version = ^PHYSFS_Version;

  { PPHYSFS_Allocator  }
  PPHYSFS_Allocator = ^PHYSFS_Allocator;

  { PPHYSFS_Stat_  }
  PPHYSFS_Stat_ = ^PHYSFS_Stat_;

  { PPHYSFS_Io  }
  PPHYSFS_Io = ^PHYSFS_Io;

  { PPHYSFS_Archiver  }
  PPHYSFS_Archiver = ^PHYSFS_Archiver;

  { Pplm_packet_t  }
  Pplm_packet_t = ^plm_packet_t;

  { Pplm_plane_t  }
  Pplm_plane_t = ^plm_plane_t;

  { Pplm_frame_t  }
  Pplm_frame_t = ^plm_frame_t;

  { Pplm_samples_t  }
  Pplm_samples_t = ^plm_samples_t;

  { Pstbi_io_callbacks  }
  Pstbi_io_callbacks = ^stbi_io_callbacks;

  { Pstbtt__buf  }
  Pstbtt__buf = ^stbtt__buf;

  { Pstbtt_bakedchar  }
  Pstbtt_bakedchar = ^stbtt_bakedchar;

  { Pstbtt_aligned_quad  }
  Pstbtt_aligned_quad = ^stbtt_aligned_quad;

  { Pstbtt_packedchar  }
  Pstbtt_packedchar = ^stbtt_packedchar;

  { Pstbtt_pack_range  }
  Pstbtt_pack_range = ^stbtt_pack_range;

  { Pstbtt_pack_context  }
  Pstbtt_pack_context = ^stbtt_pack_context;

  { Pstbtt_fontinfo  }
  Pstbtt_fontinfo = ^stbtt_fontinfo;

  { Pstbtt_kerningentry  }
  Pstbtt_kerningentry = ^stbtt_kerningentry;

  { Pstbtt_vertex  }
  Pstbtt_vertex = ^stbtt_vertex;

  { PPstbtt_vertex  }
  PPstbtt_vertex = ^Pstbtt_vertex;

  { Pstbtt__bitmap  }
  Pstbtt__bitmap = ^stbtt__bitmap;

  { PENetBuffer  }
  PENetBuffer = ^ENetBuffer;

  { P_ENetProtocolHeader  }
  P_ENetProtocolHeader = ^_ENetProtocolHeader;

  { P_ENetProtocolCommandHeader  }
  P_ENetProtocolCommandHeader = ^_ENetProtocolCommandHeader;

  { P_ENetProtocolAcknowledge  }
  P_ENetProtocolAcknowledge = ^_ENetProtocolAcknowledge;

  { P_ENetProtocolConnect  }
  P_ENetProtocolConnect = ^_ENetProtocolConnect;

  { P_ENetProtocolVerifyConnect  }
  P_ENetProtocolVerifyConnect = ^_ENetProtocolVerifyConnect;

  { P_ENetProtocolBandwidthLimit  }
  P_ENetProtocolBandwidthLimit = ^_ENetProtocolBandwidthLimit;

  { P_ENetProtocolThrottleConfigure  }
  P_ENetProtocolThrottleConfigure = ^_ENetProtocolThrottleConfigure;

  { P_ENetProtocolDisconnect  }
  P_ENetProtocolDisconnect = ^_ENetProtocolDisconnect;

  { P_ENetProtocolPing  }
  P_ENetProtocolPing = ^_ENetProtocolPing;

  { P_ENetProtocolSendReliable  }
  P_ENetProtocolSendReliable = ^_ENetProtocolSendReliable;

  { P_ENetProtocolSendUnreliable  }
  P_ENetProtocolSendUnreliable = ^_ENetProtocolSendUnreliable;

  { P_ENetProtocolSendUnsequenced  }
  P_ENetProtocolSendUnsequenced = ^_ENetProtocolSendUnsequenced;

  { P_ENetProtocolSendFragment  }
  P_ENetProtocolSendFragment = ^_ENetProtocolSendFragment;

  { P_ENetListNode  }
  P_ENetListNode = ^_ENetListNode;

  { P_ENetList  }
  P_ENetList = ^_ENetList;

  { P_ENetCallbacks  }
  P_ENetCallbacks = ^_ENetCallbacks;

  { P_ENetAddress  }
  P_ENetAddress = ^_ENetAddress;

  { P_ENetPacket  }
  P_ENetPacket = ^_ENetPacket;

  { P_ENetAcknowledgement  }
  P_ENetAcknowledgement = ^_ENetAcknowledgement;

  { P_ENetOutgoingCommand  }
  P_ENetOutgoingCommand = ^_ENetOutgoingCommand;

  { P_ENetIncomingCommand  }
  P_ENetIncomingCommand = ^_ENetIncomingCommand;

  { P_ENetChannel  }
  P_ENetChannel = ^_ENetChannel;

  { P_ENetPeer  }
  P_ENetPeer = ^_ENetPeer;

  { P_ENetCompressor  }
  P_ENetCompressor = ^_ENetCompressor;

  { P_ENetHost  }
  P_ENetHost = ^_ENetHost;

  { P_ENetEvent  }
  P_ENetEvent = ^_ENetEvent;

  { Ptm_zip_s  }
  Ptm_zip_s = ^tm_zip_s;

  { Pzip_fileinfo  }
  Pzip_fileinfo = ^zip_fileinfo;

  { GLFWglproc  }
  GLFWglproc = procedure(); cdecl;

  { GLFWvkproc  }
  GLFWvkproc = procedure(); cdecl;

  { PGLFWmonitor  }
  PGLFWmonitor = Pointer;

  { PPGLFWmonitor  }
  PPGLFWmonitor = ^PGLFWmonitor;

  { PGLFWwindow  }
  PGLFWwindow = Pointer;

  { PPGLFWwindow  }
  PPGLFWwindow = ^PGLFWwindow;

  { PGLFWcursor  }
  PGLFWcursor = Pointer;

  { PPGLFWcursor  }
  PPGLFWcursor = ^PGLFWcursor;

  { GLFWerrorfun  }
  GLFWerrorfun = procedure(error_code: Integer; const description: PUTF8Char); cdecl;

  { GLFWwindowposfun  }
  GLFWwindowposfun = procedure(window: PGLFWwindow; xpos: Integer; ypos: Integer); cdecl;

  { GLFWwindowsizefun  }
  GLFWwindowsizefun = procedure(window: PGLFWwindow; width: Integer; height: Integer); cdecl;

  { GLFWwindowclosefun  }
  GLFWwindowclosefun = procedure(window: PGLFWwindow); cdecl;

  { GLFWwindowrefreshfun  }
  GLFWwindowrefreshfun = procedure(window: PGLFWwindow); cdecl;

  { GLFWwindowfocusfun  }
  GLFWwindowfocusfun = procedure(window: PGLFWwindow; focused: Integer); cdecl;

  { GLFWwindowiconifyfun  }
  GLFWwindowiconifyfun = procedure(window: PGLFWwindow; iconified: Integer); cdecl;

  { GLFWwindowmaximizefun  }
  GLFWwindowmaximizefun = procedure(window: PGLFWwindow; maximized: Integer); cdecl;

  { GLFWframebuffersizefun  }
  GLFWframebuffersizefun = procedure(window: PGLFWwindow; width: Integer; height: Integer); cdecl;

  { GLFWwindowcontentscalefun  }
  GLFWwindowcontentscalefun = procedure(window: PGLFWwindow; xscale: Single; yscale: Single); cdecl;

  { GLFWmousebuttonfun  }
  GLFWmousebuttonfun = procedure(window: PGLFWwindow; button: Integer; action: Integer; mods: Integer); cdecl;

  { GLFWcursorposfun  }
  GLFWcursorposfun = procedure(window: PGLFWwindow; xpos: Double; ypos: Double); cdecl;

  { GLFWcursorenterfun  }
  GLFWcursorenterfun = procedure(window: PGLFWwindow; entered: Integer); cdecl;

  { GLFWscrollfun  }
  GLFWscrollfun = procedure(window: PGLFWwindow; xoffset: Double; yoffset: Double); cdecl;

  { GLFWkeyfun  }
  GLFWkeyfun = procedure(window: PGLFWwindow; key: Integer; scancode: Integer; action: Integer; mods: Integer); cdecl;

  { GLFWcharfun  }
  GLFWcharfun = procedure(window: PGLFWwindow; codepoint: Cardinal); cdecl;

  { GLFWcharmodsfun  }
  GLFWcharmodsfun = procedure(window: PGLFWwindow; codepoint: Cardinal; mods: Integer); cdecl;

  { GLFWdropfun  }
  GLFWdropfun = procedure(window: PGLFWwindow; path_count: Integer; paths: PPUTF8Char); cdecl;

  { GLFWmonitorfun  }
  GLFWmonitorfun = procedure(monitor: PGLFWmonitor; event: Integer); cdecl;

  { GLFWjoystickfun  }
  GLFWjoystickfun = procedure(jid: Integer; event: Integer); cdecl;

  { GLFWvidmode  }
  GLFWvidmode = record
    width: Integer;
    height: Integer;
    redBits: Integer;
    greenBits: Integer;
    blueBits: Integer;
    refreshRate: Integer;
  end;

  { GLFWgammaramp  }
  GLFWgammaramp = record
    red: PWord;
    green: PWord;
    blue: PWord;
    size: Cardinal;
  end;

  { GLFWimage  }
  GLFWimage = record
    width: Integer;
    height: Integer;
    pixels: PByte;
  end;

  { GLFWgamepadstate  }
  GLFWgamepadstate = record
    buttons: array [0..14] of Byte;
    axes: array [0..5] of Single;
  end;

  { ma_int8  }
  ma_int8 = UTF8Char;

  { ma_uint8  }
  ma_uint8 = Byte;

  { Pma_uint8  }
  Pma_uint8 = ^ma_uint8;

  { ma_int16  }
  ma_int16 = Smallint;

  { Pma_int16  }
  Pma_int16 = ^ma_int16;

  { ma_uint16  }
  ma_uint16 = Word;

  { ma_int32  }
  ma_int32 = Integer;

  { Pma_int32  }
  Pma_int32 = ^ma_int32;

  { PPma_int32  }
  PPma_int32 = ^Pma_int32;

  { ma_uint32  }
  ma_uint32 = Cardinal;

  { Pma_uint32  }
  Pma_uint32 = ^ma_uint32;

  { ma_int64  }
  ma_int64 = Int64;

  { Pma_int64  }
  Pma_int64 = ^ma_int64;

  { ma_uint64  }
  ma_uint64 = UInt64;

  { Pma_uint64  }
  Pma_uint64 = ^ma_uint64;

  { ma_uintptr  }
  ma_uintptr = ma_uint64;

  { ma_bool8  }
  ma_bool8 = ma_uint8;

  { ma_bool32  }
  ma_bool32 = ma_uint32;

  { ma_handle  }
  ma_handle = Pointer;

  { ma_ptr  }
  ma_ptr = Pointer;

  { Pma_ptr  }
  Pma_ptr = ^ma_ptr;

  { ma_proc  }
  ma_proc = procedure(); cdecl;

  { ma_channel  }
  ma_channel = ma_uint8;

  { Pma_channel  }
  Pma_channel = ^ma_channel;

  { ma_allocation_callbacks  }
  ma_allocation_callbacks = record
    pUserData: Pointer;
    onMalloc: function(sz: NativeUInt; pUserData: Pointer): Pointer; cdecl;
    onRealloc: function(p: Pointer; sz: NativeUInt; pUserData: Pointer): Pointer; cdecl;
    onFree: procedure(p: Pointer; pUserData: Pointer); cdecl;
  end;

  { ma_lcg  }
  ma_lcg = record
    state: ma_int32;
  end;

  { ma_spinlock  }
  ma_spinlock = ma_uint32;

  { Pma_spinlock  }
  Pma_spinlock = ^ma_spinlock;

  { ma_thread  }
  ma_thread = ma_handle;

  { ma_mutex  }
  ma_mutex = ma_handle;

  { Pma_mutex  }
  Pma_mutex = ^ma_mutex;

  { ma_event  }
  ma_event = ma_handle;

  { Pma_event  }
  Pma_event = ^ma_event;

  { ma_semaphore  }
  ma_semaphore = ma_handle;

  { ma_log_callback_proc  }
  ma_log_callback_proc = procedure(pUserData: Pointer; level: ma_uint32; const pMessage: PUTF8Char); cdecl;

  { ma_log_callback  }
  ma_log_callback = record
    onLog: ma_log_callback_proc;
    pUserData: Pointer;
  end;

  { ma_log  }
  ma_log = record
    callbacks: array [0..3] of ma_log_callback;
    callbackCount: ma_uint32;
    allocationCallbacks: ma_allocation_callbacks;
    lock: ma_mutex;
  end;

  { Pma_biquad_coefficient  }
  Pma_biquad_coefficient = ^ma_biquad_coefficient;

  { ma_biquad_coefficient  }
  ma_biquad_coefficient = record
    case Integer of
      0: (f32: Single);
      1: (s32: ma_int32);
  end;

  { ma_biquad_config  }
  ma_biquad_config = record
    format: ma_format;
    channels: ma_uint32;
    b0: Double;
    b1: Double;
    b2: Double;
    a0: Double;
    a1: Double;
    a2: Double;
  end;

  { ma_biquad  }
  ma_biquad = record
    format: ma_format;
    channels: ma_uint32;
    b0: ma_biquad_coefficient;
    b1: ma_biquad_coefficient;
    b2: ma_biquad_coefficient;
    a1: ma_biquad_coefficient;
    a2: ma_biquad_coefficient;
    pR1: Pma_biquad_coefficient;
    pR2: Pma_biquad_coefficient;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_lpf1_config  }
  ma_lpf1_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    q: Double;
  end;

  { ma_lpf2_config  }
  ma_lpf2_config = ma_lpf1_config;

  { Pma_lpf2_config  }
  Pma_lpf2_config = ^ma_lpf2_config;

  { ma_lpf1  }
  ma_lpf1 = record
    format: ma_format;
    channels: ma_uint32;
    a: ma_biquad_coefficient;
    pR1: Pma_biquad_coefficient;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_lpf2  }
  ma_lpf2 = record
    bq: ma_biquad;
  end;

  { ma_lpf_config  }
  ma_lpf_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    order: ma_uint32;
  end;

  { ma_lpf  }
  ma_lpf = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    lpf1Count: ma_uint32;
    lpf2Count: ma_uint32;
    pLPF1: Pma_lpf1;
    pLPF2: Pma_lpf2;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_hpf1_config  }
  ma_hpf1_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    q: Double;
  end;

  { ma_hpf2_config  }
  ma_hpf2_config = ma_hpf1_config;

  { Pma_hpf2_config  }
  Pma_hpf2_config = ^ma_hpf2_config;

  { ma_hpf1  }
  ma_hpf1 = record
    format: ma_format;
    channels: ma_uint32;
    a: ma_biquad_coefficient;
    pR1: Pma_biquad_coefficient;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_hpf2  }
  ma_hpf2 = record
    bq: ma_biquad;
  end;

  { ma_hpf_config  }
  ma_hpf_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    order: ma_uint32;
  end;

  { ma_hpf  }
  ma_hpf = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    hpf1Count: ma_uint32;
    hpf2Count: ma_uint32;
    pHPF1: Pma_hpf1;
    pHPF2: Pma_hpf2;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_bpf2_config  }
  ma_bpf2_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    q: Double;
  end;

  { ma_bpf2  }
  ma_bpf2 = record
    bq: ma_biquad;
  end;

  { ma_bpf_config  }
  ma_bpf_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    order: ma_uint32;
  end;

  { ma_bpf  }
  ma_bpf = record
    format: ma_format;
    channels: ma_uint32;
    bpf2Count: ma_uint32;
    pBPF2: Pma_bpf2;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_notch2_config  }
  ma_notch2_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    q: Double;
    frequency: Double;
  end;

  { ma_notch_config  }
  ma_notch_config = ma_notch2_config;

  { Pma_notch_config  }
  Pma_notch_config = ^ma_notch_config;

  { ma_notch2  }
  ma_notch2 = record
    bq: ma_biquad;
  end;

  { ma_peak2_config  }
  ma_peak2_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    gainDB: Double;
    q: Double;
    frequency: Double;
  end;

  { ma_peak_config  }
  ma_peak_config = ma_peak2_config;

  { Pma_peak_config  }
  Pma_peak_config = ^ma_peak_config;

  { ma_peak2  }
  ma_peak2 = record
    bq: ma_biquad;
  end;

  { ma_loshelf2_config  }
  ma_loshelf2_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    gainDB: Double;
    shelfSlope: Double;
    frequency: Double;
  end;

  { ma_loshelf_config  }
  ma_loshelf_config = ma_loshelf2_config;

  { Pma_loshelf_config  }
  Pma_loshelf_config = ^ma_loshelf_config;

  { ma_loshelf2  }
  ma_loshelf2 = record
    bq: ma_biquad;
  end;

  { ma_hishelf2_config  }
  ma_hishelf2_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    gainDB: Double;
    shelfSlope: Double;
    frequency: Double;
  end;

  { ma_hishelf_config  }
  ma_hishelf_config = ma_hishelf2_config;

  { Pma_hishelf_config  }
  Pma_hishelf_config = ^ma_hishelf_config;

  { ma_hishelf2  }
  ma_hishelf2 = record
    bq: ma_biquad;
  end;

  { ma_delay_config  }
  ma_delay_config = record
    channels: ma_uint32;
    sampleRate: ma_uint32;
    delayInFrames: ma_uint32;
    delayStart: ma_bool32;
    wet: Single;
    dry: Single;
    decay: Single;
  end;

  { ma_delay  }
  ma_delay = record
    config: ma_delay_config;
    cursor: ma_uint32;
    bufferSizeInFrames: ma_uint32;
    pBuffer: PSingle;
  end;

  { ma_gainer_config  }
  ma_gainer_config = record
    channels: ma_uint32;
    smoothTimeInFrames: ma_uint32;
  end;

  { ma_gainer  }
  ma_gainer = record
    config: ma_gainer_config;
    t: ma_uint32;
    pOldGains: PSingle;
    pNewGains: PSingle;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_panner_config  }
  ma_panner_config = record
    format: ma_format;
    channels: ma_uint32;
    mode: ma_pan_mode;
    pan: Single;
  end;

  { ma_panner  }
  ma_panner = record
    format: ma_format;
    channels: ma_uint32;
    mode: ma_pan_mode;
    pan: Single;
  end;

  { ma_fader_config  }
  ma_fader_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
  end;

  { ma_fader  }
  ma_fader = record
    config: ma_fader_config;
    volumeBeg: Single;
    volumeEnd: Single;
    lengthInFrames: ma_uint64;
    cursorInFrames: ma_uint64;
  end;

  { ma_vec3f  }
  ma_vec3f = record
    x: Single;
    y: Single;
    z: Single;
  end;

  { ma_spatializer_listener_config  }
  ma_spatializer_listener_config = record
    channelsOut: ma_uint32;
    pChannelMapOut: Pma_channel;
    handedness: ma_handedness;
    coneInnerAngleInRadians: Single;
    coneOuterAngleInRadians: Single;
    coneOuterGain: Single;
    speedOfSound: Single;
    worldUp: ma_vec3f;
  end;

  { ma_spatializer_listener  }
  ma_spatializer_listener = record
    config: ma_spatializer_listener_config;
    position: ma_vec3f;
    direction: ma_vec3f;
    velocity: ma_vec3f;
    isEnabled: ma_bool32;
    _ownsHeap: ma_bool32;
    _pHeap: Pointer;
  end;

  { ma_spatializer_config  }
  ma_spatializer_config = record
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    pChannelMapIn: Pma_channel;
    attenuationModel: ma_attenuation_model;
    positioning: ma_positioning;
    handedness: ma_handedness;
    minGain: Single;
    maxGain: Single;
    minDistance: Single;
    maxDistance: Single;
    rolloff: Single;
    coneInnerAngleInRadians: Single;
    coneOuterAngleInRadians: Single;
    coneOuterGain: Single;
    dopplerFactor: Single;
    directionalAttenuationFactor: Single;
    gainSmoothTimeInFrames: ma_uint32;
  end;

  { ma_spatializer  }
  ma_spatializer = record
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    pChannelMapIn: Pma_channel;
    attenuationModel: ma_attenuation_model;
    positioning: ma_positioning;
    handedness: ma_handedness;
    minGain: Single;
    maxGain: Single;
    minDistance: Single;
    maxDistance: Single;
    rolloff: Single;
    coneInnerAngleInRadians: Single;
    coneOuterAngleInRadians: Single;
    coneOuterGain: Single;
    dopplerFactor: Single;
    directionalAttenuationFactor: Single;
    gainSmoothTimeInFrames: ma_uint32;
    position: ma_vec3f;
    direction: ma_vec3f;
    velocity: ma_vec3f;
    dopplerPitch: Single;
    gainer: ma_gainer;
    pNewChannelGainsOut: PSingle;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_linear_resampler_config  }
  ma_linear_resampler_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRateIn: ma_uint32;
    sampleRateOut: ma_uint32;
    lpfOrder: ma_uint32;
    lpfNyquistFactor: Double;
  end;

  { _anonymous_type_12  }
  _anonymous_type_12 = record
    case Integer of
      0: (f32: PSingle);
      1: (s16: Pma_int16);
  end;

  { P_anonymous_type_12  }
  P_anonymous_type_12 = ^_anonymous_type_12;

  { _anonymous_type_13  }
  _anonymous_type_13 = record
    case Integer of
      0: (f32: PSingle);
      1: (s16: Pma_int16);
  end;

  { P_anonymous_type_13  }
  P_anonymous_type_13 = ^_anonymous_type_13;

  { ma_linear_resampler  }
  ma_linear_resampler = record
    config: ma_linear_resampler_config;
    inAdvanceInt: ma_uint32;
    inAdvanceFrac: ma_uint32;
    inTimeInt: ma_uint32;
    inTimeFrac: ma_uint32;
    x0: _anonymous_type_12;
    x1: _anonymous_type_13;
    lpf: ma_lpf;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { Pma_resampling_backend  }
  Pma_resampling_backend = Pointer;

  { PPma_resampling_backend  }
  PPma_resampling_backend = ^Pma_resampling_backend;

  { ma_resampling_backend_vtable  }
  ma_resampling_backend_vtable = record
    onGetHeapSize: function(pUserData: Pointer; const pConfig: Pma_resampler_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
    onInit: function(pUserData: Pointer; const pConfig: Pma_resampler_config; pHeap: Pointer; ppBackend: PPma_resampling_backend): ma_result; cdecl;
    onUninit: procedure(pUserData: Pointer; pBackend: Pma_resampling_backend; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
    onProcess: function(pUserData: Pointer; pBackend: Pma_resampling_backend; const pFramesIn: Pointer; pFrameCountIn: Pma_uint64; pFramesOut: Pointer; pFrameCountOut: Pma_uint64): ma_result; cdecl;
    onSetRate: function(pUserData: Pointer; pBackend: Pma_resampling_backend; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_result; cdecl;
    onGetInputLatency: function(pUserData: Pointer; const pBackend: Pma_resampling_backend): ma_uint64; cdecl;
    onGetOutputLatency: function(pUserData: Pointer; const pBackend: Pma_resampling_backend): ma_uint64; cdecl;
    onGetRequiredInputFrameCount: function(pUserData: Pointer; const pBackend: Pma_resampling_backend; outputFrameCount: ma_uint64; pInputFrameCount: Pma_uint64): ma_result; cdecl;
    onGetExpectedOutputFrameCount: function(pUserData: Pointer; const pBackend: Pma_resampling_backend; inputFrameCount: ma_uint64; pOutputFrameCount: Pma_uint64): ma_result; cdecl;
  end;

  { _anonymous_type_14  }
  _anonymous_type_14 = record
    lpfOrder: ma_uint32;
  end;

  { P_anonymous_type_14  }
  P_anonymous_type_14 = ^_anonymous_type_14;

  { ma_resampler_config  }
  ma_resampler_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRateIn: ma_uint32;
    sampleRateOut: ma_uint32;
    algorithm: ma_resample_algorithm;
    pBackendVTable: Pma_resampling_backend_vtable;
    pBackendUserData: Pointer;
    linear: _anonymous_type_14;
  end;

  { _anonymous_type_15  }
  _anonymous_type_15 = record
    case Integer of
      0: (linear: ma_linear_resampler);
  end;

  { P_anonymous_type_15  }
  P_anonymous_type_15 = ^_anonymous_type_15;

  { ma_resampler  }
  ma_resampler = record
    pBackend: Pma_resampling_backend;
    pBackendVTable: Pma_resampling_backend_vtable;
    pBackendUserData: Pointer;
    format: ma_format;
    channels: ma_uint32;
    sampleRateIn: ma_uint32;
    sampleRateOut: ma_uint32;
    state: _anonymous_type_15;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_channel_converter_config  }
  ma_channel_converter_config = record
    format: ma_format;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    pChannelMapIn: Pma_channel;
    pChannelMapOut: Pma_channel;
    mixingMode: ma_channel_mix_mode;
    ppWeights: PPSingle;
  end;

  { _anonymous_type_16  }
  _anonymous_type_16 = record
    case Integer of
      0: (f32: PPSingle);
      1: (s16: PPma_int32);
  end;

  { P_anonymous_type_16  }
  P_anonymous_type_16 = ^_anonymous_type_16;

  { ma_channel_converter  }
  ma_channel_converter = record
    format: ma_format;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    mixingMode: ma_channel_mix_mode;
    conversionPath: ma_channel_conversion_path;
    pChannelMapIn: Pma_channel;
    pChannelMapOut: Pma_channel;
    pShuffleTable: Pma_uint8;
    weights: _anonymous_type_16;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_data_converter_config  }
  ma_data_converter_config = record
    formatIn: ma_format;
    formatOut: ma_format;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    sampleRateIn: ma_uint32;
    sampleRateOut: ma_uint32;
    pChannelMapIn: Pma_channel;
    pChannelMapOut: Pma_channel;
    ditherMode: ma_dither_mode;
    channelMixMode: ma_channel_mix_mode;
    ppChannelWeights: PPSingle;
    allowDynamicSampleRate: ma_bool32;
    resampling: ma_resampler_config;
  end;

  { ma_data_converter  }
  ma_data_converter = record
    formatIn: ma_format;
    formatOut: ma_format;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    sampleRateIn: ma_uint32;
    sampleRateOut: ma_uint32;
    ditherMode: ma_dither_mode;
    executionPath: ma_data_converter_execution_path;
    channelConverter: ma_channel_converter;
    resampler: ma_resampler;
    hasPreFormatConversion: ma_bool8;
    hasPostFormatConversion: ma_bool8;
    hasChannelConverter: ma_bool8;
    hasResampler: ma_bool8;
    isPassthrough: ma_bool8;
    _ownsHeap: ma_bool8;
    _pHeap: Pointer;
  end;

  { ma_rb  }
  ma_rb = record
    pBuffer: Pointer;
    subbufferSizeInBytes: ma_uint32;
    subbufferCount: ma_uint32;
    subbufferStrideInBytes: ma_uint32;
    encodedReadOffset: ma_uint32;
    encodedWriteOffset: ma_uint32;
    ownsBuffer: ma_bool8;
    clearOnWriteAcquire: ma_bool8;
    allocationCallbacks: ma_allocation_callbacks;
  end;

  { ma_pcm_rb  }
  ma_pcm_rb = record
    rb: ma_rb;
    format: ma_format;
    channels: ma_uint32;
  end;

  { ma_duplex_rb  }
  ma_duplex_rb = record
    rb: ma_pcm_rb;
  end;

  { ma_fence  }
  ma_fence = record
    e: ma_event;
    counter: ma_uint32;
  end;

  { Pma_async_notification  }
  Pma_async_notification = Pointer;

  { PPma_async_notification  }
  PPma_async_notification = ^Pma_async_notification;

  { ma_async_notification_callbacks  }
  ma_async_notification_callbacks = record
    onSignal: procedure(pNotification: Pma_async_notification); cdecl;
  end;

  { ma_async_notification_poll  }
  ma_async_notification_poll = record
    cb: ma_async_notification_callbacks;
    signalled: ma_bool32;
  end;

  { ma_async_notification_event  }
  ma_async_notification_event = record
    cb: ma_async_notification_callbacks;
    e: ma_event;
  end;

  { ma_slot_allocator_config  }
  ma_slot_allocator_config = record
    capacity: ma_uint32;
  end;

  { ma_slot_allocator_group  }
  ma_slot_allocator_group = record
    bitfield: ma_uint32;
  end;

  { ma_slot_allocator  }
  ma_slot_allocator = record
    pGroups: Pma_slot_allocator_group;
    pSlots: Pma_uint32;
    count: ma_uint32;
    capacity: ma_uint32;
    _ownsHeap: ma_bool32;
    _pHeap: Pointer;
  end;

  { ma_job_proc  }
  ma_job_proc = function(pJob: Pma_job): ma_result; cdecl;

  { _anonymous_type_17  }
  _anonymous_type_17 = record
    code: ma_uint16;
    slot: ma_uint16;
    refcount: ma_uint32;
  end;

  { P_anonymous_type_17  }
  P_anonymous_type_17 = ^_anonymous_type_17;

  { _anonymous_type_18  }
  _anonymous_type_18 = record
    case Integer of
      0: (breakup: _anonymous_type_17);
      1: (allocation: ma_uint64);
  end;

  { P_anonymous_type_18  }
  P_anonymous_type_18 = ^_anonymous_type_18;

  { _anonymous_type_19  }
  _anonymous_type_19 = record
    proc: ma_job_proc;
    data0: ma_uintptr;
    data1: ma_uintptr;
  end;

  { P_anonymous_type_19  }
  P_anonymous_type_19 = ^_anonymous_type_19;

  { _anonymous_type_20  }
  _anonymous_type_20 = record
    pResourceManager: Pointer;
    pDataBufferNode: Pointer;
    pFilePath: PUTF8Char;
    pFilePathW: PWideChar;
    decode: ma_bool32;
    pInitNotification: Pma_async_notification;
    pDoneNotification: Pma_async_notification;
    pInitFence: Pma_fence;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_20  }
  P_anonymous_type_20 = ^_anonymous_type_20;

  { _anonymous_type_21  }
  _anonymous_type_21 = record
    pResourceManager: Pointer;
    pDataBufferNode: Pointer;
    pDoneNotification: Pma_async_notification;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_21  }
  P_anonymous_type_21 = ^_anonymous_type_21;

  { _anonymous_type_22  }
  _anonymous_type_22 = record
    pResourceManager: Pointer;
    pDataBufferNode: Pointer;
    pDecoder: Pointer;
    pDoneNotification: Pma_async_notification;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_22  }
  P_anonymous_type_22 = ^_anonymous_type_22;

  { _anonymous_type_23  }
  _anonymous_type_23 = record
    pDataBuffer: Pointer;
    pInitNotification: Pma_async_notification;
    pDoneNotification: Pma_async_notification;
    pInitFence: Pma_fence;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_23  }
  P_anonymous_type_23 = ^_anonymous_type_23;

  { _anonymous_type_24  }
  _anonymous_type_24 = record
    pDataBuffer: Pointer;
    pDoneNotification: Pma_async_notification;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_24  }
  P_anonymous_type_24 = ^_anonymous_type_24;

  { _anonymous_type_25  }
  _anonymous_type_25 = record
    pDataStream: Pointer;
    pFilePath: PUTF8Char;
    pFilePathW: PWideChar;
    initialSeekPoint: ma_uint64;
    pInitNotification: Pma_async_notification;
    pInitFence: Pma_fence;
  end;

  { P_anonymous_type_25  }
  P_anonymous_type_25 = ^_anonymous_type_25;

  { _anonymous_type_26  }
  _anonymous_type_26 = record
    pDataStream: Pointer;
    pDoneNotification: Pma_async_notification;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_26  }
  P_anonymous_type_26 = ^_anonymous_type_26;

  { _anonymous_type_27  }
  _anonymous_type_27 = record
    pDataStream: Pointer;
    pageIndex: ma_uint32;
  end;

  { P_anonymous_type_27  }
  P_anonymous_type_27 = ^_anonymous_type_27;

  { _anonymous_type_28  }
  _anonymous_type_28 = record
    pDataStream: Pointer;
    frameIndex: ma_uint64;
  end;

  { P_anonymous_type_28  }
  P_anonymous_type_28 = ^_anonymous_type_28;

  { _anonymous_type_29  }
  _anonymous_type_29 = record
    case Integer of
      0: (loadDataBufferNode: _anonymous_type_20);
      1: (freeDataBufferNode: _anonymous_type_21);
      2: (pageDataBufferNode: _anonymous_type_22);
      3: (loadDataBuffer: _anonymous_type_23);
      4: (freeDataBuffer: _anonymous_type_24);
      5: (loadDataStream: _anonymous_type_25);
      6: (freeDataStream: _anonymous_type_26);
      7: (pageDataStream: _anonymous_type_27);
      8: (seekDataStream: _anonymous_type_28);
  end;

  { P_anonymous_type_29  }
  P_anonymous_type_29 = ^_anonymous_type_29;

  { _anonymous_type_30  }
  _anonymous_type_30 = record
    pDevice: Pointer;
    deviceType: ma_uint32;
  end;

  { P_anonymous_type_30  }
  P_anonymous_type_30 = ^_anonymous_type_30;

  { _anonymous_type_31  }
  _anonymous_type_31 = record
    case Integer of
      0: (reroute: _anonymous_type_30);
  end;

  { P_anonymous_type_31  }
  P_anonymous_type_31 = ^_anonymous_type_31;

  { _anonymous_type_32  }
  _anonymous_type_32 = record
    case Integer of
      0: (aaudio: _anonymous_type_31);
  end;

  { P_anonymous_type_32  }
  P_anonymous_type_32 = ^_anonymous_type_32;

  { _anonymous_type_33  }
  _anonymous_type_33 = record
    case Integer of
      0: (custom: _anonymous_type_19);
      1: (resourceManager: _anonymous_type_29);
      2: (device: _anonymous_type_32);
  end;

  { P_anonymous_type_33  }
  P_anonymous_type_33 = ^_anonymous_type_33;

  { ma_job  }
  ma_job = record
    toc: _anonymous_type_18;
    next: ma_uint64;
    order: ma_uint32;
    data: _anonymous_type_33;
  end;

  { ma_job_queue_config  }
  ma_job_queue_config = record
    flags: ma_uint32;
    capacity: ma_uint32;
  end;

  { ma_job_queue  }
  ma_job_queue = record
    flags: ma_uint32;
    capacity: ma_uint32;
    head: ma_uint64;
    tail: ma_uint64;
    sem: ma_semaphore;
    allocator: ma_slot_allocator;
    pJobs: Pma_job;
    lock: ma_spinlock;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_IMMNotificationClient  }
  ma_IMMNotificationClient = record
    lpVtbl: Pointer;
    counter: ma_uint32;
    pDevice: Pma_device;
  end;

  { ma_device_job_thread_config  }
  ma_device_job_thread_config = record
    noThread: ma_bool32;
    jobQueueCapacity: ma_uint32;
    jobQueueFlags: ma_uint32;
  end;

  { ma_device_job_thread  }
  ma_device_job_thread = record
    thread: ma_thread;
    jobQueue: ma_job_queue;
    _hasThread: ma_bool32;
  end;

  { _anonymous_type_34  }
  _anonymous_type_34 = record
    _unused: Integer;
  end;

  { P_anonymous_type_34  }
  P_anonymous_type_34 = ^_anonymous_type_34;

  { _anonymous_type_35  }
  _anonymous_type_35 = record
    _unused: Integer;
  end;

  { P_anonymous_type_35  }
  P_anonymous_type_35 = ^_anonymous_type_35;

  { _anonymous_type_36  }
  _anonymous_type_36 = record
    _unused: Integer;
  end;

  { P_anonymous_type_36  }
  P_anonymous_type_36 = ^_anonymous_type_36;

  { _anonymous_type_37  }
  _anonymous_type_37 = record
    _unused: Integer;
  end;

  { P_anonymous_type_37  }
  P_anonymous_type_37 = ^_anonymous_type_37;

  { _anonymous_type_38  }
  _anonymous_type_38 = record
    case Integer of
      0: (started: _anonymous_type_34);
      1: (stopped: _anonymous_type_35);
      2: (rerouted: _anonymous_type_36);
      3: (interruption: _anonymous_type_37);
  end;

  { P_anonymous_type_38  }
  P_anonymous_type_38 = ^_anonymous_type_38;

  { ma_device_notification  }
  ma_device_notification = record
    pDevice: Pma_device;
    _type: ma_device_notification_type;
    data: _anonymous_type_38;
  end;

  { ma_device_notification_proc  }
  ma_device_notification_proc = procedure(const pNotification: Pma_device_notification); cdecl;

  { ma_device_data_proc  }
  ma_device_data_proc = procedure(pDevice: Pma_device; pOutput: Pointer; const pInput: Pointer; frameCount: ma_uint32); cdecl;

  { ma_stop_proc  }
  ma_stop_proc = procedure(pDevice: Pma_device); cdecl;

  { ma_timer  }
  ma_timer = record
    case Integer of
      0: (counter: ma_int64);
      1: (counterD: Double);
  end;

  { _anonymous_type_39  }
  _anonymous_type_39 = record
    case Integer of
      0: (i: Integer);
      1: (s: array [0..255] of UTF8Char);
      2: (p: Pointer);
  end;

  { P_anonymous_type_39  }
  P_anonymous_type_39 = ^_anonymous_type_39;

  { Pma_device_id  }
  Pma_device_id = ^ma_device_id;

  { ma_device_id  }
  ma_device_id = record
    case Integer of
      0: (wasapi: array [0..63] of WideChar);
      1: (dsound: array [0..15] of ma_uint8);
      2: (winmm: ma_uint32);
      3: (alsa: array [0..255] of UTF8Char);
      4: (pulse: array [0..255] of UTF8Char);
      5: (jack: Integer);
      6: (coreaudio: array [0..255] of UTF8Char);
      7: (sndio: array [0..255] of UTF8Char);
      8: (audio4: array [0..255] of UTF8Char);
      9: (oss: array [0..63] of UTF8Char);
      10: (aaudio: ma_int32);
      11: (opensl: ma_uint32);
      12: (webaudio: array [0..31] of UTF8Char);
      13: (custom: _anonymous_type_39);
      14: (nullbackend: Integer);
  end;

  { _anonymous_type_40  }
  _anonymous_type_40 = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    flags: ma_uint32;
  end;

  { P_anonymous_type_40  }
  P_anonymous_type_40 = ^_anonymous_type_40;

  { ma_device_info  }
  ma_device_info = record
    id: ma_device_id;
    name: array [0..255] of UTF8Char;
    isDefault: ma_bool32;
    nativeDataFormatCount: ma_uint32;
    nativeDataFormats: array [0..63] of _anonymous_type_40;
  end;

  { _anonymous_type_41  }
  _anonymous_type_41 = record
    pDeviceID: Pma_device_id;
    format: ma_format;
    channels: ma_uint32;
    pChannelMap: Pma_channel;
    channelMixMode: ma_channel_mix_mode;
    shareMode: ma_share_mode;
  end;

  { P_anonymous_type_41  }
  P_anonymous_type_41 = ^_anonymous_type_41;

  { _anonymous_type_42  }
  _anonymous_type_42 = record
    pDeviceID: Pma_device_id;
    format: ma_format;
    channels: ma_uint32;
    pChannelMap: Pma_channel;
    channelMixMode: ma_channel_mix_mode;
    shareMode: ma_share_mode;
  end;

  { P_anonymous_type_42  }
  P_anonymous_type_42 = ^_anonymous_type_42;

  { _anonymous_type_43  }
  _anonymous_type_43 = record
    noAutoConvertSRC: ma_bool8;
    noDefaultQualitySRC: ma_bool8;
    noAutoStreamRouting: ma_bool8;
    noHardwareOffloading: ma_bool8;
  end;

  { P_anonymous_type_43  }
  P_anonymous_type_43 = ^_anonymous_type_43;

  { _anonymous_type_44  }
  _anonymous_type_44 = record
    noMMap: ma_bool32;
    noAutoFormat: ma_bool32;
    noAutoChannels: ma_bool32;
    noAutoResample: ma_bool32;
  end;

  { P_anonymous_type_44  }
  P_anonymous_type_44 = ^_anonymous_type_44;

  { _anonymous_type_45  }
  _anonymous_type_45 = record
    pStreamNamePlayback: PUTF8Char;
    pStreamNameCapture: PUTF8Char;
  end;

  { P_anonymous_type_45  }
  P_anonymous_type_45 = ^_anonymous_type_45;

  { _anonymous_type_46  }
  _anonymous_type_46 = record
    allowNominalSampleRateChange: ma_bool32;
  end;

  { P_anonymous_type_46  }
  P_anonymous_type_46 = ^_anonymous_type_46;

  { _anonymous_type_47  }
  _anonymous_type_47 = record
    streamType: ma_opensl_stream_type;
    recordingPreset: ma_opensl_recording_preset;
  end;

  { P_anonymous_type_47  }
  P_anonymous_type_47 = ^_anonymous_type_47;

  { _anonymous_type_48  }
  _anonymous_type_48 = record
    usage: ma_aaudio_usage;
    contentType: ma_aaudio_content_type;
    inputPreset: ma_aaudio_input_preset;
    noAutoStartAfterReroute: ma_bool32;
  end;

  { P_anonymous_type_48  }
  P_anonymous_type_48 = ^_anonymous_type_48;

  { ma_device_config  }
  ma_device_config = record
    deviceType: ma_device_type;
    sampleRate: ma_uint32;
    periodSizeInFrames: ma_uint32;
    periodSizeInMilliseconds: ma_uint32;
    periods: ma_uint32;
    performanceProfile: ma_performance_profile;
    noPreSilencedOutputBuffer: ma_bool8;
    noClip: ma_bool8;
    noDisableDenormals: ma_bool8;
    noFixedSizedCallback: ma_bool8;
    dataCallback: ma_device_data_proc;
    notificationCallback: ma_device_notification_proc;
    stopCallback: ma_stop_proc;
    pUserData: Pointer;
    resampling: ma_resampler_config;
    playback: _anonymous_type_41;
    capture: _anonymous_type_42;
    wasapi: _anonymous_type_43;
    alsa: _anonymous_type_44;
    pulse: _anonymous_type_45;
    coreaudio: _anonymous_type_46;
    opensl: _anonymous_type_47;
    aaudio: _anonymous_type_48;
  end;

  { ma_enum_devices_callback_proc  }
  ma_enum_devices_callback_proc = function(pContext: Pma_context; deviceType: ma_device_type; const pInfo: Pma_device_info; pUserData: Pointer): ma_bool32; cdecl;

  { ma_device_descriptor  }
  ma_device_descriptor = record
    pDeviceID: Pma_device_id;
    shareMode: ma_share_mode;
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    channelMap: array [0..253] of ma_channel;
    periodSizeInFrames: ma_uint32;
    periodSizeInMilliseconds: ma_uint32;
    periodCount: ma_uint32;
  end;

  { ma_backend_callbacks  }
  ma_backend_callbacks = record
    onContextInit: function(pContext: Pma_context; const pConfig: Pma_context_config; pCallbacks: Pma_backend_callbacks): ma_result; cdecl;
    onContextUninit: function(pContext: Pma_context): ma_result; cdecl;
    onContextEnumerateDevices: function(pContext: Pma_context; callback: ma_enum_devices_callback_proc; pUserData: Pointer): ma_result; cdecl;
    onContextGetDeviceInfo: function(pContext: Pma_context; deviceType: ma_device_type; const pDeviceID: Pma_device_id; pDeviceInfo: Pma_device_info): ma_result; cdecl;
    onDeviceInit: function(pDevice: Pma_device; const pConfig: Pma_device_config; pDescriptorPlayback: Pma_device_descriptor; pDescriptorCapture: Pma_device_descriptor): ma_result; cdecl;
    onDeviceUninit: function(pDevice: Pma_device): ma_result; cdecl;
    onDeviceStart: function(pDevice: Pma_device): ma_result; cdecl;
    onDeviceStop: function(pDevice: Pma_device): ma_result; cdecl;
    onDeviceRead: function(pDevice: Pma_device; pFrames: Pointer; frameCount: ma_uint32; pFramesRead: Pma_uint32): ma_result; cdecl;
    onDeviceWrite: function(pDevice: Pma_device; const pFrames: Pointer; frameCount: ma_uint32; pFramesWritten: Pma_uint32): ma_result; cdecl;
    onDeviceDataLoop: function(pDevice: Pma_device): ma_result; cdecl;
    onDeviceDataLoopWakeup: function(pDevice: Pma_device): ma_result; cdecl;
    onDeviceGetInfo: function(pDevice: Pma_device; _type: ma_device_type; pDeviceInfo: Pma_device_info): ma_result; cdecl;
  end;

  { _anonymous_type_49  }
  _anonymous_type_49 = record
    useVerboseDeviceEnumeration: ma_bool32;
  end;

  { P_anonymous_type_49  }
  P_anonymous_type_49 = ^_anonymous_type_49;

  { _anonymous_type_50  }
  _anonymous_type_50 = record
    pApplicationName: PUTF8Char;
    pServerName: PUTF8Char;
    tryAutoSpawn: ma_bool32;
  end;

  { P_anonymous_type_50  }
  P_anonymous_type_50 = ^_anonymous_type_50;

  { _anonymous_type_51  }
  _anonymous_type_51 = record
    sessionCategory: ma_ios_session_category;
    sessionCategoryOptions: ma_uint32;
    noAudioSessionActivate: ma_bool32;
    noAudioSessionDeactivate: ma_bool32;
  end;

  { P_anonymous_type_51  }
  P_anonymous_type_51 = ^_anonymous_type_51;

  { _anonymous_type_52  }
  _anonymous_type_52 = record
    pClientName: PUTF8Char;
    tryStartServer: ma_bool32;
  end;

  { P_anonymous_type_52  }
  P_anonymous_type_52 = ^_anonymous_type_52;

  { ma_context_config  }
  ma_context_config = record
    pLog: Pma_log;
    threadPriority: ma_thread_priority;
    threadStackSize: NativeUInt;
    pUserData: Pointer;
    allocationCallbacks: ma_allocation_callbacks;
    alsa: _anonymous_type_49;
    pulse: _anonymous_type_50;
    coreaudio: _anonymous_type_51;
    jack: _anonymous_type_52;
    custom: ma_backend_callbacks;
  end;

  { _anonymous_type_53  }
  _anonymous_type_53 = record
    _unused: Integer;
  end;

  { P_anonymous_type_53  }
  P_anonymous_type_53 = ^_anonymous_type_53;

  { _anonymous_type_54  }
  _anonymous_type_54 = record
    deviceType: ma_device_type;
    pAudioClient: Pointer;
    ppAudioClientService: PPointer;
    pResult: Pma_result;
  end;

  { P_anonymous_type_54  }
  P_anonymous_type_54 = ^_anonymous_type_54;

  { _anonymous_type_55  }
  _anonymous_type_55 = record
    pDevice: Pma_device;
    deviceType: ma_device_type;
  end;

  { P_anonymous_type_55  }
  P_anonymous_type_55 = ^_anonymous_type_55;

  { _anonymous_type_56  }
  _anonymous_type_56 = record
    case Integer of
      0: (quit: _anonymous_type_53);
      1: (createAudioClient: _anonymous_type_54);
      2: (releaseAudioClient: _anonymous_type_55);
  end;

  { P_anonymous_type_56  }
  P_anonymous_type_56 = ^_anonymous_type_56;

  { ma_context_command__wasapi  }
  ma_context_command__wasapi = record
    code: Integer;
    pEvent: Pma_event;
    data: _anonymous_type_56;
  end;

  { _anonymous_type_57  }
  _anonymous_type_57 = record
    commandThread: ma_thread;
    commandLock: ma_mutex;
    commandSem: ma_semaphore;
    commandIndex: ma_uint32;
    commandCount: ma_uint32;
    commands: array [0..3] of ma_context_command__wasapi;
  end;

  { P_anonymous_type_57  }
  P_anonymous_type_57 = ^_anonymous_type_57;

  { _anonymous_type_58  }
  _anonymous_type_58 = record
    hDSoundDLL: ma_handle;
    DirectSoundCreate: ma_proc;
    DirectSoundEnumerateA: ma_proc;
    DirectSoundCaptureCreate: ma_proc;
    DirectSoundCaptureEnumerateA: ma_proc;
  end;

  { P_anonymous_type_58  }
  P_anonymous_type_58 = ^_anonymous_type_58;

  { _anonymous_type_59  }
  _anonymous_type_59 = record
    hWinMM: ma_handle;
    waveOutGetNumDevs: ma_proc;
    waveOutGetDevCapsA: ma_proc;
    waveOutOpen: ma_proc;
    waveOutClose: ma_proc;
    waveOutPrepareHeader: ma_proc;
    waveOutUnprepareHeader: ma_proc;
    waveOutWrite: ma_proc;
    waveOutReset: ma_proc;
    waveInGetNumDevs: ma_proc;
    waveInGetDevCapsA: ma_proc;
    waveInOpen: ma_proc;
    waveInClose: ma_proc;
    waveInPrepareHeader: ma_proc;
    waveInUnprepareHeader: ma_proc;
    waveInAddBuffer: ma_proc;
    waveInStart: ma_proc;
    waveInReset: ma_proc;
  end;

  { P_anonymous_type_59  }
  P_anonymous_type_59 = ^_anonymous_type_59;

  { _anonymous_type_60  }
  _anonymous_type_60 = record
    jackSO: ma_handle;
    jack_client_open: ma_proc;
    jack_client_close: ma_proc;
    jack_client_name_size: ma_proc;
    jack_set_process_callback: ma_proc;
    jack_set_buffer_size_callback: ma_proc;
    jack_on_shutdown: ma_proc;
    jack_get_sample_rate: ma_proc;
    jack_get_buffer_size: ma_proc;
    jack_get_ports: ma_proc;
    jack_activate: ma_proc;
    jack_deactivate: ma_proc;
    jack_connect: ma_proc;
    jack_port_register: ma_proc;
    jack_port_name: ma_proc;
    jack_port_get_buffer: ma_proc;
    jack_free: ma_proc;
    pClientName: PUTF8Char;
    tryStartServer: ma_bool32;
  end;

  { P_anonymous_type_60  }
  P_anonymous_type_60 = ^_anonymous_type_60;

  { _anonymous_type_61  }
  _anonymous_type_61 = record
    _unused: Integer;
  end;

  { P_anonymous_type_61  }
  P_anonymous_type_61 = ^_anonymous_type_61;

  { _anonymous_type_62  }
  _anonymous_type_62 = record
    case Integer of
      0: (wasapi: _anonymous_type_57);
      1: (dsound: _anonymous_type_58);
      2: (winmm: _anonymous_type_59);
      3: (jack: _anonymous_type_60);
      4: (null_backend: _anonymous_type_61);
  end;

  { P_anonymous_type_62  }
  P_anonymous_type_62 = ^_anonymous_type_62;

  { _anonymous_type_63  }
  _anonymous_type_63 = record
    hOle32DLL: ma_handle;
    CoInitializeEx: ma_proc;
    CoUninitialize: ma_proc;
    CoCreateInstance: ma_proc;
    CoTaskMemFree: ma_proc;
    PropVariantClear: ma_proc;
    StringFromGUID2: ma_proc;
    hUser32DLL: ma_handle;
    GetForegroundWindow: ma_proc;
    GetDesktopWindow: ma_proc;
    hAdvapi32DLL: ma_handle;
    RegOpenKeyExA: ma_proc;
    RegCloseKey: ma_proc;
    RegQueryValueExA: ma_proc;
  end;

  { P_anonymous_type_63  }
  P_anonymous_type_63 = ^_anonymous_type_63;

  { _anonymous_type_64  }
  _anonymous_type_64 = record
    case Integer of
      0: (win32: _anonymous_type_63);
      1: (_unused: Integer);
  end;

  { P_anonymous_type_64  }
  P_anonymous_type_64 = ^_anonymous_type_64;

  { ma_context  }
  ma_context = record
    callbacks: ma_backend_callbacks;
    backend: ma_backend;
    pLog: Pma_log;
    log: ma_log;
    threadPriority: ma_thread_priority;
    threadStackSize: NativeUInt;
    pUserData: Pointer;
    allocationCallbacks: ma_allocation_callbacks;
    deviceEnumLock: ma_mutex;
    deviceInfoLock: ma_mutex;
    deviceInfoCapacity: ma_uint32;
    playbackDeviceInfoCount: ma_uint32;
    captureDeviceInfoCount: ma_uint32;
    pDeviceInfos: Pma_device_info;
    f15: _anonymous_type_62;
    f16: _anonymous_type_64;
  end;

  { _anonymous_type_65  }
  _anonymous_type_65 = record
    lpfOrder: ma_uint32;
  end;

  { P_anonymous_type_65  }
  P_anonymous_type_65 = ^_anonymous_type_65;

  { _anonymous_type_66  }
  _anonymous_type_66 = record
    algorithm: ma_resample_algorithm;
    pBackendVTable: Pma_resampling_backend_vtable;
    pBackendUserData: Pointer;
    linear: _anonymous_type_65;
  end;

  { P_anonymous_type_66  }
  P_anonymous_type_66 = ^_anonymous_type_66;

  { _anonymous_type_67  }
  _anonymous_type_67 = record
    pID: Pma_device_id;
    id: ma_device_id;
    name: array [0..255] of UTF8Char;
    shareMode: ma_share_mode;
    format: ma_format;
    channels: ma_uint32;
    channelMap: array [0..253] of ma_channel;
    internalFormat: ma_format;
    internalChannels: ma_uint32;
    internalSampleRate: ma_uint32;
    internalChannelMap: array [0..253] of ma_channel;
    internalPeriodSizeInFrames: ma_uint32;
    internalPeriods: ma_uint32;
    channelMixMode: ma_channel_mix_mode;
    converter: ma_data_converter;
    pIntermediaryBuffer: Pointer;
    intermediaryBufferCap: ma_uint32;
    intermediaryBufferLen: ma_uint32;
    pInputCache: Pointer;
    inputCacheCap: ma_uint64;
    inputCacheConsumed: ma_uint64;
    inputCacheRemaining: ma_uint64;
  end;

  { P_anonymous_type_67  }
  P_anonymous_type_67 = ^_anonymous_type_67;

  { _anonymous_type_68  }
  _anonymous_type_68 = record
    pID: Pma_device_id;
    id: ma_device_id;
    name: array [0..255] of UTF8Char;
    shareMode: ma_share_mode;
    format: ma_format;
    channels: ma_uint32;
    channelMap: array [0..253] of ma_channel;
    internalFormat: ma_format;
    internalChannels: ma_uint32;
    internalSampleRate: ma_uint32;
    internalChannelMap: array [0..253] of ma_channel;
    internalPeriodSizeInFrames: ma_uint32;
    internalPeriods: ma_uint32;
    channelMixMode: ma_channel_mix_mode;
    converter: ma_data_converter;
    pIntermediaryBuffer: Pointer;
    intermediaryBufferCap: ma_uint32;
    intermediaryBufferLen: ma_uint32;
  end;

  { P_anonymous_type_68  }
  P_anonymous_type_68 = ^_anonymous_type_68;

  { _anonymous_type_69  }
  _anonymous_type_69 = record
    pAudioClientPlayback: ma_ptr;
    pAudioClientCapture: ma_ptr;
    pRenderClient: ma_ptr;
    pCaptureClient: ma_ptr;
    pDeviceEnumerator: ma_ptr;
    notificationClient: ma_IMMNotificationClient;
    hEventPlayback: ma_handle;
    hEventCapture: ma_handle;
    actualPeriodSizeInFramesPlayback: ma_uint32;
    actualPeriodSizeInFramesCapture: ma_uint32;
    originalPeriodSizeInFrames: ma_uint32;
    originalPeriodSizeInMilliseconds: ma_uint32;
    originalPeriods: ma_uint32;
    originalPerformanceProfile: ma_performance_profile;
    periodSizeInFramesPlayback: ma_uint32;
    periodSizeInFramesCapture: ma_uint32;
    isStartedCapture: ma_bool32;
    isStartedPlayback: ma_bool32;
    noAutoConvertSRC: ma_bool8;
    noDefaultQualitySRC: ma_bool8;
    noHardwareOffloading: ma_bool8;
    allowCaptureAutoStreamRouting: ma_bool8;
    allowPlaybackAutoStreamRouting: ma_bool8;
    isDetachedPlayback: ma_bool8;
    isDetachedCapture: ma_bool8;
  end;

  { P_anonymous_type_69  }
  P_anonymous_type_69 = ^_anonymous_type_69;

  { _anonymous_type_70  }
  _anonymous_type_70 = record
    pPlayback: ma_ptr;
    pPlaybackPrimaryBuffer: ma_ptr;
    pPlaybackBuffer: ma_ptr;
    pCapture: ma_ptr;
    pCaptureBuffer: ma_ptr;
  end;

  { P_anonymous_type_70  }
  P_anonymous_type_70 = ^_anonymous_type_70;

  { _anonymous_type_71  }
  _anonymous_type_71 = record
    hDevicePlayback: ma_handle;
    hDeviceCapture: ma_handle;
    hEventPlayback: ma_handle;
    hEventCapture: ma_handle;
    fragmentSizeInFrames: ma_uint32;
    iNextHeaderPlayback: ma_uint32;
    iNextHeaderCapture: ma_uint32;
    headerFramesConsumedPlayback: ma_uint32;
    headerFramesConsumedCapture: ma_uint32;
    pWAVEHDRPlayback: Pma_uint8;
    pWAVEHDRCapture: Pma_uint8;
    pIntermediaryBufferPlayback: Pma_uint8;
    pIntermediaryBufferCapture: Pma_uint8;
    _pHeapData: Pma_uint8;
  end;

  { P_anonymous_type_71  }
  P_anonymous_type_71 = ^_anonymous_type_71;

  { _anonymous_type_72  }
  _anonymous_type_72 = record
    pClient: ma_ptr;
    ppPortsPlayback: Pma_ptr;
    ppPortsCapture: Pma_ptr;
    pIntermediaryBufferPlayback: PSingle;
    pIntermediaryBufferCapture: PSingle;
  end;

  { P_anonymous_type_72  }
  P_anonymous_type_72 = ^_anonymous_type_72;

  { _anonymous_type_73  }
  _anonymous_type_73 = record
    deviceThread: ma_thread;
    operationEvent: ma_event;
    operationCompletionEvent: ma_event;
    operationSemaphore: ma_semaphore;
    operation: ma_uint32;
    operationResult: ma_result;
    timer: ma_timer;
    priorRunTime: Double;
    currentPeriodFramesRemainingPlayback: ma_uint32;
    currentPeriodFramesRemainingCapture: ma_uint32;
    lastProcessedFramePlayback: ma_uint64;
    lastProcessedFrameCapture: ma_uint64;
    isStarted: ma_bool32;
  end;

  { P_anonymous_type_73  }
  P_anonymous_type_73 = ^_anonymous_type_73;

  { _anonymous_type_74  }
  _anonymous_type_74 = record
    case Integer of
      0: (wasapi: _anonymous_type_69);
      1: (dsound: _anonymous_type_70);
      2: (winmm: _anonymous_type_71);
      3: (jack: _anonymous_type_72);
      4: (null_device: _anonymous_type_73);
  end;

  { P_anonymous_type_74  }
  P_anonymous_type_74 = ^_anonymous_type_74;

  { ma_device  }
  ma_device = record
    pContext: Pma_context;
    _type: ma_device_type;
    sampleRate: ma_uint32;
    state: ma_device_state;
    onData: ma_device_data_proc;
    onNotification: ma_device_notification_proc;
    onStop: ma_stop_proc;
    pUserData: Pointer;
    startStopLock: ma_mutex;
    wakeupEvent: ma_event;
    startEvent: ma_event;
    stopEvent: ma_event;
    thread: ma_thread;
    workResult: ma_result;
    isOwnerOfContext: ma_bool8;
    noPreSilencedOutputBuffer: ma_bool8;
    noClip: ma_bool8;
    noDisableDenormals: ma_bool8;
    noFixedSizedCallback: ma_bool8;
    masterVolumeFactor: Single;
    duplexRB: ma_duplex_rb;
    resampling: _anonymous_type_66;
    playback: _anonymous_type_67;
    capture: _anonymous_type_68;
    f25: _anonymous_type_74;
  end;

  { Pma_data_source  }
  Pma_data_source = Pointer;

  { PPma_data_source  }
  PPma_data_source = ^Pma_data_source;

  { ma_data_source_vtable  }
  ma_data_source_vtable = record
    onRead: function(pDataSource: Pma_data_source; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
    onSeek: function(pDataSource: Pma_data_source; frameIndex: ma_uint64): ma_result; cdecl;
    onGetDataFormat: function(pDataSource: Pma_data_source; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
    onGetCursor: function(pDataSource: Pma_data_source; pCursor: Pma_uint64): ma_result; cdecl;
    onGetLength: function(pDataSource: Pma_data_source; pLength: Pma_uint64): ma_result; cdecl;
    onSetLooping: function(pDataSource: Pma_data_source; isLooping: ma_bool32): ma_result; cdecl;
    flags: ma_uint32;
  end;

  { ma_data_source_get_next_proc  }
  ma_data_source_get_next_proc = function(pDataSource: Pma_data_source): Pma_data_source; cdecl;

  { ma_data_source_config  }
  ma_data_source_config = record
    vtable: Pma_data_source_vtable;
  end;

  { ma_data_source_base  }
  ma_data_source_base = record
    vtable: Pma_data_source_vtable;
    rangeBegInFrames: ma_uint64;
    rangeEndInFrames: ma_uint64;
    loopBegInFrames: ma_uint64;
    loopEndInFrames: ma_uint64;
    pCurrent: Pma_data_source;
    pNext: Pma_data_source;
    onGetNext: ma_data_source_get_next_proc;
    isLooping: ma_bool32;
  end;

  { ma_audio_buffer_ref  }
  ma_audio_buffer_ref = record
    ds: ma_data_source_base;
    format: ma_format;
    channels: ma_uint32;
    cursor: ma_uint64;
    sizeInFrames: ma_uint64;
    pData: Pointer;
  end;

  { ma_audio_buffer_config  }
  ma_audio_buffer_config = record
    format: ma_format;
    channels: ma_uint32;
    sizeInFrames: ma_uint64;
    pData: Pointer;
    allocationCallbacks: ma_allocation_callbacks;
  end;

  { ma_audio_buffer  }
  ma_audio_buffer = record
    ref: ma_audio_buffer_ref;
    allocationCallbacks: ma_allocation_callbacks;
    ownsData: ma_bool32;
    _pExtraData: array [0..0] of ma_uint8;
  end;

  { ma_paged_audio_buffer_page  }
  ma_paged_audio_buffer_page = record
    pNext: Pma_paged_audio_buffer_page;
    sizeInFrames: ma_uint64;
    pAudioData: array [0..0] of ma_uint8;
  end;

  { ma_paged_audio_buffer_data  }
  ma_paged_audio_buffer_data = record
    format: ma_format;
    channels: ma_uint32;
    head: ma_paged_audio_buffer_page;
    pTail: Pma_paged_audio_buffer_page;
  end;

  { ma_paged_audio_buffer_config  }
  ma_paged_audio_buffer_config = record
    pData: Pma_paged_audio_buffer_data;
  end;

  { ma_paged_audio_buffer  }
  ma_paged_audio_buffer = record
    ds: ma_data_source_base;
    pData: Pma_paged_audio_buffer_data;
    pCurrent: Pma_paged_audio_buffer_page;
    relativeCursor: ma_uint64;
    absoluteCursor: ma_uint64;
  end;

  { Pma_vfs  }
  Pma_vfs = Pointer;

  { PPma_vfs  }
  PPma_vfs = ^Pma_vfs;

  { ma_vfs_file  }
  ma_vfs_file = ma_handle;

  { Pma_vfs_file  }
  Pma_vfs_file = ^ma_vfs_file;

  { ma_file_info  }
  ma_file_info = record
    sizeInBytes: ma_uint64;
  end;

  { ma_vfs_callbacks  }
  ma_vfs_callbacks = record
    onOpen: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; openMode: ma_uint32; pFile: Pma_vfs_file): ma_result; cdecl;
    onOpenW: function(pVFS: Pma_vfs; const pFilePath: PWideChar; openMode: ma_uint32; pFile: Pma_vfs_file): ma_result; cdecl;
    onClose: function(pVFS: Pma_vfs; _file: ma_vfs_file): ma_result; cdecl;
    onRead: function(pVFS: Pma_vfs; _file: ma_vfs_file; pDst: Pointer; sizeInBytes: NativeUInt; pBytesRead: PNativeUInt): ma_result; cdecl;
    onWrite: function(pVFS: Pma_vfs; _file: ma_vfs_file; const pSrc: Pointer; sizeInBytes: NativeUInt; pBytesWritten: PNativeUInt): ma_result; cdecl;
    onSeek: function(pVFS: Pma_vfs; _file: ma_vfs_file; offset: ma_int64; origin: ma_seek_origin): ma_result; cdecl;
    onTell: function(pVFS: Pma_vfs; _file: ma_vfs_file; pCursor: Pma_int64): ma_result; cdecl;
    onInfo: function(pVFS: Pma_vfs; _file: ma_vfs_file; pInfo: Pma_file_info): ma_result; cdecl;
  end;

  { ma_default_vfs  }
  ma_default_vfs = record
    cb: ma_vfs_callbacks;
    allocationCallbacks: ma_allocation_callbacks;
  end;

  { ma_read_proc  }
  ma_read_proc = function(pUserData: Pointer; pBufferOut: Pointer; bytesToRead: NativeUInt; pBytesRead: PNativeUInt): ma_result; cdecl;

  { ma_seek_proc  }
  ma_seek_proc = function(pUserData: Pointer; offset: ma_int64; origin: ma_seek_origin): ma_result; cdecl;

  { ma_tell_proc  }
  ma_tell_proc = function(pUserData: Pointer; pCursor: Pma_int64): ma_result; cdecl;

  { ma_decoding_backend_config  }
  ma_decoding_backend_config = record
    preferredFormat: ma_format;
    seekPointCount: ma_uint32;
  end;

  { ma_decoding_backend_vtable  }
  ma_decoding_backend_vtable = record
    onInit: function(pUserData: Pointer; onRead: ma_read_proc; onSeek: ma_seek_proc; onTell: ma_tell_proc; pReadSeekTellUserData: Pointer; const pConfig: Pma_decoding_backend_config; const pAllocationCallbacks: Pma_allocation_callbacks; ppBackend: PPma_data_source): ma_result; cdecl;
    onInitFile: function(pUserData: Pointer; const pFilePath: PUTF8Char; const pConfig: Pma_decoding_backend_config; const pAllocationCallbacks: Pma_allocation_callbacks; ppBackend: PPma_data_source): ma_result; cdecl;
    onInitFileW: function(pUserData: Pointer; const pFilePath: PWideChar; const pConfig: Pma_decoding_backend_config; const pAllocationCallbacks: Pma_allocation_callbacks; ppBackend: PPma_data_source): ma_result; cdecl;
    onInitMemory: function(pUserData: Pointer; const pData: Pointer; dataSize: NativeUInt; const pConfig: Pma_decoding_backend_config; const pAllocationCallbacks: Pma_allocation_callbacks; ppBackend: PPma_data_source): ma_result; cdecl;
    onUninit: procedure(pUserData: Pointer; pBackend: Pma_data_source; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  end;

  { ma_decoder_read_proc  }
  ma_decoder_read_proc = function(pDecoder: Pma_decoder; pBufferOut: Pointer; bytesToRead: NativeUInt; pBytesRead: PNativeUInt): ma_result; cdecl;

  { ma_decoder_seek_proc  }
  ma_decoder_seek_proc = function(pDecoder: Pma_decoder; byteOffset: ma_int64; origin: ma_seek_origin): ma_result; cdecl;

  { ma_decoder_tell_proc  }
  ma_decoder_tell_proc = function(pDecoder: Pma_decoder; pCursor: Pma_int64): ma_result; cdecl;

  { ma_decoder_config  }
  ma_decoder_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    pChannelMap: Pma_channel;
    channelMixMode: ma_channel_mix_mode;
    ditherMode: ma_dither_mode;
    resampling: ma_resampler_config;
    allocationCallbacks: ma_allocation_callbacks;
    encodingFormat: ma_encoding_format;
    seekPointCount: ma_uint32;
    ppCustomBackendVTables: PPma_decoding_backend_vtable;
    customBackendCount: ma_uint32;
    pCustomBackendUserData: Pointer;
  end;

  { _anonymous_type_75  }
  _anonymous_type_75 = record
    pVFS: Pma_vfs;
    _file: ma_vfs_file;
  end;

  { P_anonymous_type_75  }
  P_anonymous_type_75 = ^_anonymous_type_75;

  { _anonymous_type_76  }
  _anonymous_type_76 = record
    pData: Pma_uint8;
    dataSize: NativeUInt;
    currentReadPos: NativeUInt;
  end;

  { P_anonymous_type_76  }
  P_anonymous_type_76 = ^_anonymous_type_76;

  { _anonymous_type_77  }
  _anonymous_type_77 = record
    case Integer of
      0: (vfs: _anonymous_type_75);
      1: (memory: _anonymous_type_76);
  end;

  { P_anonymous_type_77  }
  P_anonymous_type_77 = ^_anonymous_type_77;

  { ma_decoder  }
  ma_decoder = record
    ds: ma_data_source_base;
    pBackend: Pma_data_source;
    pBackendVTable: Pma_decoding_backend_vtable;
    pBackendUserData: Pointer;
    onRead: ma_decoder_read_proc;
    onSeek: ma_decoder_seek_proc;
    onTell: ma_decoder_tell_proc;
    pUserData: Pointer;
    readPointerInPCMFrames: ma_uint64;
    outputFormat: ma_format;
    outputChannels: ma_uint32;
    outputSampleRate: ma_uint32;
    converter: ma_data_converter;
    pInputCache: Pointer;
    inputCacheCap: ma_uint64;
    inputCacheConsumed: ma_uint64;
    inputCacheRemaining: ma_uint64;
    allocationCallbacks: ma_allocation_callbacks;
    data: _anonymous_type_77;
  end;

  { ma_encoder_write_proc  }
  ma_encoder_write_proc = function(pEncoder: Pma_encoder; const pBufferIn: Pointer; bytesToWrite: NativeUInt; pBytesWritten: PNativeUInt): ma_result; cdecl;

  { ma_encoder_seek_proc  }
  ma_encoder_seek_proc = function(pEncoder: Pma_encoder; offset: ma_int64; origin: ma_seek_origin): ma_result; cdecl;

  { ma_encoder_init_proc  }
  ma_encoder_init_proc = function(pEncoder: Pma_encoder): ma_result; cdecl;

  { ma_encoder_uninit_proc  }
  ma_encoder_uninit_proc = procedure(pEncoder: Pma_encoder); cdecl;

  { ma_encoder_write_pcm_frames_proc  }
  ma_encoder_write_pcm_frames_proc = function(pEncoder: Pma_encoder; const pFramesIn: Pointer; frameCount: ma_uint64; pFramesWritten: Pma_uint64): ma_result; cdecl;

  { ma_encoder_config  }
  ma_encoder_config = record
    encodingFormat: ma_encoding_format;
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    allocationCallbacks: ma_allocation_callbacks;
  end;

  { _anonymous_type_78  }
  _anonymous_type_78 = record
    pVFS: Pma_vfs;
    _file: ma_vfs_file;
  end;

  { P_anonymous_type_78  }
  P_anonymous_type_78 = ^_anonymous_type_78;

  { _anonymous_type_79  }
  _anonymous_type_79 = record
    case Integer of
      0: (vfs: _anonymous_type_78);
  end;

  { P_anonymous_type_79  }
  P_anonymous_type_79 = ^_anonymous_type_79;

  { ma_encoder  }
  ma_encoder = record
    config: ma_encoder_config;
    onWrite: ma_encoder_write_proc;
    onSeek: ma_encoder_seek_proc;
    onInit: ma_encoder_init_proc;
    onUninit: ma_encoder_uninit_proc;
    onWritePCMFrames: ma_encoder_write_pcm_frames_proc;
    pUserData: Pointer;
    pInternalEncoder: Pointer;
    data: _anonymous_type_79;
  end;

  { ma_waveform_config  }
  ma_waveform_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    _type: ma_waveform_type;
    amplitude: Double;
    frequency: Double;
  end;

  { ma_waveform  }
  ma_waveform = record
    ds: ma_data_source_base;
    config: ma_waveform_config;
    advance: Double;
    time: Double;
  end;

  { ma_noise_config  }
  ma_noise_config = record
    format: ma_format;
    channels: ma_uint32;
    _type: ma_noise_type;
    seed: ma_int32;
    amplitude: Double;
    duplicateChannels: ma_bool32;
  end;

  { _anonymous_type_80  }
  _anonymous_type_80 = record
    bin: PPDouble;
    accumulation: PDouble;
    counter: Pma_uint32;
  end;

  { P_anonymous_type_80  }
  P_anonymous_type_80 = ^_anonymous_type_80;

  { _anonymous_type_81  }
  _anonymous_type_81 = record
    accumulation: PDouble;
  end;

  { P_anonymous_type_81  }
  P_anonymous_type_81 = ^_anonymous_type_81;

  { _anonymous_type_82  }
  _anonymous_type_82 = record
    case Integer of
      0: (pink: _anonymous_type_80);
      1: (brownian: _anonymous_type_81);
  end;

  { P_anonymous_type_82  }
  P_anonymous_type_82 = ^_anonymous_type_82;

  { ma_noise  }
  ma_noise = record
    ds: ma_data_source_vtable;
    config: ma_noise_config;
    lcg: ma_lcg;
    state: _anonymous_type_82;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_resource_manager_pipeline_stage_notification  }
  ma_resource_manager_pipeline_stage_notification = record
    pNotification: Pma_async_notification;
    pFence: Pma_fence;
  end;

  { ma_resource_manager_pipeline_notifications  }
  ma_resource_manager_pipeline_notifications = record
    init: ma_resource_manager_pipeline_stage_notification;
    done: ma_resource_manager_pipeline_stage_notification;
  end;

  { ma_resource_manager_data_source_config  }
  ma_resource_manager_data_source_config = record
    pFilePath: PUTF8Char;
    pFilePathW: PWideChar;
    pNotifications: Pma_resource_manager_pipeline_notifications;
    initialSeekPointInPCMFrames: ma_uint64;
    rangeBegInPCMFrames: ma_uint64;
    rangeEndInPCMFrames: ma_uint64;
    loopPointBegInPCMFrames: ma_uint64;
    loopPointEndInPCMFrames: ma_uint64;
    isLooping: ma_bool32;
    flags: ma_uint32;
  end;

  { _anonymous_type_83  }
  _anonymous_type_83 = record
    pData: Pointer;
    sizeInBytes: NativeUInt;
  end;

  { P_anonymous_type_83  }
  P_anonymous_type_83 = ^_anonymous_type_83;

  { _anonymous_type_84  }
  _anonymous_type_84 = record
    pData: Pointer;
    totalFrameCount: ma_uint64;
    decodedFrameCount: ma_uint64;
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
  end;

  { P_anonymous_type_84  }
  P_anonymous_type_84 = ^_anonymous_type_84;

  { _anonymous_type_85  }
  _anonymous_type_85 = record
    data: ma_paged_audio_buffer_data;
    decodedFrameCount: ma_uint64;
    sampleRate: ma_uint32;
  end;

  { P_anonymous_type_85  }
  P_anonymous_type_85 = ^_anonymous_type_85;

  { _anonymous_type_86  }
  _anonymous_type_86 = record
    case Integer of
      0: (encoded: _anonymous_type_83);
      1: (decoded: _anonymous_type_84);
      2: (decodedPaged: _anonymous_type_85);
  end;

  { P_anonymous_type_86  }
  P_anonymous_type_86 = ^_anonymous_type_86;

  { ma_resource_manager_data_supply  }
  ma_resource_manager_data_supply = record
    _type: ma_resource_manager_data_supply_type;
    backend: _anonymous_type_86;
  end;

  { ma_resource_manager_data_buffer_node  }
  ma_resource_manager_data_buffer_node = record
    hashedName32: ma_uint32;
    refCount: ma_uint32;
    result: ma_result;
    executionCounter: ma_uint32;
    executionPointer: ma_uint32;
    isDataOwnedByResourceManager: ma_bool32;
    data: ma_resource_manager_data_supply;
    pParent: Pma_resource_manager_data_buffer_node;
    pChildLo: Pma_resource_manager_data_buffer_node;
    pChildHi: Pma_resource_manager_data_buffer_node;
  end;

  { _anonymous_type_87  }
  _anonymous_type_87 = record
    case Integer of
      0: (decoder: ma_decoder);
      1: (buffer: ma_audio_buffer);
      2: (pagedBuffer: ma_paged_audio_buffer);
  end;

  { P_anonymous_type_87  }
  P_anonymous_type_87 = ^_anonymous_type_87;

  { ma_resource_manager_data_buffer  }
  ma_resource_manager_data_buffer = record
    ds: ma_data_source_base;
    pResourceManager: Pma_resource_manager;
    pNode: Pma_resource_manager_data_buffer_node;
    flags: ma_uint32;
    executionCounter: ma_uint32;
    executionPointer: ma_uint32;
    seekTargetInPCMFrames: ma_uint64;
    seekToCursorOnNextRead: ma_bool32;
    result: ma_result;
    isLooping: ma_bool32;
    isConnectorInitialized: ma_bool32;
    connector: _anonymous_type_87;
  end;

  { ma_resource_manager_data_stream  }
  ma_resource_manager_data_stream = record
    ds: ma_data_source_base;
    pResourceManager: Pma_resource_manager;
    flags: ma_uint32;
    decoder: ma_decoder;
    isDecoderInitialized: ma_bool32;
    totalLengthInPCMFrames: ma_uint64;
    relativeCursor: ma_uint32;
    absoluteCursor: ma_uint64;
    currentPageIndex: ma_uint32;
    executionCounter: ma_uint32;
    executionPointer: ma_uint32;
    isLooping: ma_bool32;
    pPageData: Pointer;
    pageFrameCount: array [0..1] of ma_uint32;
    result: ma_result;
    isDecoderAtEnd: ma_bool32;
    isPageValid: array [0..1] of ma_bool32;
    seekCounter: ma_bool32;
  end;

  { _anonymous_type_88  }
  _anonymous_type_88 = record
    case Integer of
      0: (buffer: ma_resource_manager_data_buffer);
      1: (stream: ma_resource_manager_data_stream);
  end;

  { P_anonymous_type_88  }
  P_anonymous_type_88 = ^_anonymous_type_88;

  { ma_resource_manager_data_source  }
  ma_resource_manager_data_source = record
    backend: _anonymous_type_88;
    flags: ma_uint32;
    executionCounter: ma_uint32;
    executionPointer: ma_uint32;
  end;

  { ma_resource_manager_config  }
  ma_resource_manager_config = record
    allocationCallbacks: ma_allocation_callbacks;
    pLog: Pma_log;
    decodedFormat: ma_format;
    decodedChannels: ma_uint32;
    decodedSampleRate: ma_uint32;
    jobThreadCount: ma_uint32;
    jobQueueCapacity: ma_uint32;
    flags: ma_uint32;
    pVFS: Pma_vfs;
    ppCustomDecodingBackendVTables: PPma_decoding_backend_vtable;
    customDecodingBackendCount: ma_uint32;
    pCustomDecodingBackendUserData: Pointer;
  end;

  { ma_resource_manager  }
  ma_resource_manager = record
    config: ma_resource_manager_config;
    pRootDataBufferNode: Pma_resource_manager_data_buffer_node;
    dataBufferBSTLock: ma_mutex;
    jobThreads: array [0..63] of ma_thread;
    jobQueue: ma_job_queue;
    defaultVFS: ma_default_vfs;
    log: ma_log;
  end;

  { Pma_node  }
  Pma_node = Pointer;

  { PPma_node  }
  PPma_node = ^Pma_node;

  { ma_node_vtable  }
  ma_node_vtable = record
    onProcess: procedure(pNode: Pma_node; ppFramesIn: PPSingle; pFrameCountIn: Pma_uint32; ppFramesOut: PPSingle; pFrameCountOut: Pma_uint32); cdecl;
    onGetRequiredInputFrameCount: function(pNode: Pma_node; outputFrameCount: ma_uint32; pInputFrameCount: Pma_uint32): ma_result; cdecl;
    inputBusCount: ma_uint8;
    outputBusCount: ma_uint8;
    flags: ma_uint32;
  end;

  { ma_node_config  }
  ma_node_config = record
    vtable: Pma_node_vtable;
    initialState: ma_node_state;
    inputBusCount: ma_uint32;
    outputBusCount: ma_uint32;
    pInputChannels: Pma_uint32;
    pOutputChannels: Pma_uint32;
  end;

  { ma_node_output_bus  }
  ma_node_output_bus = record
    pNode: Pma_node;
    outputBusIndex: ma_uint8;
    channels: ma_uint8;
    inputNodeInputBusIndex: ma_uint8;
    flags: ma_uint32;
    refCount: ma_uint32;
    isAttached: ma_bool32;
    lock: ma_spinlock;
    volume: Single;
    pNext: Pma_node_output_bus;
    pPrev: Pma_node_output_bus;
    pInputNode: Pma_node;
  end;

  { ma_node_input_bus  }
  ma_node_input_bus = record
    head: ma_node_output_bus;
    nextCounter: ma_uint32;
    lock: ma_spinlock;
    channels: ma_uint8;
  end;

  { ma_node_base  }
  ma_node_base = record
    pNodeGraph: Pma_node_graph;
    vtable: Pma_node_vtable;
    pCachedData: PSingle;
    cachedDataCapInFramesPerBus: ma_uint16;
    cachedFrameCountOut: ma_uint16;
    cachedFrameCountIn: ma_uint16;
    consumedFrameCountIn: ma_uint16;
    state: ma_node_state;
    stateTimes: array [0..1] of ma_uint64;
    localTime: ma_uint64;
    inputBusCount: ma_uint32;
    outputBusCount: ma_uint32;
    pInputBuses: Pma_node_input_bus;
    pOutputBuses: Pma_node_output_bus;
    _inputBuses: array [0..1] of ma_node_input_bus;
    _outputBuses: array [0..1] of ma_node_output_bus;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_node_graph_config  }
  ma_node_graph_config = record
    channels: ma_uint32;
    nodeCacheCapInFrames: ma_uint16;
  end;

  { ma_node_graph  }
  ma_node_graph = record
    endpoint: ma_node_base;
    nodeCacheCapInFrames: ma_uint16;
    isReading: ma_bool32;
  end;

  { ma_data_source_node_config  }
  ma_data_source_node_config = record
    nodeConfig: ma_node_config;
    pDataSource: Pma_data_source;
  end;

  { ma_data_source_node  }
  ma_data_source_node = record
    base: ma_node_base;
    pDataSource: Pma_data_source;
  end;

  { ma_splitter_node_config  }
  ma_splitter_node_config = record
    nodeConfig: ma_node_config;
    channels: ma_uint32;
  end;

  { ma_splitter_node  }
  ma_splitter_node = record
    base: ma_node_base;
  end;

  { ma_biquad_node_config  }
  ma_biquad_node_config = record
    nodeConfig: ma_node_config;
    biquad: ma_biquad_config;
  end;

  { ma_biquad_node  }
  ma_biquad_node = record
    baseNode: ma_node_base;
    biquad: ma_biquad;
  end;

  { ma_lpf_node_config  }
  ma_lpf_node_config = record
    nodeConfig: ma_node_config;
    lpf: ma_lpf_config;
  end;

  { ma_lpf_node  }
  ma_lpf_node = record
    baseNode: ma_node_base;
    lpf: ma_lpf;
  end;

  { ma_hpf_node_config  }
  ma_hpf_node_config = record
    nodeConfig: ma_node_config;
    hpf: ma_hpf_config;
  end;

  { ma_hpf_node  }
  ma_hpf_node = record
    baseNode: ma_node_base;
    hpf: ma_hpf;
  end;

  { ma_bpf_node_config  }
  ma_bpf_node_config = record
    nodeConfig: ma_node_config;
    bpf: ma_bpf_config;
  end;

  { ma_bpf_node  }
  ma_bpf_node = record
    baseNode: ma_node_base;
    bpf: ma_bpf;
  end;

  { ma_notch_node_config  }
  ma_notch_node_config = record
    nodeConfig: ma_node_config;
    notch: ma_notch_config;
  end;

  { ma_notch_node  }
  ma_notch_node = record
    baseNode: ma_node_base;
    notch: ma_notch2;
  end;

  { ma_peak_node_config  }
  ma_peak_node_config = record
    nodeConfig: ma_node_config;
    peak: ma_peak_config;
  end;

  { ma_peak_node  }
  ma_peak_node = record
    baseNode: ma_node_base;
    peak: ma_peak2;
  end;

  { ma_loshelf_node_config  }
  ma_loshelf_node_config = record
    nodeConfig: ma_node_config;
    loshelf: ma_loshelf_config;
  end;

  { ma_loshelf_node  }
  ma_loshelf_node = record
    baseNode: ma_node_base;
    loshelf: ma_loshelf2;
  end;

  { ma_hishelf_node_config  }
  ma_hishelf_node_config = record
    nodeConfig: ma_node_config;
    hishelf: ma_hishelf_config;
  end;

  { ma_hishelf_node  }
  ma_hishelf_node = record
    baseNode: ma_node_base;
    hishelf: ma_hishelf2;
  end;

  { ma_delay_node_config  }
  ma_delay_node_config = record
    nodeConfig: ma_node_config;
    delay: ma_delay_config;
  end;

  { ma_delay_node  }
  ma_delay_node = record
    baseNode: ma_node_base;
    delay: ma_delay;
  end;

  { ma_engine_node_config  }
  ma_engine_node_config = record
    pEngine: Pma_engine;
    _type: ma_engine_node_type;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    sampleRate: ma_uint32;
    isPitchDisabled: ma_bool8;
    isSpatializationDisabled: ma_bool8;
    pinnedListenerIndex: ma_uint8;
  end;

  { ma_engine_node  }
  ma_engine_node = record
    baseNode: ma_node_base;
    pEngine: Pma_engine;
    sampleRate: ma_uint32;
    fader: ma_fader;
    resampler: ma_linear_resampler;
    spatializer: ma_spatializer;
    panner: ma_panner;
    pitch: Single;
    oldPitch: Single;
    oldDopplerPitch: Single;
    isPitchDisabled: ma_bool32;
    isSpatializationDisabled: ma_bool32;
    pinnedListenerIndex: ma_uint32;
    _ownsHeap: ma_bool8;
    _pHeap: Pointer;
  end;

  { ma_sound_config  }
  ma_sound_config = record
    pFilePath: PUTF8Char;
    pFilePathW: PWideChar;
    pDataSource: Pma_data_source;
    pInitialAttachment: Pma_node;
    initialAttachmentInputBusIndex: ma_uint32;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    flags: ma_uint32;
    initialSeekPointInPCMFrames: ma_uint64;
    rangeBegInPCMFrames: ma_uint64;
    rangeEndInPCMFrames: ma_uint64;
    loopPointBegInPCMFrames: ma_uint64;
    loopPointEndInPCMFrames: ma_uint64;
    isLooping: ma_bool32;
    pDoneFence: Pma_fence;
  end;

  { ma_sound  }
  ma_sound = record
    engineNode: ma_engine_node;
    pDataSource: Pma_data_source;
    seekTarget: ma_uint64;
    atEnd: ma_bool32;
    ownsDataSource: ma_bool8;
    pResourceManagerDataSource: Pma_resource_manager_data_source;
  end;

  { ma_sound_inlined  }
  ma_sound_inlined = record
    sound: ma_sound;
    pNext: Pma_sound_inlined;
    pPrev: Pma_sound_inlined;
  end;

  { ma_sound_group_config  }
  ma_sound_group_config = ma_sound_config;

  { Pma_sound_group_config  }
  Pma_sound_group_config = ^ma_sound_group_config;

  { ma_sound_group  }
  ma_sound_group = ma_sound;

  { Pma_sound_group  }
  Pma_sound_group = ^ma_sound_group;

  { ma_engine_config  }
  ma_engine_config = record
    pResourceManager: Pma_resource_manager;
    pContext: Pma_context;
    pDevice: Pma_device;
    pPlaybackDeviceID: Pma_device_id;
    pLog: Pma_log;
    listenerCount: ma_uint32;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    periodSizeInFrames: ma_uint32;
    periodSizeInMilliseconds: ma_uint32;
    gainSmoothTimeInFrames: ma_uint32;
    gainSmoothTimeInMilliseconds: ma_uint32;
    allocationCallbacks: ma_allocation_callbacks;
    noAutoStart: ma_bool32;
    noDevice: ma_bool32;
    monoExpansionMode: ma_mono_expansion_mode;
    pResourceManagerVFS: Pma_vfs;
  end;

  { ma_engine  }
  ma_engine = record
    nodeGraph: ma_node_graph;
    pResourceManager: Pma_resource_manager;
    pDevice: Pma_device;
    pLog: Pma_log;
    sampleRate: ma_uint32;
    listenerCount: ma_uint32;
    listeners: array [0..3] of ma_spatializer_listener;
    allocationCallbacks: ma_allocation_callbacks;
    ownsResourceManager: ma_bool8;
    ownsDevice: ma_bool8;
    inlinedSoundLock: ma_spinlock;
    pInlinedSoundHead: Pma_sound_inlined;
    inlinedSoundCount: ma_uint32;
    gainSmoothTimeInFrames: ma_uint32;
    monoExpansionMode: ma_mono_expansion_mode;
  end;

  { nk_char  }
  nk_char = Int8;

  { nk_uchar  }
  nk_uchar = UInt8;

  { nk_byte  }
  nk_byte = UInt8;

  { Pnk_byte  }
  Pnk_byte = ^nk_byte;

  { nk_short  }
  nk_short = Int16;

  { nk_ushort  }
  nk_ushort = UInt16;

  { nk_int  }
  nk_int = Int32;

  { nk_uint  }
  nk_uint = UInt32;

  { Pnk_uint  }
  Pnk_uint = ^nk_uint;

  { nk_size  }
  nk_size = UIntPtr;

  { Pnk_size  }
  Pnk_size = ^nk_size;

  { nk_ptr  }
  nk_ptr = UIntPtr;

  { nk_bool  }
  nk_bool = Boolean;

  { Pnk_bool  }
  Pnk_bool = ^nk_bool;

  { nk_hash  }
  nk_hash = nk_uint;

  { nk_flags  }
  nk_flags = nk_uint;

  { Pnk_flags  }
  Pnk_flags = ^nk_flags;

  { nk_rune  }
  nk_rune = nk_uint;

  { Pnk_rune  }
  Pnk_rune = ^nk_rune;

  { _dummy_array0  }
  _dummy_array0 = array [0..0] of UTF8Char;

  { _dummy_array1  }
  _dummy_array1 = array [0..0] of UTF8Char;

  { _dummy_array2  }
  _dummy_array2 = array [0..0] of UTF8Char;

  { _dummy_array3  }
  _dummy_array3 = array [0..0] of UTF8Char;

  { _dummy_array4  }
  _dummy_array4 = array [0..0] of UTF8Char;

  { _dummy_array5  }
  _dummy_array5 = array [0..0] of UTF8Char;

  { _dummy_array6  }
  _dummy_array6 = array [0..0] of UTF8Char;

  { _dummy_array7  }
  _dummy_array7 = array [0..0] of UTF8Char;

  { _dummy_array8  }
  _dummy_array8 = array [0..0] of UTF8Char;

  { _dummy_array9  }
  _dummy_array9 = array [0..0] of UTF8Char;

  { nk_color  }
  nk_color = record
    r: nk_byte;
    g: nk_byte;
    b: nk_byte;
    a: nk_byte;
  end;

  { nk_colorf  }
  nk_colorf = record
    r: Single;
    g: Single;
    b: Single;
    a: Single;
  end;

  { nk_vec2  }
  nk_vec2 = record
    x: Single;
    y: Single;
  end;

  { nk_vec2i  }
  nk_vec2i = record
    x: Smallint;
    y: Smallint;
  end;

  { nk_rect  }
  nk_rect = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
  end;

  { nk_recti  }
  nk_recti = record
    x: Smallint;
    y: Smallint;
    w: Smallint;
    h: Smallint;
  end;

  { nk_glyph  }
  nk_glyph = array [0..3] of UTF8Char;

  { nk_handle  }
  nk_handle = record
    case Integer of
      0: (ptr: Pointer);
      1: (id: Integer);
  end;

  { nk_image  }
  nk_image = record
    handle: nk_handle;
    w: nk_ushort;
    h: nk_ushort;
    region: array [0..3] of nk_ushort;
  end;

  { nk_nine_slice  }
  nk_nine_slice = record
    img: nk_image;
    l: nk_ushort;
    t: nk_ushort;
    r: nk_ushort;
    b: nk_ushort;
  end;

  { nk_cursor  }
  nk_cursor = record
    img: nk_image;
    size: nk_vec2;
    offset: nk_vec2;
  end;

  { nk_scroll  }
  nk_scroll = record
    x: nk_uint;
    y: nk_uint;
  end;

  { nk_plugin_alloc  }
  nk_plugin_alloc = function(p1: nk_handle; old: Pointer; p3: nk_size): Pointer; cdecl;

  { nk_plugin_free  }
  nk_plugin_free = procedure(p1: nk_handle; old: Pointer); cdecl;

  { nk_plugin_filter  }
  nk_plugin_filter = function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

  { nk_plugin_paste  }
  nk_plugin_paste = procedure(p1: nk_handle; p2: Pnk_text_edit); cdecl;

  { nk_plugin_copy  }
  nk_plugin_copy = procedure(p1: nk_handle; const p2: PUTF8Char; len: Integer); cdecl;

  { nk_allocator  }
  nk_allocator = record
    userdata: nk_handle;
    alloc: nk_plugin_alloc;
    free: nk_plugin_free;
  end;

  { nk_draw_null_texture  }
  nk_draw_null_texture = record
    texture: nk_handle;
    uv: nk_vec2;
  end;

  { nk_convert_config  }
  nk_convert_config = record
    global_alpha: Single;
    line_AA: nk_anti_aliasing;
    shape_AA: nk_anti_aliasing;
    circle_segment_count: Cardinal;
    arc_segment_count: Cardinal;
    curve_segment_count: Cardinal;
    null: nk_draw_null_texture;
    vertex_layout: Pnk_draw_vertex_layout_element;
    vertex_size: nk_size;
    vertex_alignment: nk_size;
  end;

  { nk_list_view  }
  nk_list_view = record
    _begin: Integer;
    _end: Integer;
    count: Integer;
    total_height: Integer;
    ctx: Pnk_context;
    scroll_pointer: Pnk_uint;
    scroll_value: nk_uint;
  end;

  { nk_text_width_f  }
  nk_text_width_f = function(p1: nk_handle; h: Single; const p3: PUTF8Char; len: Integer): Single; cdecl;

  { nk_query_font_glyph_f  }
  nk_query_font_glyph_f = procedure(handle: nk_handle; font_height: Single; glyph: Pnk_user_font_glyph; codepoint: nk_rune; next_codepoint: nk_rune); cdecl;

  { nk_user_font_glyph  }
  nk_user_font_glyph = record
    uv: array [0..1] of nk_vec2;
    offset: nk_vec2;
    width: Single;
    height: Single;
    xadvance: Single;
  end;

  { nk_user_font  }
  nk_user_font = record
    userdata: nk_handle;
    height: Single;
    width: nk_text_width_f;
  end;

  { nk_baked_font  }
  nk_baked_font = record
    height: Single;
    ascent: Single;
    descent: Single;
    glyph_offset: nk_rune;
    glyph_count: nk_rune;
    ranges: Pnk_rune;
  end;

  { nk_font_config  }
  nk_font_config = record
    next: Pnk_font_config;
    ttf_blob: Pointer;
    ttf_size: nk_size;
    ttf_data_owned_by_atlas: Byte;
    merge_mode: Byte;
    pixel_snap: Byte;
    oversample_v: Byte;
    oversample_h: Byte;
    padding: array [0..2] of Byte;
    size: Single;
    coord_type: nk_font_coord_type;
    spacing: nk_vec2;
    range: Pnk_rune;
    font: Pnk_baked_font;
    fallback_glyph: nk_rune;
    n: Pnk_font_config;
    p: Pnk_font_config;
  end;

  { nk_font_glyph  }
  nk_font_glyph = record
    codepoint: nk_rune;
    xadvance: Single;
    x0: Single;
    y0: Single;
    x1: Single;
    y1: Single;
    w: Single;
    h: Single;
    u0: Single;
    v0: Single;
    u1: Single;
    v1: Single;
  end;

  { nk_font  }
  nk_font = record
    next: Pnk_font;
    handle: nk_user_font;
    info: nk_baked_font;
    scale: Single;
    glyphs: Pnk_font_glyph;
    fallback: Pnk_font_glyph;
    fallback_codepoint: nk_rune;
    texture: nk_handle;
    config: Pnk_font_config;
  end;

  { nk_font_atlas  }
  nk_font_atlas = record
    pixel: Pointer;
    tex_width: Integer;
    tex_height: Integer;
    permanent: nk_allocator;
    temporary: nk_allocator;
    custom: nk_recti;
    cursors: array [0..6] of nk_cursor;
    glyph_count: Integer;
    glyphs: Pnk_font_glyph;
    default_font: Pnk_font;
    fonts: Pnk_font;
    config: Pnk_font_config;
    font_num: Integer;
  end;

  { nk_memory_status  }
  nk_memory_status = record
    memory: Pointer;
    _type: Cardinal;
    size: nk_size;
    allocated: nk_size;
    needed: nk_size;
    calls: nk_size;
  end;

  { nk_buffer_marker  }
  nk_buffer_marker = record
    active: nk_bool;
    offset: nk_size;
  end;

  { nk_memory  }
  nk_memory = record
    ptr: Pointer;
    size: nk_size;
  end;

  { nk_buffer  }
  nk_buffer = record
    marker: array [0..1] of nk_buffer_marker;
    pool: nk_allocator;
    _type: nk_allocation_type;
    memory: nk_memory;
    grow_factor: Single;
    allocated: nk_size;
    needed: nk_size;
    calls: nk_size;
    size: nk_size;
  end;

  { nk_str  }
  nk_str = record
    buffer: nk_buffer;
    len: Integer;
  end;

  { nk_clipboard  }
  nk_clipboard = record
    userdata: nk_handle;
    paste: nk_plugin_paste;
    copy: nk_plugin_copy;
  end;

  { nk_text_undo_record  }
  nk_text_undo_record = record
    where: Integer;
    insert_length: Smallint;
    delete_length: Smallint;
    char_storage: Smallint;
  end;

  { nk_text_undo_state  }
  nk_text_undo_state = record
    undo_rec: array [0..98] of nk_text_undo_record;
    undo_char: array [0..998] of nk_rune;
    undo_point: Smallint;
    redo_point: Smallint;
    undo_char_point: Smallint;
    redo_char_point: Smallint;
  end;

  { nk_text_edit  }
  nk_text_edit = record
    clip: nk_clipboard;
    _string: nk_str;
    filter: nk_plugin_filter;
    scrollbar: nk_vec2;
    cursor: Integer;
    select_start: Integer;
    select_end: Integer;
    mode: Byte;
    cursor_at_end_of_line: Byte;
    initialized: Byte;
    has_preferred_x: Byte;
    single_line: Byte;
    active: Byte;
    padding1: Byte;
    preferred_x: Single;
    undo: nk_text_undo_state;
  end;

  { nk_command  }
  nk_command = record
    _type: nk_command_type;
    next: nk_size;
  end;

  { nk_command_scissor  }
  nk_command_scissor = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
  end;

  { nk_command_line  }
  nk_command_line = record
    header: nk_command;
    line_thickness: Word;
    _begin: nk_vec2i;
    _end: nk_vec2i;
    color: nk_color;
  end;

  { nk_command_curve  }
  nk_command_curve = record
    header: nk_command;
    line_thickness: Word;
    _begin: nk_vec2i;
    _end: nk_vec2i;
    ctrl: array [0..1] of nk_vec2i;
    color: nk_color;
  end;

  { nk_command_rect  }
  nk_command_rect = record
    header: nk_command;
    rounding: Word;
    line_thickness: Word;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_rect_filled  }
  nk_command_rect_filled = record
    header: nk_command;
    rounding: Word;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_rect_multi_color  }
  nk_command_rect_multi_color = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    left: nk_color;
    top: nk_color;
    bottom: nk_color;
    right: nk_color;
  end;

  { nk_command_triangle  }
  nk_command_triangle = record
    header: nk_command;
    line_thickness: Word;
    a: nk_vec2i;
    b: nk_vec2i;
    c: nk_vec2i;
    color: nk_color;
  end;

  { nk_command_triangle_filled  }
  nk_command_triangle_filled = record
    header: nk_command;
    a: nk_vec2i;
    b: nk_vec2i;
    c: nk_vec2i;
    color: nk_color;
  end;

  { nk_command_circle  }
  nk_command_circle = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    line_thickness: Word;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_circle_filled  }
  nk_command_circle_filled = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_arc  }
  nk_command_arc = record
    header: nk_command;
    cx: Smallint;
    cy: Smallint;
    r: Word;
    line_thickness: Word;
    a: array [0..1] of Single;
    color: nk_color;
  end;

  { nk_command_arc_filled  }
  nk_command_arc_filled = record
    header: nk_command;
    cx: Smallint;
    cy: Smallint;
    r: Word;
    a: array [0..1] of Single;
    color: nk_color;
  end;

  { nk_command_polygon  }
  nk_command_polygon = record
    header: nk_command;
    color: nk_color;
    line_thickness: Word;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  { nk_command_polygon_filled  }
  nk_command_polygon_filled = record
    header: nk_command;
    color: nk_color;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  { nk_command_polyline  }
  nk_command_polyline = record
    header: nk_command;
    color: nk_color;
    line_thickness: Word;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  { nk_command_image  }
  nk_command_image = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    img: nk_image;
    col: nk_color;
  end;

  { nk_command_custom_callback  }
  nk_command_custom_callback = procedure(canvas: Pointer; x: Smallint; y: Smallint; w: Word; h: Word; callback_data: nk_handle); cdecl;

  { nk_command_custom  }
  nk_command_custom = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    callback_data: nk_handle;
    callback: nk_command_custom_callback;
  end;

  { nk_command_text  }
  nk_command_text = record
    header: nk_command;
    font: Pnk_user_font;
    background: nk_color;
    foreground: nk_color;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    height: Single;
    length: Integer;
    _string: array [0..0] of UTF8Char;
  end;

  { nk_command_buffer  }
  nk_command_buffer = record
    base: Pnk_buffer;
    clip: nk_rect;
    use_clipping: Integer;
    userdata: nk_handle;
    _begin: nk_size;
    _end: nk_size;
    last: nk_size;
  end;

  { nk_mouse_button  }
  nk_mouse_button = record
    down: nk_bool;
    clicked: Cardinal;
    clicked_pos: nk_vec2;
  end;

  { nk_mouse  }
  nk_mouse = record
    buttons: array [0..3] of nk_mouse_button;
    pos: nk_vec2;
    prev: nk_vec2;
    delta: nk_vec2;
    scroll_delta: nk_vec2;
    grab: Byte;
    grabbed: Byte;
    ungrab: Byte;
  end;

  { nk_key  }
  nk_key = record
    down: nk_bool;
    clicked: Cardinal;
  end;

  { nk_keyboard  }
  nk_keyboard = record
    keys: array [0..29] of nk_key;
    text: array [0..15] of UTF8Char;
    text_len: Integer;
  end;

  { nk_input  }
  nk_input = record
    keyboard: nk_keyboard;
    mouse: nk_mouse;
  end;

  { nk_style_item_data  }
  nk_style_item_data = record
    case Integer of
      0: (color: nk_color);
      1: (image: nk_image);
      2: (slice: nk_nine_slice);
  end;

  { nk_style_item  }
  nk_style_item = record
    _type: nk_style_item_type;
    data: nk_style_item_data;
  end;

  { nk_style_text  }
  nk_style_text = record
    color: nk_color;
    padding: nk_vec2;
  end;

  { nk_style_button  }
  nk_style_button = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    text_background: nk_color;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    text_alignment: nk_flags;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
    image_padding: nk_vec2;
    touch_padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; userdata: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; userdata: nk_handle); cdecl;
  end;

  { nk_style_toggle  }
  nk_style_toggle = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    text_background: nk_color;
    text_alignment: nk_flags;
    padding: nk_vec2;
    touch_padding: nk_vec2;
    spacing: Single;
    border: Single;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_selectable  }
  nk_style_selectable = record
    normal: nk_style_item;
    hover: nk_style_item;
    pressed: nk_style_item;
    normal_active: nk_style_item;
    hover_active: nk_style_item;
    pressed_active: nk_style_item;
    text_normal: nk_color;
    text_hover: nk_color;
    text_pressed: nk_color;
    text_normal_active: nk_color;
    text_hover_active: nk_color;
    text_pressed_active: nk_color;
    text_background: nk_color;
    text_alignment: nk_flags;
    rounding: Single;
    padding: nk_vec2;
    touch_padding: nk_vec2;
    image_padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_slider  }
  nk_style_slider = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    bar_normal: nk_color;
    bar_hover: nk_color;
    bar_active: nk_color;
    bar_filled: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    border: Single;
    rounding: Single;
    bar_height: Single;
    padding: nk_vec2;
    spacing: nk_vec2;
    cursor_size: nk_vec2;
    show_buttons: Integer;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    inc_symbol: nk_symbol_type;
    dec_symbol: nk_symbol_type;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_progress  }
  nk_style_progress = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    cursor_border_color: nk_color;
    rounding: Single;
    border: Single;
    cursor_border: Single;
    cursor_rounding: Single;
    padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_scrollbar  }
  nk_style_scrollbar = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    cursor_border_color: nk_color;
    border: Single;
    rounding: Single;
    border_cursor: Single;
    rounding_cursor: Single;
    padding: nk_vec2;
    show_buttons: Integer;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    inc_symbol: nk_symbol_type;
    dec_symbol: nk_symbol_type;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_edit  }
  nk_style_edit = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    scrollbar: nk_style_scrollbar;
    cursor_normal: nk_color;
    cursor_hover: nk_color;
    cursor_text_normal: nk_color;
    cursor_text_hover: nk_color;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    selected_normal: nk_color;
    selected_hover: nk_color;
    selected_text_normal: nk_color;
    selected_text_hover: nk_color;
    border: Single;
    rounding: Single;
    cursor_size: Single;
    scrollbar_size: nk_vec2;
    padding: nk_vec2;
    row_padding: Single;
  end;

  { nk_style_property  }
  nk_style_property = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    sym_left: nk_symbol_type;
    sym_right: nk_symbol_type;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
    edit: nk_style_edit;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_chart  }
  nk_style_chart = record
    background: nk_style_item;
    border_color: nk_color;
    selected_color: nk_color;
    color: nk_color;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
  end;

  { nk_style_combo  }
  nk_style_combo = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    symbol_normal: nk_color;
    symbol_hover: nk_color;
    symbol_active: nk_color;
    button: nk_style_button;
    sym_normal: nk_symbol_type;
    sym_hover: nk_symbol_type;
    sym_active: nk_symbol_type;
    border: Single;
    rounding: Single;
    content_padding: nk_vec2;
    button_padding: nk_vec2;
    spacing: nk_vec2;
  end;

  { nk_style_tab  }
  nk_style_tab = record
    background: nk_style_item;
    border_color: nk_color;
    text: nk_color;
    tab_maximize_button: nk_style_button;
    tab_minimize_button: nk_style_button;
    node_maximize_button: nk_style_button;
    node_minimize_button: nk_style_button;
    sym_minimize: nk_symbol_type;
    sym_maximize: nk_symbol_type;
    border: Single;
    rounding: Single;
    indent: Single;
    padding: nk_vec2;
    spacing: nk_vec2;
  end;

  { nk_style_window_header  }
  nk_style_window_header = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    close_button: nk_style_button;
    minimize_button: nk_style_button;
    close_symbol: nk_symbol_type;
    minimize_symbol: nk_symbol_type;
    maximize_symbol: nk_symbol_type;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    align: nk_style_header_align;
    padding: nk_vec2;
    label_padding: nk_vec2;
    spacing: nk_vec2;
  end;

  { nk_style_window  }
  nk_style_window = record
    header: nk_style_window_header;
    fixed_background: nk_style_item;
    background: nk_color;
    border_color: nk_color;
    popup_border_color: nk_color;
    combo_border_color: nk_color;
    contextual_border_color: nk_color;
    menu_border_color: nk_color;
    group_border_color: nk_color;
    tooltip_border_color: nk_color;
    scaler: nk_style_item;
    border: Single;
    combo_border: Single;
    contextual_border: Single;
    menu_border: Single;
    group_border: Single;
    tooltip_border: Single;
    popup_border: Single;
    min_row_height_padding: Single;
    rounding: Single;
    spacing: nk_vec2;
    scrollbar_size: nk_vec2;
    min_size: nk_vec2;
    padding: nk_vec2;
    group_padding: nk_vec2;
    popup_padding: nk_vec2;
    combo_padding: nk_vec2;
    contextual_padding: nk_vec2;
    menu_padding: nk_vec2;
    tooltip_padding: nk_vec2;
  end;

  { nk_style  }
  nk_style = record
    font: Pnk_user_font;
    cursors: array [0..6] of Pnk_cursor;
    cursor_active: Pnk_cursor;
    cursor_last: Pnk_cursor;
    cursor_visible: Integer;
    text: nk_style_text;
    button: nk_style_button;
    contextual_button: nk_style_button;
    menu_button: nk_style_button;
    option: nk_style_toggle;
    checkbox: nk_style_toggle;
    selectable: nk_style_selectable;
    slider: nk_style_slider;
    progress: nk_style_progress;
    _property: nk_style_property;
    edit: nk_style_edit;
    chart: nk_style_chart;
    scrollh: nk_style_scrollbar;
    scrollv: nk_style_scrollbar;
    tab: nk_style_tab;
    combo: nk_style_combo;
    window: nk_style_window;
  end;

  { nk_chart_slot  }
  nk_chart_slot = record
    _type: nk_chart_type;
    color: nk_color;
    highlight: nk_color;
    min: Single;
    max: Single;
    range: Single;
    count: Integer;
    last: nk_vec2;
    index: Integer;
  end;

  { nk_chart  }
  nk_chart = record
    slot: Integer;
    x: Single;
    y: Single;
    w: Single;
    h: Single;
    slots: array [0..3] of nk_chart_slot;
  end;

  { nk_row_layout  }
  nk_row_layout = record
    _type: nk_panel_row_layout_type;
    index: Integer;
    height: Single;
    min_height: Single;
    columns: Integer;
    ratio: PSingle;
    item_width: Single;
    item_height: Single;
    item_offset: Single;
    filled: Single;
    item: nk_rect;
    tree_depth: Integer;
    templates: array [0..15] of Single;
  end;

  { nk_popup_buffer  }
  nk_popup_buffer = record
    _begin: nk_size;
    parent: nk_size;
    last: nk_size;
    _end: nk_size;
    active: nk_bool;
  end;

  { nk_menu_state  }
  nk_menu_state = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
    offset: nk_scroll;
  end;

  { nk_panel  }
  nk_panel = record
    _type: nk_panel_type;
    flags: nk_flags;
    bounds: nk_rect;
    offset_x: Pnk_uint;
    offset_y: Pnk_uint;
    at_x: Single;
    at_y: Single;
    max_x: Single;
    footer_height: Single;
    header_height: Single;
    border: Single;
    has_scrolling: Cardinal;
    clip: nk_rect;
    menu: nk_menu_state;
    row: nk_row_layout;
    chart: nk_chart;
    buffer: Pnk_command_buffer;
    parent: Pnk_panel;
  end;

  { nk_popup_state  }
  nk_popup_state = record
    win: Pnk_window;
    _type: nk_panel_type;
    buf: nk_popup_buffer;
    name: nk_hash;
    active: nk_bool;
    combo_count: Cardinal;
    con_count: Cardinal;
    con_old: Cardinal;
    active_con: Cardinal;
    header: nk_rect;
  end;

  { nk_edit_state  }
  nk_edit_state = record
    name: nk_hash;
    seq: Cardinal;
    old: Cardinal;
    active: Integer;
    prev: Integer;
    cursor: Integer;
    sel_start: Integer;
    sel_end: Integer;
    scrollbar: nk_scroll;
    mode: Byte;
    single_line: Byte;
  end;

  { nk_property_state  }
  nk_property_state = record
    active: Integer;
    prev: Integer;
    buffer: array [0..63] of UTF8Char;
    length: Integer;
    cursor: Integer;
    select_start: Integer;
    select_end: Integer;
    name: nk_hash;
    seq: Cardinal;
    old: Cardinal;
    state: Integer;
  end;

  { nk_window  }
  nk_window = record
    seq: Cardinal;
    name: nk_hash;
    name_string: array [0..63] of UTF8Char;
    flags: nk_flags;
    bounds: nk_rect;
    scrollbar: nk_scroll;
    buffer: nk_command_buffer;
    layout: Pnk_panel;
    scrollbar_hiding_timer: Single;
    _property: nk_property_state;
    popup: nk_popup_state;
    edit: nk_edit_state;
    scrolled: Cardinal;
    tables: Pnk_table;
    table_count: Cardinal;
    next: Pnk_window;
    prev: Pnk_window;
    parent: Pnk_window;
  end;

  { nk_config_stack_style_item_element  }
  nk_config_stack_style_item_element = record
    address: Pnk_style_item;
    old_value: nk_style_item;
  end;

  { nk_config_stack_float_element  }
  nk_config_stack_float_element = record
    address: PSingle;
    old_value: Single;
  end;

  { nk_config_stack_vec2_element  }
  nk_config_stack_vec2_element = record
    address: Pnk_vec2;
    old_value: nk_vec2;
  end;

  { nk_config_stack_flags_element  }
  nk_config_stack_flags_element = record
    address: Pnk_flags;
    old_value: nk_flags;
  end;

  { nk_config_stack_color_element  }
  nk_config_stack_color_element = record
    address: Pnk_color;
    old_value: nk_color;
  end;

  { nk_config_stack_user_font_element  }
  nk_config_stack_user_font_element = record
    address: PPnk_user_font;
    old_value: Pnk_user_font;
  end;

  { nk_config_stack_button_behavior_element  }
  nk_config_stack_button_behavior_element = record
    address: Pnk_button_behavior;
    old_value: nk_button_behavior;
  end;

  { nk_config_stack_style_item  }
  nk_config_stack_style_item = record
    head: Integer;
    elements: array [0..15] of nk_config_stack_style_item_element;
  end;

  { nk_config_stack_float  }
  nk_config_stack_float = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_float_element;
  end;

  { nk_config_stack_vec2  }
  nk_config_stack_vec2 = record
    head: Integer;
    elements: array [0..15] of nk_config_stack_vec2_element;
  end;

  { nk_config_stack_flags  }
  nk_config_stack_flags = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_flags_element;
  end;

  { nk_config_stack_color  }
  nk_config_stack_color = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_color_element;
  end;

  { nk_config_stack_user_font  }
  nk_config_stack_user_font = record
    head: Integer;
    elements: array [0..7] of nk_config_stack_user_font_element;
  end;

  { nk_config_stack_button_behavior  }
  nk_config_stack_button_behavior = record
    head: Integer;
    elements: array [0..7] of nk_config_stack_button_behavior_element;
  end;

  { nk_configuration_stacks  }
  nk_configuration_stacks = record
    style_items: nk_config_stack_style_item;
    floats: nk_config_stack_float;
    vectors: nk_config_stack_vec2;
    flags: nk_config_stack_flags;
    colors: nk_config_stack_color;
    fonts: nk_config_stack_user_font;
    button_behaviors: nk_config_stack_button_behavior;
  end;

  { nk_table  }
  nk_table = record
    seq: Cardinal;
    size: Cardinal;
    keys: array [0..58] of nk_hash;
    values: array [0..58] of nk_uint;
    next: Pnk_table;
    prev: Pnk_table;
  end;

  { nk_page_data  }
  nk_page_data = record
    case Integer of
      0: (tbl: nk_table);
      1: (pan: nk_panel);
      2: (win: nk_window);
  end;

  { nk_page_element  }
  nk_page_element = record
    data: nk_page_data;
    next: Pnk_page_element;
    prev: Pnk_page_element;
  end;

  { nk_page  }
  nk_page = record
    size: Cardinal;
    next: Pnk_page;
    win: array [0..0] of nk_page_element;
  end;

  { nk_pool  }
  nk_pool = record
    alloc: nk_allocator;
    _type: nk_allocation_type;
    page_count: Cardinal;
    pages: Pnk_page;
    freelist: Pnk_page_element;
    capacity: Cardinal;
    size: nk_size;
    cap: nk_size;
  end;

  { nk_context  }
  nk_context = record
    input: nk_input;
    style: nk_style;
    memory: nk_buffer;
    clip: nk_clipboard;
    last_widget_state: nk_flags;
    button_behavior: nk_button_behavior;
    stacks: nk_configuration_stacks;
    delta_time_seconds: Single;
    text_edit: nk_text_edit;
    overlay: nk_command_buffer;
    build: Integer;
    use_pool: Integer;
    pool: nk_pool;
    _begin: Pnk_window;
    _end: Pnk_window;
    active: Pnk_window;
    current: Pnk_window;
    freelist: Pnk_page_element;
    count: Cardinal;
    seq: Cardinal;
  end;

  { PHYSFS_uint8  }
  PHYSFS_uint8 = Byte;

  { PHYSFS_sint8  }
  PHYSFS_sint8 = UTF8Char;

  { PHYSFS_uint16  }
  PHYSFS_uint16 = Word;

  { PPHYSFS_uint16  }
  PPHYSFS_uint16 = ^PHYSFS_uint16;

  { PHYSFS_sint16  }
  PHYSFS_sint16 = Smallint;

  { PPHYSFS_sint16  }
  PPHYSFS_sint16 = ^PHYSFS_sint16;

  { PHYSFS_uint32  }
  PHYSFS_uint32 = Cardinal;

  { PPHYSFS_uint32  }
  PPHYSFS_uint32 = ^PHYSFS_uint32;

  { PHYSFS_sint32  }
  PHYSFS_sint32 = Integer;

  { PPHYSFS_sint32  }
  PPHYSFS_sint32 = ^PHYSFS_sint32;

  { PHYSFS_sint64  }
  PHYSFS_sint64 = Int64;

  { PPHYSFS_sint64  }
  PPHYSFS_sint64 = ^PHYSFS_sint64;

  { PHYSFS_uint64  }
  PHYSFS_uint64 = UInt64;

  { PPHYSFS_uint64  }
  PPHYSFS_uint64 = ^PHYSFS_uint64;

  { PHYSFS_compile_time_assert_uint8IsOneByte  }
  PHYSFS_compile_time_assert_uint8IsOneByte = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint8IsOneByte  }
  PHYSFS_compile_time_assert_sint8IsOneByte = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint16IsTwoBytes  }
  PHYSFS_compile_time_assert_uint16IsTwoBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint16IsTwoBytes  }
  PHYSFS_compile_time_assert_sint16IsTwoBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint32IsFourBytes  }
  PHYSFS_compile_time_assert_uint32IsFourBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint32IsFourBytes  }
  PHYSFS_compile_time_assert_sint32IsFourBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint64IsEightBytes  }
  PHYSFS_compile_time_assert_uint64IsEightBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint64IsEightBytes  }
  PHYSFS_compile_time_assert_sint64IsEightBytes = array [0..0] of Integer;

  { PHYSFS_File  }
  PHYSFS_File = record
    opaque: Pointer;
  end;

  { PHYSFS_ArchiveInfo  }
  PHYSFS_ArchiveInfo = record
    extension: PUTF8Char;
    description: PUTF8Char;
    author: PUTF8Char;
    url: PUTF8Char;
    supportsSymlinks: Integer;
  end;

  { PHYSFS_Version  }
  PHYSFS_Version = record
    major: PHYSFS_uint8;
    minor: PHYSFS_uint8;
    patch: PHYSFS_uint8;
  end;

  { PHYSFS_Allocator  }
  PHYSFS_Allocator = record
    Init: function(): Integer; cdecl;
    Deinit: procedure(); cdecl;
    Malloc: function(p1: PHYSFS_uint64): Pointer; cdecl;
    Realloc: function(p1: Pointer; p2: PHYSFS_uint64): Pointer; cdecl;
    Free: procedure(p1: Pointer); cdecl;
  end;

  { PHYSFS_StringCallback  }
  PHYSFS_StringCallback = procedure(data: Pointer; const str: PUTF8Char); cdecl;

  { PHYSFS_EnumFilesCallback  }
  PHYSFS_EnumFilesCallback = procedure(data: Pointer; const origdir: PUTF8Char; const fname: PUTF8Char); cdecl;

  { PHYSFS_EnumerateCallback  }
  PHYSFS_EnumerateCallback = function(data: Pointer; const origdir: PUTF8Char; const fname: PUTF8Char): PHYSFS_EnumerateCallbackResult; cdecl;

  { PHYSFS_Stat_  }
  PHYSFS_Stat_ = record
    filesize: PHYSFS_sint64;
    modtime: PHYSFS_sint64;
    createtime: PHYSFS_sint64;
    accesstime: PHYSFS_sint64;
    filetype: PHYSFS_FileType;
    readonly: Integer;
  end;

  { PHYSFS_Io  }
  PHYSFS_Io = record
    version: PHYSFS_uint32;
    opaque: Pointer;
    read: function(io: PPHYSFS_Io; buf: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
    write: function(io: PPHYSFS_Io; const buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
    seek: function(io: PPHYSFS_Io; offset: PHYSFS_uint64): Integer; cdecl;
    tell: function(io: PPHYSFS_Io): PHYSFS_sint64; cdecl;
    length: function(io: PPHYSFS_Io): PHYSFS_sint64; cdecl;
    duplicate: function(io: PPHYSFS_Io): PPHYSFS_Io; cdecl;
    flush: function(io: PPHYSFS_Io): Integer; cdecl;
    destroy: procedure(io: PPHYSFS_Io); cdecl;
  end;

  { PHYSFS_Archiver  }
  PHYSFS_Archiver = record
    version: PHYSFS_uint32;
    info: PHYSFS_ArchiveInfo;
    openArchive: function(io: PPHYSFS_Io; const name: PUTF8Char; forWrite: Integer; claimed: PInteger): Pointer; cdecl;
    enumerate: function(opaque: Pointer; const dirname: PUTF8Char; cb: PHYSFS_EnumerateCallback; const origdir: PUTF8Char; callbackdata: Pointer): PHYSFS_EnumerateCallbackResult; cdecl;
    openRead: function(opaque: Pointer; const fnm: PUTF8Char): PPHYSFS_Io; cdecl;
    openWrite: function(opaque: Pointer; const filename: PUTF8Char): PPHYSFS_Io; cdecl;
    openAppend: function(opaque: Pointer; const filename: PUTF8Char): PPHYSFS_Io; cdecl;
    remove: function(opaque: Pointer; const filename: PUTF8Char): Integer; cdecl;
    mkdir: function(opaque: Pointer; const filename: PUTF8Char): Integer; cdecl;
    stat: function(opaque: Pointer; const fn: PUTF8Char; stat: PPHYSFS_Stat_): Integer; cdecl;
    closeArchive: procedure(opaque: Pointer); cdecl;
  end;

  { Pplm_t  }
  Pplm_t = Pointer;

  { PPplm_t  }
  PPplm_t = ^Pplm_t;

  { Pplm_buffer_t  }
  Pplm_buffer_t = Pointer;

  { PPplm_buffer_t  }
  PPplm_buffer_t = ^Pplm_buffer_t;

  { Pplm_demux_t  }
  Pplm_demux_t = Pointer;

  { PPplm_demux_t  }
  PPplm_demux_t = ^Pplm_demux_t;

  { Pplm_video_t  }
  Pplm_video_t = Pointer;

  { PPplm_video_t  }
  PPplm_video_t = ^Pplm_video_t;

  { Pplm_audio_t  }
  Pplm_audio_t = Pointer;

  { PPplm_audio_t  }
  PPplm_audio_t = ^Pplm_audio_t;

  { plm_packet_t  }
  plm_packet_t = record
    _type: Integer;
    pts: Double;
    length: NativeUInt;
    data: PUInt8;
  end;

  { plm_plane_t  }
  plm_plane_t = record
    width: Cardinal;
    height: Cardinal;
    data: PUInt8;
  end;

  { plm_frame_t  }
  plm_frame_t = record
    time: Double;
    width: Cardinal;
    height: Cardinal;
    y: plm_plane_t;
    cr: plm_plane_t;
    cb: plm_plane_t;
  end;

  { plm_video_decode_callback  }
  plm_video_decode_callback = procedure(self: Pplm_t; frame: Pplm_frame_t; user: Pointer); cdecl;

  { plm_samples_t  }
  plm_samples_t = record
    time: Double;
    count: Cardinal;
    interleaved: array [0..2303] of Single;
  end;

  { plm_audio_decode_callback  }
  plm_audio_decode_callback = procedure(self: Pplm_t; samples: Pplm_samples_t; user: Pointer); cdecl;

  { plm_buffer_load_callback  }
  plm_buffer_load_callback = procedure(self: Pplm_buffer_t; user: Pointer); cdecl;

  { stbi_uc  }
  stbi_uc = Byte;

  { Pstbi_uc  }
  Pstbi_uc = ^stbi_uc;

  { stbi_us  }
  stbi_us = Word;

  { Pstbi_us  }
  Pstbi_us = ^stbi_us;

  { stbi_io_callbacks  }
  stbi_io_callbacks = record
    read: function(user: Pointer; data: PUTF8Char; size: Integer): Integer; cdecl;
    skip: procedure(user: Pointer; n: Integer); cdecl;
    eof: function(user: Pointer): Integer; cdecl;
  end;

  { Pstbi_write_func  }
  Pstbi_write_func = procedure(context: Pointer; data: Pointer; size: Integer); cdecl;

  { stbtt__buf  }
  stbtt__buf = record
    data: PByte;
    cursor: Integer;
    size: Integer;
  end;

  { stbtt_bakedchar  }
  stbtt_bakedchar = record
    x0: Word;
    y0: Word;
    x1: Word;
    y1: Word;
    xoff: Single;
    yoff: Single;
    xadvance: Single;
  end;

  { stbtt_aligned_quad  }
  stbtt_aligned_quad = record
    x0: Single;
    y0: Single;
    s0: Single;
    t0: Single;
    x1: Single;
    y1: Single;
    s1: Single;
    t1: Single;
  end;

  { stbtt_packedchar  }
  stbtt_packedchar = record
    x0: Word;
    y0: Word;
    x1: Word;
    y1: Word;
    xoff: Single;
    yoff: Single;
    xadvance: Single;
    xoff2: Single;
    yoff2: Single;
  end;

  { Pstbrp_rect  }
  Pstbrp_rect = Pointer;

  { PPstbrp_rect  }
  PPstbrp_rect = ^Pstbrp_rect;

  { stbtt_pack_range  }
  stbtt_pack_range = record
    font_size: Single;
    first_unicode_codepoint_in_range: Integer;
    array_of_unicode_codepoints: PInteger;
    num_chars: Integer;
    chardata_for_range: Pstbtt_packedchar;
    h_oversample: Byte;
    v_oversample: Byte;
  end;

  { stbtt_pack_context  }
  stbtt_pack_context = record
    user_allocator_context: Pointer;
    pack_info: Pointer;
    width: Integer;
    height: Integer;
    stride_in_bytes: Integer;
    padding: Integer;
    skip_missing: Integer;
    h_oversample: Cardinal;
    v_oversample: Cardinal;
    pixels: PByte;
    nodes: Pointer;
  end;

  { stbtt_fontinfo  }
  stbtt_fontinfo = record
    userdata: Pointer;
    data: PByte;
    fontstart: Integer;
    numGlyphs: Integer;
    loca: Integer;
    head: Integer;
    glyf: Integer;
    hhea: Integer;
    hmtx: Integer;
    kern: Integer;
    gpos: Integer;
    svg: Integer;
    index_map: Integer;
    indexToLocFormat: Integer;
    cff: stbtt__buf;
    charstrings: stbtt__buf;
    gsubrs: stbtt__buf;
    subrs: stbtt__buf;
    fontdicts: stbtt__buf;
    fdselect: stbtt__buf;
  end;

  { stbtt_kerningentry  }
  stbtt_kerningentry = record
    glyph1: Integer;
    glyph2: Integer;
    advance: Integer;
  end;

  { stbtt_vertex  }
  stbtt_vertex = record
    x: Smallint;
    y: Smallint;
    cx: Smallint;
    cy: Smallint;
    cx1: Smallint;
    cy1: Smallint;
    _type: Byte;
    padding: Byte;
  end;

  { stbtt__bitmap  }
  stbtt__bitmap = record
    w: Integer;
    h: Integer;
    stride: Integer;
    pixels: PByte;
  end;

  { ENetSocket  }
  ENetSocket = TSocket;

  { ENetBuffer  }
  ENetBuffer = record
    dataLength: NativeUInt;
    data: Pointer;
  end;

  { ENetSocketSet  }
  ENetSocketSet = fd_set;

  { PENetSocketSet  }
  PENetSocketSet = ^ENetSocketSet;

  { enet_uint8  }
  enet_uint8 = Byte;

  { Penet_uint8  }
  Penet_uint8 = ^enet_uint8;

  { enet_uint16  }
  enet_uint16 = Word;

  { enet_uint32  }
  enet_uint32 = Cardinal;

  { Penet_uint32  }
  Penet_uint32 = ^enet_uint32;

  { ENetProtocolCommand  }
  ENetProtocolCommand = _ENetProtocolCommand;

  { ENetProtocolFlag  }
  ENetProtocolFlag = _ENetProtocolFlag;

  { _ENetProtocolHeader  }
  _ENetProtocolHeader = record
    peerID: enet_uint16;
    sentTime: enet_uint16;
  end;

  { ENetProtocolHeader  }
  ENetProtocolHeader = _ENetProtocolHeader;

  { _ENetProtocolCommandHeader  }
  _ENetProtocolCommandHeader = record
    command: enet_uint8;
    channelID: enet_uint8;
    reliableSequenceNumber: enet_uint16;
  end;

  { ENetProtocolCommandHeader  }
  ENetProtocolCommandHeader = _ENetProtocolCommandHeader;

  { _ENetProtocolAcknowledge  }
  _ENetProtocolAcknowledge = record
    header: ENetProtocolCommandHeader;
    receivedReliableSequenceNumber: enet_uint16;
    receivedSentTime: enet_uint16;
  end;

  { ENetProtocolAcknowledge  }
  ENetProtocolAcknowledge = _ENetProtocolAcknowledge;

  { _ENetProtocolConnect  }
  _ENetProtocolConnect = record
    header: ENetProtocolCommandHeader;
    outgoingPeerID: enet_uint16;
    incomingSessionID: enet_uint8;
    outgoingSessionID: enet_uint8;
    mtu: enet_uint32;
    windowSize: enet_uint32;
    channelCount: enet_uint32;
    incomingBandwidth: enet_uint32;
    outgoingBandwidth: enet_uint32;
    packetThrottleInterval: enet_uint32;
    packetThrottleAcceleration: enet_uint32;
    packetThrottleDeceleration: enet_uint32;
    connectID: enet_uint32;
    data: enet_uint32;
  end;

  { ENetProtocolConnect  }
  ENetProtocolConnect = _ENetProtocolConnect;

  { _ENetProtocolVerifyConnect  }
  _ENetProtocolVerifyConnect = record
    header: ENetProtocolCommandHeader;
    outgoingPeerID: enet_uint16;
    incomingSessionID: enet_uint8;
    outgoingSessionID: enet_uint8;
    mtu: enet_uint32;
    windowSize: enet_uint32;
    channelCount: enet_uint32;
    incomingBandwidth: enet_uint32;
    outgoingBandwidth: enet_uint32;
    packetThrottleInterval: enet_uint32;
    packetThrottleAcceleration: enet_uint32;
    packetThrottleDeceleration: enet_uint32;
    connectID: enet_uint32;
  end;

  { ENetProtocolVerifyConnect  }
  ENetProtocolVerifyConnect = _ENetProtocolVerifyConnect;

  { _ENetProtocolBandwidthLimit  }
  _ENetProtocolBandwidthLimit = record
    header: ENetProtocolCommandHeader;
    incomingBandwidth: enet_uint32;
    outgoingBandwidth: enet_uint32;
  end;

  { ENetProtocolBandwidthLimit  }
  ENetProtocolBandwidthLimit = _ENetProtocolBandwidthLimit;

  { _ENetProtocolThrottleConfigure  }
  _ENetProtocolThrottleConfigure = record
    header: ENetProtocolCommandHeader;
    packetThrottleInterval: enet_uint32;
    packetThrottleAcceleration: enet_uint32;
    packetThrottleDeceleration: enet_uint32;
  end;

  { ENetProtocolThrottleConfigure  }
  ENetProtocolThrottleConfigure = _ENetProtocolThrottleConfigure;

  { _ENetProtocolDisconnect  }
  _ENetProtocolDisconnect = record
    header: ENetProtocolCommandHeader;
    data: enet_uint32;
  end;

  { ENetProtocolDisconnect  }
  ENetProtocolDisconnect = _ENetProtocolDisconnect;

  { _ENetProtocolPing  }
  _ENetProtocolPing = record
    header: ENetProtocolCommandHeader;
  end;

  { ENetProtocolPing  }
  ENetProtocolPing = _ENetProtocolPing;

  { _ENetProtocolSendReliable  }
  _ENetProtocolSendReliable = record
    header: ENetProtocolCommandHeader;
    dataLength: enet_uint16;
  end;

  { ENetProtocolSendReliable  }
  ENetProtocolSendReliable = _ENetProtocolSendReliable;

  { _ENetProtocolSendUnreliable  }
  _ENetProtocolSendUnreliable = record
    header: ENetProtocolCommandHeader;
    unreliableSequenceNumber: enet_uint16;
    dataLength: enet_uint16;
  end;

  { ENetProtocolSendUnreliable  }
  ENetProtocolSendUnreliable = _ENetProtocolSendUnreliable;

  { _ENetProtocolSendUnsequenced  }
  _ENetProtocolSendUnsequenced = record
    header: ENetProtocolCommandHeader;
    unsequencedGroup: enet_uint16;
    dataLength: enet_uint16;
  end;

  { ENetProtocolSendUnsequenced  }
  ENetProtocolSendUnsequenced = _ENetProtocolSendUnsequenced;

  { _ENetProtocolSendFragment  }
  _ENetProtocolSendFragment = record
    header: ENetProtocolCommandHeader;
    startSequenceNumber: enet_uint16;
    dataLength: enet_uint16;
    fragmentCount: enet_uint32;
    fragmentNumber: enet_uint32;
    totalLength: enet_uint32;
    fragmentOffset: enet_uint32;
  end;

  { ENetProtocolSendFragment  }
  ENetProtocolSendFragment = _ENetProtocolSendFragment;

  { _ENetProtocol  }
  _ENetProtocol = record
    case Integer of
      0: (header: ENetProtocolCommandHeader);
      1: (acknowledge: ENetProtocolAcknowledge);
      2: (connect: ENetProtocolConnect);
      3: (verifyConnect: ENetProtocolVerifyConnect);
      4: (disconnect: ENetProtocolDisconnect);
      5: (ping: ENetProtocolPing);
      6: (sendReliable: ENetProtocolSendReliable);
      7: (sendUnreliable: ENetProtocolSendUnreliable);
      8: (sendUnsequenced: ENetProtocolSendUnsequenced);
      9: (sendFragment: ENetProtocolSendFragment);
      10: (bandwidthLimit: ENetProtocolBandwidthLimit);
      11: (throttleConfigure: ENetProtocolThrottleConfigure);
  end;

  { ENetProtocol  }
  ENetProtocol = _ENetProtocol;

  { PENetProtocol  }
  PENetProtocol = ^ENetProtocol;

  { _ENetListNode  }
  _ENetListNode = record
    next: P_ENetListNode;
    previous: P_ENetListNode;
  end;

  { ENetListNode  }
  ENetListNode = _ENetListNode;

  { PENetListNode  }
  PENetListNode = ^ENetListNode;

  { ENetListIterator  }
  ENetListIterator = PENetListNode;

  { _ENetList  }
  _ENetList = record
    sentinel: ENetListNode;
  end;

  { ENetList  }
  ENetList = _ENetList;

  { PENetList  }
  PENetList = ^ENetList;

  { _ENetCallbacks  }
  _ENetCallbacks = record
    malloc: function(size: NativeUInt): Pointer; cdecl;
    free: procedure(memory: Pointer); cdecl;
    no_memory: procedure(); cdecl;
  end;

  { ENetCallbacks  }
  ENetCallbacks = _ENetCallbacks;

  { PENetCallbacks  }
  PENetCallbacks = ^ENetCallbacks;

  { ENetVersion  }
  ENetVersion = enet_uint32;

  { ENetSocketType  }
  ENetSocketType = _ENetSocketType;

  { ENetSocketWait  }
  ENetSocketWait = _ENetSocketWait;

  { ENetSocketOption  }
  ENetSocketOption = _ENetSocketOption;

  { ENetSocketShutdown  }
  ENetSocketShutdown = _ENetSocketShutdown;

  { _ENetAddress  }
  _ENetAddress = record
    host: enet_uint32;
    port: enet_uint16;
  end;

  { ENetAddress  }
  ENetAddress = _ENetAddress;

  { PENetAddress  }
  PENetAddress = ^ENetAddress;

  { ENetPacketFlag  }
  ENetPacketFlag = _ENetPacketFlag;

  { ENetPacketFreeCallback  }
  ENetPacketFreeCallback = procedure(p1: P_ENetPacket); cdecl;

  { _ENetPacket  }
  _ENetPacket = record
    referenceCount: NativeUInt;
    flags: enet_uint32;
    data: Penet_uint8;
    dataLength: NativeUInt;
    freeCallback: ENetPacketFreeCallback;
    userData: Pointer;
  end;

  { ENetPacket  }
  ENetPacket = _ENetPacket;

  { PENetPacket  }
  PENetPacket = ^ENetPacket;

  { _ENetAcknowledgement  }
  _ENetAcknowledgement = record
    acknowledgementList: ENetListNode;
    sentTime: enet_uint32;
    command: ENetProtocol;
  end;

  { ENetAcknowledgement  }
  ENetAcknowledgement = _ENetAcknowledgement;

  { PENetAcknowledgement  }
  PENetAcknowledgement = ^ENetAcknowledgement;

  { _ENetOutgoingCommand  }
  _ENetOutgoingCommand = record
    outgoingCommandList: ENetListNode;
    reliableSequenceNumber: enet_uint16;
    unreliableSequenceNumber: enet_uint16;
    sentTime: enet_uint32;
    roundTripTimeout: enet_uint32;
    roundTripTimeoutLimit: enet_uint32;
    fragmentOffset: enet_uint32;
    fragmentLength: enet_uint16;
    sendAttempts: enet_uint16;
    command: ENetProtocol;
    packet: PENetPacket;
  end;

  { ENetOutgoingCommand  }
  ENetOutgoingCommand = _ENetOutgoingCommand;

  { PENetOutgoingCommand  }
  PENetOutgoingCommand = ^ENetOutgoingCommand;

  { _ENetIncomingCommand  }
  _ENetIncomingCommand = record
    incomingCommandList: ENetListNode;
    reliableSequenceNumber: enet_uint16;
    unreliableSequenceNumber: enet_uint16;
    command: ENetProtocol;
    fragmentCount: enet_uint32;
    fragmentsRemaining: enet_uint32;
    fragments: Penet_uint32;
    packet: PENetPacket;
  end;

  { ENetIncomingCommand  }
  ENetIncomingCommand = _ENetIncomingCommand;

  { PENetIncomingCommand  }
  PENetIncomingCommand = ^ENetIncomingCommand;

  { ENetPeerState  }
  ENetPeerState = _ENetPeerState;

  { _ENetChannel  }
  _ENetChannel = record
    outgoingReliableSequenceNumber: enet_uint16;
    outgoingUnreliableSequenceNumber: enet_uint16;
    usedReliableWindows: enet_uint16;
    reliableWindows: array [0..15] of enet_uint16;
    incomingReliableSequenceNumber: enet_uint16;
    incomingUnreliableSequenceNumber: enet_uint16;
    incomingReliableCommands: ENetList;
    incomingUnreliableCommands: ENetList;
  end;

  { ENetChannel  }
  ENetChannel = _ENetChannel;

  { PENetChannel  }
  PENetChannel = ^ENetChannel;

  { ENetPeerFlag  }
  ENetPeerFlag = _ENetPeerFlag;

  { _ENetPeer  }
  _ENetPeer = record
    dispatchList: ENetListNode;
    host: P_ENetHost;
    outgoingPeerID: enet_uint16;
    incomingPeerID: enet_uint16;
    connectID: enet_uint32;
    outgoingSessionID: enet_uint8;
    incomingSessionID: enet_uint8;
    address: ENetAddress;
    data: Pointer;
    state: ENetPeerState;
    channels: PENetChannel;
    channelCount: NativeUInt;
    incomingBandwidth: enet_uint32;
    outgoingBandwidth: enet_uint32;
    incomingBandwidthThrottleEpoch: enet_uint32;
    outgoingBandwidthThrottleEpoch: enet_uint32;
    incomingDataTotal: enet_uint32;
    outgoingDataTotal: enet_uint32;
    lastSendTime: enet_uint32;
    lastReceiveTime: enet_uint32;
    nextTimeout: enet_uint32;
    earliestTimeout: enet_uint32;
    packetLossEpoch: enet_uint32;
    packetsSent: enet_uint32;
    packetsLost: enet_uint32;
    packetLoss: enet_uint32;
    packetLossVariance: enet_uint32;
    packetThrottle: enet_uint32;
    packetThrottleLimit: enet_uint32;
    packetThrottleCounter: enet_uint32;
    packetThrottleEpoch: enet_uint32;
    packetThrottleAcceleration: enet_uint32;
    packetThrottleDeceleration: enet_uint32;
    packetThrottleInterval: enet_uint32;
    pingInterval: enet_uint32;
    timeoutLimit: enet_uint32;
    timeoutMinimum: enet_uint32;
    timeoutMaximum: enet_uint32;
    lastRoundTripTime: enet_uint32;
    lowestRoundTripTime: enet_uint32;
    lastRoundTripTimeVariance: enet_uint32;
    highestRoundTripTimeVariance: enet_uint32;
    roundTripTime: enet_uint32;
    roundTripTimeVariance: enet_uint32;
    mtu: enet_uint32;
    windowSize: enet_uint32;
    reliableDataInTransit: enet_uint32;
    outgoingReliableSequenceNumber: enet_uint16;
    acknowledgements: ENetList;
    sentReliableCommands: ENetList;
    sentUnreliableCommands: ENetList;
    outgoingCommands: ENetList;
    dispatchedCommands: ENetList;
    flags: enet_uint16;
    reserved: enet_uint16;
    incomingUnsequencedGroup: enet_uint16;
    outgoingUnsequencedGroup: enet_uint16;
    unsequencedWindow: array [0..31] of enet_uint32;
    eventData: enet_uint32;
    totalWaitingData: NativeUInt;
  end;

  { ENetPeer  }
  ENetPeer = _ENetPeer;

  { PENetPeer  }
  PENetPeer = ^ENetPeer;

  { _ENetCompressor  }
  _ENetCompressor = record
    context: Pointer;
    compress: function(context: Pointer; const inBuffers: PENetBuffer; inBufferCount: NativeUInt; inLimit: NativeUInt; outData: Penet_uint8; outLimit: NativeUInt): NativeUInt; cdecl;
    decompress: function(context: Pointer; const inData: Penet_uint8; inLimit: NativeUInt; outData: Penet_uint8; outLimit: NativeUInt): NativeUInt; cdecl;
    destroy: procedure(context: Pointer); cdecl;
  end;

  { ENetCompressor  }
  ENetCompressor = _ENetCompressor;

  { PENetCompressor  }
  PENetCompressor = ^ENetCompressor;

  { ENetChecksumCallback  }
  ENetChecksumCallback = function(const buffers: PENetBuffer; bufferCount: NativeUInt): enet_uint32; cdecl;

  { ENetInterceptCallback  }
  ENetInterceptCallback = function(host: P_ENetHost; event: P_ENetEvent): Integer; cdecl;

  { _ENetHost  }
  _ENetHost = record
    socket: ENetSocket;
    address: ENetAddress;
    incomingBandwidth: enet_uint32;
    outgoingBandwidth: enet_uint32;
    bandwidthThrottleEpoch: enet_uint32;
    mtu: enet_uint32;
    randomSeed: enet_uint32;
    recalculateBandwidthLimits: Integer;
    peers: PENetPeer;
    peerCount: NativeUInt;
    channelLimit: NativeUInt;
    serviceTime: enet_uint32;
    dispatchQueue: ENetList;
    continueSending: Integer;
    packetSize: NativeUInt;
    headerFlags: enet_uint16;
    commands: array [0..31] of ENetProtocol;
    commandCount: NativeUInt;
    buffers: array [0..64] of ENetBuffer;
    bufferCount: NativeUInt;
    checksum: ENetChecksumCallback;
    compressor: ENetCompressor;
    packetData: array [0..1] of array [0..4095] of enet_uint8;
    receivedAddress: ENetAddress;
    receivedData: Penet_uint8;
    receivedDataLength: NativeUInt;
    totalSentData: enet_uint32;
    totalSentPackets: enet_uint32;
    totalReceivedData: enet_uint32;
    totalReceivedPackets: enet_uint32;
    intercept: ENetInterceptCallback;
    connectedPeers: NativeUInt;
    bandwidthLimitedPeers: NativeUInt;
    duplicatePeers: NativeUInt;
    maximumPacketSize: NativeUInt;
    maximumWaitingData: NativeUInt;
  end;

  { ENetHost  }
  ENetHost = _ENetHost;

  { PENetHost  }
  PENetHost = ^ENetHost;

  { ENetEventType  }
  ENetEventType = _ENetEventType;

  { _ENetEvent  }
  _ENetEvent = record
    _type: ENetEventType;
    peer: PENetPeer;
    channelID: enet_uint8;
    data: enet_uint32;
    packet: PENetPacket;
  end;

  { ENetEvent  }
  ENetEvent = _ENetEvent;

  { PENetEvent  }
  PENetEvent = ^ENetEvent;

  { uInt  }
  uInt = Cardinal;

  { uLong  }
  uLong = Cardinal;

  { zipFile  }
  zipFile = Pointer;

  { tm_zip_s  }
  tm_zip_s = record
    tm_sec: uInt;
    tm_min: uInt;
    tm_hour: uInt;
    tm_mday: uInt;
    tm_mon: uInt;
    tm_year: uInt;
  end;

  { tm_zip  }
  tm_zip = tm_zip_s;

  { zip_fileinfo  }
  zip_fileinfo = record
    tmz_date: tm_zip;
    dosDate: uLong;
    internal_fa: uLong;
    external_fa: uLong;
  end;

  { zipcharpc  }
  zipcharpc = PUTF8Char;

  { nk_plot_function_value_getter  }
  nk_plot_function_value_getter = function(user: Pointer; index: Integer): Single; cdecl;

  { nk_combo_callback_item_getter  }
  nk_combo_callback_item_getter = procedure(p1: Pointer; p2: Integer; p3: PPUTF8Char); cdecl;

  { nk_combobox_callback_item_getter  }
  nk_combobox_callback_item_getter = procedure(p1: Pointer; p2: Integer; p3: PPUTF8Char); cdecl;

  { PHYSFS_mountMemory_del  }
  PHYSFS_mountMemory_del = procedure(p1: Pointer); cdecl;

{$REGION 'DLL Export Variables'}
var
  enet_address_get_host: function(const address: PENetAddress; hostName: PUTF8Char; nameLength: NativeUInt): Integer; cdecl;
  enet_address_get_host_ip: function(const address: PENetAddress; hostName: PUTF8Char; nameLength: NativeUInt): Integer; cdecl;
  enet_address_set_host: function(address: PENetAddress; const hostName: PUTF8Char): Integer; cdecl;
  enet_address_set_host_ip: function(address: PENetAddress; const hostName: PUTF8Char): Integer; cdecl;
  enet_crc32: function(const p1: PENetBuffer; p2: NativeUInt): enet_uint32; cdecl;
  enet_deinitialize: procedure(); cdecl;
  enet_free: procedure(p1: Pointer); cdecl;
  enet_host_bandwidth_limit: procedure(p1: PENetHost; p2: enet_uint32; p3: enet_uint32); cdecl;
  enet_host_bandwidth_throttle: procedure(p1: PENetHost); cdecl;
  enet_host_broadcast: procedure(p1: PENetHost; p2: enet_uint8; p3: PENetPacket); cdecl;
  enet_host_channel_limit: procedure(p1: PENetHost; p2: NativeUInt); cdecl;
  enet_host_check_events: function(p1: PENetHost; p2: PENetEvent): Integer; cdecl;
  enet_host_compress: procedure(p1: PENetHost; const p2: PENetCompressor); cdecl;
  enet_host_compress_with_range_coder: function(host: PENetHost): Integer; cdecl;
  enet_host_connect: function(p1: PENetHost; const p2: PENetAddress; p3: NativeUInt; p4: enet_uint32): PENetPeer; cdecl;
  enet_host_create: function(const p1: PENetAddress; p2: NativeUInt; p3: NativeUInt; p4: enet_uint32; p5: enet_uint32): PENetHost; cdecl;
  enet_host_destroy: procedure(p1: PENetHost); cdecl;
  enet_host_flush: procedure(p1: PENetHost); cdecl;
  enet_host_random: function(p1: PENetHost): enet_uint32; cdecl;
  enet_host_random_seed: function(): enet_uint32; cdecl;
  enet_host_service: function(p1: PENetHost; p2: PENetEvent; p3: enet_uint32): Integer; cdecl;
  enet_initialize: function(): Integer; cdecl;
  enet_initialize_with_callbacks: function(version: ENetVersion; const inits: PENetCallbacks): Integer; cdecl;
  enet_linked_version: function(): ENetVersion; cdecl;
  enet_list_clear: procedure(p1: PENetList); cdecl;
  enet_list_insert: function(p1: ENetListIterator; p2: Pointer): ENetListIterator; cdecl;
  enet_list_move: function(p1: ENetListIterator; p2: Pointer; p3: Pointer): ENetListIterator; cdecl;
  enet_list_remove: function(p1: ENetListIterator): Pointer; cdecl;
  enet_list_size: function(p1: PENetList): NativeUInt; cdecl;
  enet_malloc: function(p1: NativeUInt): Pointer; cdecl;
  enet_packet_create: function(const p1: Pointer; p2: NativeUInt; p3: enet_uint32): PENetPacket; cdecl;
  enet_packet_destroy: procedure(p1: PENetPacket); cdecl;
  enet_packet_resize: function(p1: PENetPacket; p2: NativeUInt): Integer; cdecl;
  enet_peer_disconnect: procedure(p1: PENetPeer; p2: enet_uint32); cdecl;
  enet_peer_disconnect_later: procedure(p1: PENetPeer; p2: enet_uint32); cdecl;
  enet_peer_disconnect_now: procedure(p1: PENetPeer; p2: enet_uint32); cdecl;
  enet_peer_dispatch_incoming_reliable_commands: procedure(p1: PENetPeer; p2: PENetChannel; p3: PENetIncomingCommand); cdecl;
  enet_peer_dispatch_incoming_unreliable_commands: procedure(p1: PENetPeer; p2: PENetChannel; p3: PENetIncomingCommand); cdecl;
  enet_peer_on_connect: procedure(p1: PENetPeer); cdecl;
  enet_peer_on_disconnect: procedure(p1: PENetPeer); cdecl;
  enet_peer_ping: procedure(p1: PENetPeer); cdecl;
  enet_peer_ping_interval: procedure(p1: PENetPeer; p2: enet_uint32); cdecl;
  enet_peer_queue_acknowledgement: function(p1: PENetPeer; const p2: PENetProtocol; p3: enet_uint16): PENetAcknowledgement; cdecl;
  enet_peer_queue_incoming_command: function(p1: PENetPeer; const p2: PENetProtocol; const p3: Pointer; p4: NativeUInt; p5: enet_uint32; p6: enet_uint32): PENetIncomingCommand; cdecl;
  enet_peer_queue_outgoing_command: function(p1: PENetPeer; const p2: PENetProtocol; p3: PENetPacket; p4: enet_uint32; p5: enet_uint16): PENetOutgoingCommand; cdecl;
  enet_peer_receive: function(p1: PENetPeer; channelID: Penet_uint8): PENetPacket; cdecl;
  enet_peer_reset: procedure(p1: PENetPeer); cdecl;
  enet_peer_reset_queues: procedure(p1: PENetPeer); cdecl;
  enet_peer_send: function(p1: PENetPeer; p2: enet_uint8; p3: PENetPacket): Integer; cdecl;
  enet_peer_setup_outgoing_command: procedure(p1: PENetPeer; p2: PENetOutgoingCommand); cdecl;
  enet_peer_throttle: function(p1: PENetPeer; p2: enet_uint32): Integer; cdecl;
  enet_peer_throttle_configure: procedure(p1: PENetPeer; p2: enet_uint32; p3: enet_uint32; p4: enet_uint32); cdecl;
  enet_peer_timeout: procedure(p1: PENetPeer; p2: enet_uint32; p3: enet_uint32; p4: enet_uint32); cdecl;
  enet_protocol_command_size: function(p1: enet_uint8): NativeUInt; cdecl;
  enet_range_coder_compress: function(p1: Pointer; const p2: PENetBuffer; p3: NativeUInt; p4: NativeUInt; p5: Penet_uint8; p6: NativeUInt): NativeUInt; cdecl;
  enet_range_coder_create: function(): Pointer; cdecl;
  enet_range_coder_decompress: function(p1: Pointer; const p2: Penet_uint8; p3: NativeUInt; p4: Penet_uint8; p5: NativeUInt): NativeUInt; cdecl;
  enet_range_coder_destroy: procedure(p1: Pointer); cdecl;
  enet_socket_accept: function(p1: ENetSocket; p2: PENetAddress): ENetSocket; cdecl;
  enet_socket_bind: function(p1: ENetSocket; const p2: PENetAddress): Integer; cdecl;
  enet_socket_connect: function(p1: ENetSocket; const p2: PENetAddress): Integer; cdecl;
  enet_socket_create: function(p1: ENetSocketType): ENetSocket; cdecl;
  enet_socket_destroy: procedure(p1: ENetSocket); cdecl;
  enet_socket_get_address: function(p1: ENetSocket; p2: PENetAddress): Integer; cdecl;
  enet_socket_get_option: function(p1: ENetSocket; p2: ENetSocketOption; p3: PInteger): Integer; cdecl;
  enet_socket_listen: function(p1: ENetSocket; p2: Integer): Integer; cdecl;
  enet_socket_receive: function(p1: ENetSocket; p2: PENetAddress; p3: PENetBuffer; p4: NativeUInt): Integer; cdecl;
  enet_socket_send: function(p1: ENetSocket; const p2: PENetAddress; const p3: PENetBuffer; p4: NativeUInt): Integer; cdecl;
  enet_socket_set_option: function(p1: ENetSocket; p2: ENetSocketOption; p3: Integer): Integer; cdecl;
  enet_socket_shutdown: function(p1: ENetSocket; p2: ENetSocketShutdown): Integer; cdecl;
  enet_socket_wait: function(p1: ENetSocket; p2: Penet_uint32; p3: enet_uint32): Integer; cdecl;
  enet_socketset_select: function(p1: ENetSocket; p2: PENetSocketSet; p3: PENetSocketSet; p4: enet_uint32): Integer; cdecl;
  enet_time_get: function(): enet_uint32; cdecl;
  enet_time_set: procedure(p1: enet_uint32); cdecl;
  glfwCreateCursor: function(const image: PGLFWimage; xhot: Integer; yhot: Integer): PGLFWcursor; cdecl;
  glfwCreateStandardCursor: function(shape: Integer): PGLFWcursor; cdecl;
  glfwCreateWindow: function(width: Integer; height: Integer; const title: PUTF8Char; monitor: PGLFWmonitor; share: PGLFWwindow): PGLFWwindow; cdecl;
  glfwDefaultWindowHints: procedure(); cdecl;
  glfwDestroyCursor: procedure(cursor: PGLFWcursor); cdecl;
  glfwDestroyWindow: procedure(window: PGLFWwindow); cdecl;
  glfwExtensionSupported: function(const extension: PUTF8Char): Integer; cdecl;
  glfwFocusWindow: procedure(window: PGLFWwindow); cdecl;
  glfwGetClipboardString: function(window: PGLFWwindow): PUTF8Char; cdecl;
  glfwGetCurrentContext: function(): PGLFWwindow; cdecl;
  glfwGetCursorPos: procedure(window: PGLFWwindow; xpos: PDouble; ypos: PDouble); cdecl;
  glfwGetError: function(description: PPUTF8Char): Integer; cdecl;
  glfwGetFramebufferSize: procedure(window: PGLFWwindow; width: PInteger; height: PInteger); cdecl;
  glfwGetGamepadName: function(jid: Integer): PUTF8Char; cdecl;
  glfwGetGamepadState: function(jid: Integer; state: PGLFWgamepadstate): Integer; cdecl;
  glfwGetGammaRamp: function(monitor: PGLFWmonitor): PGLFWgammaramp; cdecl;
  glfwGetInputMode: function(window: PGLFWwindow; mode: Integer): Integer; cdecl;
  glfwGetJoystickAxes: function(jid: Integer; count: PInteger): PSingle; cdecl;
  glfwGetJoystickButtons: function(jid: Integer; count: PInteger): PByte; cdecl;
  glfwGetJoystickGUID: function(jid: Integer): PUTF8Char; cdecl;
  glfwGetJoystickHats: function(jid: Integer; count: PInteger): PByte; cdecl;
  glfwGetJoystickName: function(jid: Integer): PUTF8Char; cdecl;
  glfwGetJoystickUserPointer: function(jid: Integer): Pointer; cdecl;
  glfwGetKey: function(window: PGLFWwindow; key: Integer): Integer; cdecl;
  glfwGetKeyName: function(key: Integer; scancode: Integer): PUTF8Char; cdecl;
  glfwGetKeyScancode: function(key: Integer): Integer; cdecl;
  glfwGetMonitorContentScale: procedure(monitor: PGLFWmonitor; xscale: PSingle; yscale: PSingle); cdecl;
  glfwGetMonitorName: function(monitor: PGLFWmonitor): PUTF8Char; cdecl;
  glfwGetMonitorPhysicalSize: procedure(monitor: PGLFWmonitor; widthMM: PInteger; heightMM: PInteger); cdecl;
  glfwGetMonitorPos: procedure(monitor: PGLFWmonitor; xpos: PInteger; ypos: PInteger); cdecl;
  glfwGetMonitors: function(count: PInteger): PPGLFWmonitor; cdecl;
  glfwGetMonitorUserPointer: function(monitor: PGLFWmonitor): Pointer; cdecl;
  glfwGetMonitorWorkarea: procedure(monitor: PGLFWmonitor; xpos: PInteger; ypos: PInteger; width: PInteger; height: PInteger); cdecl;
  glfwGetMouseButton: function(window: PGLFWwindow; button: Integer): Integer; cdecl;
  glfwGetPrimaryMonitor: function(): PGLFWmonitor; cdecl;
  glfwGetProcAddress: function(const procname: PUTF8Char): GLFWglproc; cdecl;
  glfwGetRequiredInstanceExtensions: function(count: PUInt32): PPUTF8Char; cdecl;
  glfwGetTime: function(): Double; cdecl;
  glfwGetTimerFrequency: function(): UInt64; cdecl;
  glfwGetTimerValue: function(): UInt64; cdecl;
  glfwGetVersion: procedure(major: PInteger; minor: PInteger; rev: PInteger); cdecl;
  glfwGetVersionString: function(): PUTF8Char; cdecl;
  glfwGetVideoMode: function(monitor: PGLFWmonitor): PGLFWvidmode; cdecl;
  glfwGetVideoModes: function(monitor: PGLFWmonitor; count: PInteger): PGLFWvidmode; cdecl;
  glfwGetWindowAttrib: function(window: PGLFWwindow; attrib: Integer): Integer; cdecl;
  glfwGetWindowContentScale: procedure(window: PGLFWwindow; xscale: PSingle; yscale: PSingle); cdecl;
  glfwGetWindowFrameSize: procedure(window: PGLFWwindow; left: PInteger; top: PInteger; right: PInteger; bottom: PInteger); cdecl;
  glfwGetWindowMonitor: function(window: PGLFWwindow): PGLFWmonitor; cdecl;
  glfwGetWindowOpacity: function(window: PGLFWwindow): Single; cdecl;
  glfwGetWindowPos: procedure(window: PGLFWwindow; xpos: PInteger; ypos: PInteger); cdecl;
  glfwGetWindowSize: procedure(window: PGLFWwindow; width: PInteger; height: PInteger); cdecl;
  glfwGetWindowUserPointer: function(window: PGLFWwindow): Pointer; cdecl;
  glfwHideWindow: procedure(window: PGLFWwindow); cdecl;
  glfwIconifyWindow: procedure(window: PGLFWwindow); cdecl;
  glfwInit: function(): Integer; cdecl;
  glfwInitHint: procedure(hint: Integer; value: Integer); cdecl;
  glfwJoystickIsGamepad: function(jid: Integer): Integer; cdecl;
  glfwJoystickPresent: function(jid: Integer): Integer; cdecl;
  glfwMakeContextCurrent: procedure(window: PGLFWwindow); cdecl;
  glfwMaximizeWindow: procedure(window: PGLFWwindow); cdecl;
  glfwPollEvents: procedure(); cdecl;
  glfwPostEmptyEvent: procedure(); cdecl;
  glfwRawMouseMotionSupported: function(): Integer; cdecl;
  glfwRequestWindowAttention: procedure(window: PGLFWwindow); cdecl;
  glfwRestoreWindow: procedure(window: PGLFWwindow); cdecl;
  glfwSetCharCallback: function(window: PGLFWwindow; callback: GLFWcharfun): GLFWcharfun; cdecl;
  glfwSetCharModsCallback: function(window: PGLFWwindow; callback: GLFWcharmodsfun): GLFWcharmodsfun; cdecl;
  glfwSetClipboardString: procedure(window: PGLFWwindow; const _string: PUTF8Char); cdecl;
  glfwSetCursor: procedure(window: PGLFWwindow; cursor: PGLFWcursor); cdecl;
  glfwSetCursorEnterCallback: function(window: PGLFWwindow; callback: GLFWcursorenterfun): GLFWcursorenterfun; cdecl;
  glfwSetCursorPos: procedure(window: PGLFWwindow; xpos: Double; ypos: Double); cdecl;
  glfwSetCursorPosCallback: function(window: PGLFWwindow; callback: GLFWcursorposfun): GLFWcursorposfun; cdecl;
  glfwSetDropCallback: function(window: PGLFWwindow; callback: GLFWdropfun): GLFWdropfun; cdecl;
  glfwSetErrorCallback: function(callback: GLFWerrorfun): GLFWerrorfun; cdecl;
  glfwSetFramebufferSizeCallback: function(window: PGLFWwindow; callback: GLFWframebuffersizefun): GLFWframebuffersizefun; cdecl;
  glfwSetGamma: procedure(monitor: PGLFWmonitor; gamma: Single); cdecl;
  glfwSetGammaRamp: procedure(monitor: PGLFWmonitor; const ramp: PGLFWgammaramp); cdecl;
  glfwSetInputMode: procedure(window: PGLFWwindow; mode: Integer; value: Integer); cdecl;
  glfwSetJoystickCallback: function(callback: GLFWjoystickfun): GLFWjoystickfun; cdecl;
  glfwSetJoystickUserPointer: procedure(jid: Integer; pointer: Pointer); cdecl;
  glfwSetKeyCallback: function(window: PGLFWwindow; callback: GLFWkeyfun): GLFWkeyfun; cdecl;
  glfwSetMonitorCallback: function(callback: GLFWmonitorfun): GLFWmonitorfun; cdecl;
  glfwSetMonitorUserPointer: procedure(monitor: PGLFWmonitor; pointer: Pointer); cdecl;
  glfwSetMouseButtonCallback: function(window: PGLFWwindow; callback: GLFWmousebuttonfun): GLFWmousebuttonfun; cdecl;
  glfwSetScrollCallback: function(window: PGLFWwindow; callback: GLFWscrollfun): GLFWscrollfun; cdecl;
  glfwSetTime: procedure(time: Double); cdecl;
  glfwSetWindowAspectRatio: procedure(window: PGLFWwindow; numer: Integer; denom: Integer); cdecl;
  glfwSetWindowAttrib: procedure(window: PGLFWwindow; attrib: Integer; value: Integer); cdecl;
  glfwSetWindowCloseCallback: function(window: PGLFWwindow; callback: GLFWwindowclosefun): GLFWwindowclosefun; cdecl;
  glfwSetWindowContentScaleCallback: function(window: PGLFWwindow; callback: GLFWwindowcontentscalefun): GLFWwindowcontentscalefun; cdecl;
  glfwSetWindowFocusCallback: function(window: PGLFWwindow; callback: GLFWwindowfocusfun): GLFWwindowfocusfun; cdecl;
  glfwSetWindowIcon: procedure(window: PGLFWwindow; count: Integer; const images: PGLFWimage); cdecl;
  glfwSetWindowIconifyCallback: function(window: PGLFWwindow; callback: GLFWwindowiconifyfun): GLFWwindowiconifyfun; cdecl;
  glfwSetWindowMaximizeCallback: function(window: PGLFWwindow; callback: GLFWwindowmaximizefun): GLFWwindowmaximizefun; cdecl;
  glfwSetWindowMonitor: procedure(window: PGLFWwindow; monitor: PGLFWmonitor; xpos: Integer; ypos: Integer; width: Integer; height: Integer; refreshRate: Integer); cdecl;
  glfwSetWindowOpacity: procedure(window: PGLFWwindow; opacity: Single); cdecl;
  glfwSetWindowPos: procedure(window: PGLFWwindow; xpos: Integer; ypos: Integer); cdecl;
  glfwSetWindowPosCallback: function(window: PGLFWwindow; callback: GLFWwindowposfun): GLFWwindowposfun; cdecl;
  glfwSetWindowRefreshCallback: function(window: PGLFWwindow; callback: GLFWwindowrefreshfun): GLFWwindowrefreshfun; cdecl;
  glfwSetWindowShouldClose: procedure(window: PGLFWwindow; value: Integer); cdecl;
  glfwSetWindowSize: procedure(window: PGLFWwindow; width: Integer; height: Integer); cdecl;
  glfwSetWindowSizeCallback: function(window: PGLFWwindow; callback: GLFWwindowsizefun): GLFWwindowsizefun; cdecl;
  glfwSetWindowSizeLimits: procedure(window: PGLFWwindow; minwidth: Integer; minheight: Integer; maxwidth: Integer; maxheight: Integer); cdecl;
  glfwSetWindowTitle: procedure(window: PGLFWwindow; const title: PUTF8Char); cdecl;
  glfwSetWindowUserPointer: procedure(window: PGLFWwindow; pointer: Pointer); cdecl;
  glfwShowWindow: procedure(window: PGLFWwindow); cdecl;
  glfwSwapBuffers: procedure(window: PGLFWwindow); cdecl;
  glfwSwapInterval: procedure(interval: Integer); cdecl;
  glfwTerminate: procedure(); cdecl;
  glfwUpdateGamepadMappings: function(const _string: PUTF8Char): Integer; cdecl;
  glfwVulkanSupported: function(): Integer; cdecl;
  glfwWaitEvents: procedure(); cdecl;
  glfwWaitEventsTimeout: procedure(timeout: Double); cdecl;
  glfwWindowHint: procedure(hint: Integer; value: Integer); cdecl;
  glfwWindowHintString: procedure(hint: Integer; const value: PUTF8Char); cdecl;
  glfwWindowShouldClose: function(window: PGLFWwindow): Integer; cdecl;
  ma_aligned_free: procedure(p: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_aligned_malloc: function(sz: NativeUInt; alignment: NativeUInt; const pAllocationCallbacks: Pma_allocation_callbacks): Pointer; cdecl;
  ma_apply_volume_factor_f32: procedure(pSamples: PSingle; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames: procedure(pFrames: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames_f32: procedure(pFrames: PSingle; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames_s16: procedure(pFrames: Pma_int16; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames_s24: procedure(pFrames: Pointer; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames_s32: procedure(pFrames: Pma_int32; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames_u8: procedure(pFrames: Pma_uint8; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_s16: procedure(pSamples: Pma_int16; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_apply_volume_factor_s24: procedure(pSamples: Pointer; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_apply_volume_factor_s32: procedure(pSamples: Pma_int32; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_apply_volume_factor_u8: procedure(pSamples: Pma_uint8; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_async_notification_event_init: function(pNotificationEvent: Pma_async_notification_event): ma_result; cdecl;
  ma_async_notification_event_signal: function(pNotificationEvent: Pma_async_notification_event): ma_result; cdecl;
  ma_async_notification_event_uninit: function(pNotificationEvent: Pma_async_notification_event): ma_result; cdecl;
  ma_async_notification_event_wait: function(pNotificationEvent: Pma_async_notification_event): ma_result; cdecl;
  ma_async_notification_poll_init: function(pNotificationPoll: Pma_async_notification_poll): ma_result; cdecl;
  ma_async_notification_poll_is_signalled: function(const pNotificationPoll: Pma_async_notification_poll): ma_bool32; cdecl;
  ma_async_notification_signal: function(pNotification: Pma_async_notification): ma_result; cdecl;
  ma_audio_buffer_alloc_and_init: function(const pConfig: Pma_audio_buffer_config; ppAudioBuffer: PPma_audio_buffer): ma_result; cdecl;
  ma_audio_buffer_at_end: function(const pAudioBuffer: Pma_audio_buffer): ma_bool32; cdecl;
  ma_audio_buffer_config_init: function(format: ma_format; channels: ma_uint32; sizeInFrames: ma_uint64; const pData: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks): ma_audio_buffer_config; cdecl;
  ma_audio_buffer_get_available_frames: function(const pAudioBuffer: Pma_audio_buffer; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_get_cursor_in_pcm_frames: function(const pAudioBuffer: Pma_audio_buffer; pCursor: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_get_length_in_pcm_frames: function(const pAudioBuffer: Pma_audio_buffer; pLength: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_init: function(const pConfig: Pma_audio_buffer_config; pAudioBuffer: Pma_audio_buffer): ma_result; cdecl;
  ma_audio_buffer_init_copy: function(const pConfig: Pma_audio_buffer_config; pAudioBuffer: Pma_audio_buffer): ma_result; cdecl;
  ma_audio_buffer_map: function(pAudioBuffer: Pma_audio_buffer; ppFramesOut: PPointer; pFrameCount: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_read_pcm_frames: function(pAudioBuffer: Pma_audio_buffer; pFramesOut: Pointer; frameCount: ma_uint64; loop: ma_bool32): ma_uint64; cdecl;
  ma_audio_buffer_ref_at_end: function(const pAudioBufferRef: Pma_audio_buffer_ref): ma_bool32; cdecl;
  ma_audio_buffer_ref_get_available_frames: function(const pAudioBufferRef: Pma_audio_buffer_ref; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_get_cursor_in_pcm_frames: function(const pAudioBufferRef: Pma_audio_buffer_ref; pCursor: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_get_length_in_pcm_frames: function(const pAudioBufferRef: Pma_audio_buffer_ref; pLength: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_init: function(format: ma_format; channels: ma_uint32; const pData: Pointer; sizeInFrames: ma_uint64; pAudioBufferRef: Pma_audio_buffer_ref): ma_result; cdecl;
  ma_audio_buffer_ref_map: function(pAudioBufferRef: Pma_audio_buffer_ref; ppFramesOut: PPointer; pFrameCount: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_read_pcm_frames: function(pAudioBufferRef: Pma_audio_buffer_ref; pFramesOut: Pointer; frameCount: ma_uint64; loop: ma_bool32): ma_uint64; cdecl;
  ma_audio_buffer_ref_seek_to_pcm_frame: function(pAudioBufferRef: Pma_audio_buffer_ref; frameIndex: ma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_set_data: function(pAudioBufferRef: Pma_audio_buffer_ref; const pData: Pointer; sizeInFrames: ma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_uninit: procedure(pAudioBufferRef: Pma_audio_buffer_ref); cdecl;
  ma_audio_buffer_ref_unmap: function(pAudioBufferRef: Pma_audio_buffer_ref; frameCount: ma_uint64): ma_result; cdecl;
  ma_audio_buffer_seek_to_pcm_frame: function(pAudioBuffer: Pma_audio_buffer; frameIndex: ma_uint64): ma_result; cdecl;
  ma_audio_buffer_uninit: procedure(pAudioBuffer: Pma_audio_buffer); cdecl;
  ma_audio_buffer_uninit_and_free: procedure(pAudioBuffer: Pma_audio_buffer); cdecl;
  ma_audio_buffer_unmap: function(pAudioBuffer: Pma_audio_buffer; frameCount: ma_uint64): ma_result; cdecl;
  ma_biquad_config_init: function(format: ma_format; channels: ma_uint32; b0: Double; b1: Double; b2: Double; a0: Double; a1: Double; a2: Double): ma_biquad_config; cdecl;
  ma_biquad_get_heap_size: function(const pConfig: Pma_biquad_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_biquad_get_latency: function(const pBQ: Pma_biquad): ma_uint32; cdecl;
  ma_biquad_init: function(const pConfig: Pma_biquad_config; const pAllocationCallbacks: Pma_allocation_callbacks; pBQ: Pma_biquad): ma_result; cdecl;
  ma_biquad_init_preallocated: function(const pConfig: Pma_biquad_config; pHeap: Pointer; pBQ: Pma_biquad): ma_result; cdecl;
  ma_biquad_node_config_init: function(channels: ma_uint32; b0: Single; b1: Single; b2: Single; a0: Single; a1: Single; a2: Single): ma_biquad_node_config; cdecl;
  ma_biquad_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_biquad_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_biquad_node): ma_result; cdecl;
  ma_biquad_node_reinit: function(const pConfig: Pma_biquad_config; pNode: Pma_biquad_node): ma_result; cdecl;
  ma_biquad_node_uninit: procedure(pNode: Pma_biquad_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_biquad_process_pcm_frames: function(pBQ: Pma_biquad; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_biquad_reinit: function(const pConfig: Pma_biquad_config; pBQ: Pma_biquad): ma_result; cdecl;
  ma_biquad_uninit: procedure(pBQ: Pma_biquad; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_blend_f32: procedure(pOut: PSingle; pInA: PSingle; pInB: PSingle; factor: Single; channels: ma_uint32); cdecl;
  ma_bpf_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_bpf_config; cdecl;
  ma_bpf_get_heap_size: function(const pConfig: Pma_bpf_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_bpf_get_latency: function(const pBPF: Pma_bpf): ma_uint32; cdecl;
  ma_bpf_init: function(const pConfig: Pma_bpf_config; const pAllocationCallbacks: Pma_allocation_callbacks; pBPF: Pma_bpf): ma_result; cdecl;
  ma_bpf_init_preallocated: function(const pConfig: Pma_bpf_config; pHeap: Pointer; pBPF: Pma_bpf): ma_result; cdecl;
  ma_bpf_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_bpf_node_config; cdecl;
  ma_bpf_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_bpf_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_bpf_node): ma_result; cdecl;
  ma_bpf_node_reinit: function(const pConfig: Pma_bpf_config; pNode: Pma_bpf_node): ma_result; cdecl;
  ma_bpf_node_uninit: procedure(pNode: Pma_bpf_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_bpf_process_pcm_frames: function(pBPF: Pma_bpf; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_bpf_reinit: function(const pConfig: Pma_bpf_config; pBPF: Pma_bpf): ma_result; cdecl;
  ma_bpf_uninit: procedure(pBPF: Pma_bpf; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_bpf2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; q: Double): ma_bpf2_config; cdecl;
  ma_bpf2_get_heap_size: function(const pConfig: Pma_bpf2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_bpf2_get_latency: function(const pBPF: Pma_bpf2): ma_uint32; cdecl;
  ma_bpf2_init: function(const pConfig: Pma_bpf2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pBPF: Pma_bpf2): ma_result; cdecl;
  ma_bpf2_init_preallocated: function(const pConfig: Pma_bpf2_config; pHeap: Pointer; pBPF: Pma_bpf2): ma_result; cdecl;
  ma_bpf2_process_pcm_frames: function(pBPF: Pma_bpf2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_bpf2_reinit: function(const pConfig: Pma_bpf2_config; pBPF: Pma_bpf2): ma_result; cdecl;
  ma_bpf2_uninit: procedure(pBPF: Pma_bpf2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_calculate_buffer_size_in_frames_from_descriptor: function(const pDescriptor: Pma_device_descriptor; nativeSampleRate: ma_uint32; performanceProfile: ma_performance_profile): ma_uint32; cdecl;
  ma_calculate_buffer_size_in_frames_from_milliseconds: function(bufferSizeInMilliseconds: ma_uint32; sampleRate: ma_uint32): ma_uint32; cdecl;
  ma_calculate_buffer_size_in_milliseconds_from_frames: function(bufferSizeInFrames: ma_uint32; sampleRate: ma_uint32): ma_uint32; cdecl;
  ma_calloc: function(sz: NativeUInt; const pAllocationCallbacks: Pma_allocation_callbacks): Pointer; cdecl;
  ma_channel_converter_config_init: function(format: ma_format; channelsIn: ma_uint32; const pChannelMapIn: Pma_channel; channelsOut: ma_uint32; const pChannelMapOut: Pma_channel; mixingMode: ma_channel_mix_mode): ma_channel_converter_config; cdecl;
  ma_channel_converter_get_heap_size: function(const pConfig: Pma_channel_converter_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_channel_converter_get_input_channel_map: function(const pConverter: Pma_channel_converter; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_channel_converter_get_output_channel_map: function(const pConverter: Pma_channel_converter; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_channel_converter_init: function(const pConfig: Pma_channel_converter_config; const pAllocationCallbacks: Pma_allocation_callbacks; pConverter: Pma_channel_converter): ma_result; cdecl;
  ma_channel_converter_init_preallocated: function(const pConfig: Pma_channel_converter_config; pHeap: Pointer; pConverter: Pma_channel_converter): ma_result; cdecl;
  ma_channel_converter_process_pcm_frames: function(pConverter: Pma_channel_converter; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_channel_converter_uninit: procedure(pConverter: Pma_channel_converter; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_channel_map_contains_channel_position: function(channels: ma_uint32; const pChannelMap: Pma_channel; channelPosition: ma_channel): ma_bool32; cdecl;
  ma_channel_map_copy: procedure(pOut: Pma_channel; const pIn: Pma_channel; channels: ma_uint32); cdecl;
  ma_channel_map_copy_or_default: procedure(pOut: Pma_channel; channelMapCapOut: NativeUInt; const pIn: Pma_channel; channels: ma_uint32); cdecl;
  ma_channel_map_get_channel: function(const pChannelMap: Pma_channel; channelCount: ma_uint32; channelIndex: ma_uint32): ma_channel; cdecl;
  ma_channel_map_init_blank: procedure(pChannelMap: Pma_channel; channels: ma_uint32); cdecl;
  ma_channel_map_init_standard: procedure(standardChannelMap: ma_standard_channel_map; pChannelMap: Pma_channel; channelMapCap: NativeUInt; channels: ma_uint32); cdecl;
  ma_channel_map_is_blank: function(const pChannelMap: Pma_channel; channels: ma_uint32): ma_bool32; cdecl;
  ma_channel_map_is_equal: function(const pChannelMapA: Pma_channel; const pChannelMapB: Pma_channel; channels: ma_uint32): ma_bool32; cdecl;
  ma_channel_map_is_valid: function(const pChannelMap: Pma_channel; channels: ma_uint32): ma_bool32; cdecl;
  ma_clip_pcm_frames: procedure(pDst: Pointer; const pSrc: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32); cdecl;
  ma_clip_samples_f32: procedure(pDst: PSingle; const pSrc: PSingle; count: ma_uint64); cdecl;
  ma_clip_samples_s16: procedure(pDst: Pma_int16; const pSrc: Pma_int32; count: ma_uint64); cdecl;
  ma_clip_samples_s24: procedure(pDst: Pma_uint8; const pSrc: Pma_int64; count: ma_uint64); cdecl;
  ma_clip_samples_s32: procedure(pDst: Pma_int32; const pSrc: Pma_int64; count: ma_uint64); cdecl;
  ma_clip_samples_u8: procedure(pDst: Pma_uint8; const pSrc: Pma_int16; count: ma_uint64); cdecl;
  ma_context_config_init: function(): ma_context_config; cdecl;
  ma_context_enumerate_devices: function(pContext: Pma_context; callback: ma_enum_devices_callback_proc; pUserData: Pointer): ma_result; cdecl;
  ma_context_get_device_info: function(pContext: Pma_context; deviceType: ma_device_type; const pDeviceID: Pma_device_id; pDeviceInfo: Pma_device_info): ma_result; cdecl;
  ma_context_get_devices: function(pContext: Pma_context; ppPlaybackDeviceInfos: PPma_device_info; pPlaybackDeviceCount: Pma_uint32; ppCaptureDeviceInfos: PPma_device_info; pCaptureDeviceCount: Pma_uint32): ma_result; cdecl;
  ma_context_get_log: function(pContext: Pma_context): Pma_log; cdecl;
  ma_context_init: function(backends: Pma_backend; backendCount: ma_uint32; const pConfig: Pma_context_config; pContext: Pma_context): ma_result; cdecl;
  ma_context_is_loopback_supported: function(pContext: Pma_context): ma_bool32; cdecl;
  ma_context_sizeof: function(): NativeUInt; cdecl;
  ma_context_uninit: function(pContext: Pma_context): ma_result; cdecl;
  ma_convert_frames: function(pOut: Pointer; frameCountOut: ma_uint64; formatOut: ma_format; channelsOut: ma_uint32; sampleRateOut: ma_uint32; const pIn: Pointer; frameCountIn: ma_uint64; formatIn: ma_format; channelsIn: ma_uint32; sampleRateIn: ma_uint32): ma_uint64; cdecl;
  ma_convert_frames_ex: function(pOut: Pointer; frameCountOut: ma_uint64; const pIn: Pointer; frameCountIn: ma_uint64; const pConfig: Pma_data_converter_config): ma_uint64; cdecl;
  ma_convert_pcm_frames_format: procedure(pOut: Pointer; formatOut: ma_format; const pIn: Pointer; formatIn: ma_format; frameCount: ma_uint64; channels: ma_uint32; ditherMode: ma_dither_mode); cdecl;
  ma_copy_and_apply_volume_and_clip_pcm_frames: procedure(pDst: Pointer; const pSrc: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32; volume: Single); cdecl;
  ma_copy_and_apply_volume_and_clip_samples_f32: procedure(pDst: PSingle; const pSrc: PSingle; count: ma_uint64; volume: Single); cdecl;
  ma_copy_and_apply_volume_and_clip_samples_s16: procedure(pDst: Pma_int16; const pSrc: Pma_int32; count: ma_uint64; volume: Single); cdecl;
  ma_copy_and_apply_volume_and_clip_samples_s24: procedure(pDst: Pma_uint8; const pSrc: Pma_int64; count: ma_uint64; volume: Single); cdecl;
  ma_copy_and_apply_volume_and_clip_samples_s32: procedure(pDst: Pma_int32; const pSrc: Pma_int64; count: ma_uint64; volume: Single); cdecl;
  ma_copy_and_apply_volume_and_clip_samples_u8: procedure(pDst: Pma_uint8; const pSrc: Pma_int16; count: ma_uint64; volume: Single); cdecl;
  ma_copy_and_apply_volume_factor_f32: procedure(pSamplesOut: PSingle; const pSamplesIn: PSingle; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames: procedure(pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames_f32: procedure(pFramesOut: PSingle; const pFramesIn: PSingle; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames_s16: procedure(pFramesOut: Pma_int16; const pFramesIn: Pma_int16; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames_s24: procedure(pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames_s32: procedure(pFramesOut: Pma_int32; const pFramesIn: Pma_int32; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames_u8: procedure(pFramesOut: Pma_uint8; const pFramesIn: Pma_uint8; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_per_channel_f32: procedure(pFramesOut: PSingle; const pFramesIn: PSingle; frameCount: ma_uint64; channels: ma_uint32; pChannelGains: PSingle); cdecl;
  ma_copy_and_apply_volume_factor_s16: procedure(pSamplesOut: Pma_int16; const pSamplesIn: Pma_int16; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_s24: procedure(pSamplesOut: Pointer; const pSamplesIn: Pointer; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_s32: procedure(pSamplesOut: Pma_int32; const pSamplesIn: Pma_int32; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_u8: procedure(pSamplesOut: Pma_uint8; const pSamplesIn: Pma_uint8; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_copy_pcm_frames: procedure(dst: Pointer; const src: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32); cdecl;
  ma_data_converter_config_init: function(formatIn: ma_format; formatOut: ma_format; channelsIn: ma_uint32; channelsOut: ma_uint32; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_data_converter_config; cdecl;
  ma_data_converter_config_init_default: function(): ma_data_converter_config; cdecl;
  ma_data_converter_get_expected_output_frame_count: function(const pConverter: Pma_data_converter; inputFrameCount: ma_uint64; pOutputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_data_converter_get_heap_size: function(const pConfig: Pma_data_converter_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_data_converter_get_input_channel_map: function(const pConverter: Pma_data_converter; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_data_converter_get_input_latency: function(const pConverter: Pma_data_converter): ma_uint64; cdecl;
  ma_data_converter_get_output_channel_map: function(const pConverter: Pma_data_converter; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_data_converter_get_output_latency: function(const pConverter: Pma_data_converter): ma_uint64; cdecl;
  ma_data_converter_get_required_input_frame_count: function(const pConverter: Pma_data_converter; outputFrameCount: ma_uint64; pInputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_data_converter_init: function(const pConfig: Pma_data_converter_config; const pAllocationCallbacks: Pma_allocation_callbacks; pConverter: Pma_data_converter): ma_result; cdecl;
  ma_data_converter_init_preallocated: function(const pConfig: Pma_data_converter_config; pHeap: Pointer; pConverter: Pma_data_converter): ma_result; cdecl;
  ma_data_converter_process_pcm_frames: function(pConverter: Pma_data_converter; const pFramesIn: Pointer; pFrameCountIn: Pma_uint64; pFramesOut: Pointer; pFrameCountOut: Pma_uint64): ma_result; cdecl;
  ma_data_converter_set_rate: function(pConverter: Pma_data_converter; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_result; cdecl;
  ma_data_converter_set_rate_ratio: function(pConverter: Pma_data_converter; ratioInOut: Single): ma_result; cdecl;
  ma_data_converter_uninit: procedure(pConverter: Pma_data_converter; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_data_source_config_init: function(): ma_data_source_config; cdecl;
  ma_data_source_get_current: function(pDataSource: Pma_data_source): Pma_data_source; cdecl;
  ma_data_source_get_cursor_in_pcm_frames: function(pDataSource: Pma_data_source; pCursor: Pma_uint64): ma_result; cdecl;
  ma_data_source_get_data_format: function(pDataSource: Pma_data_source; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_data_source_get_length_in_pcm_frames: function(pDataSource: Pma_data_source; pLength: Pma_uint64): ma_result; cdecl;
  ma_data_source_get_loop_point_in_pcm_frames: procedure(pDataSource: Pma_data_source; pLoopBegInFrames: Pma_uint64; pLoopEndInFrames: Pma_uint64); cdecl;
  ma_data_source_get_next: function(pDataSource: Pma_data_source): Pma_data_source; cdecl;
  ma_data_source_get_next_callback: function(pDataSource: Pma_data_source): ma_data_source_get_next_proc; cdecl;
  ma_data_source_get_range_in_pcm_frames: procedure(pDataSource: Pma_data_source; pRangeBegInFrames: Pma_uint64; pRangeEndInFrames: Pma_uint64); cdecl;
  ma_data_source_init: function(const pConfig: Pma_data_source_config; pDataSource: Pma_data_source): ma_result; cdecl;
  ma_data_source_is_looping: function(pDataSource: Pma_data_source): ma_bool32; cdecl;
  ma_data_source_node_config_init: function(pDataSource: Pma_data_source): ma_data_source_node_config; cdecl;
  ma_data_source_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_data_source_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pDataSourceNode: Pma_data_source_node): ma_result; cdecl;
  ma_data_source_node_is_looping: function(pDataSourceNode: Pma_data_source_node): ma_bool32; cdecl;
  ma_data_source_node_set_looping: function(pDataSourceNode: Pma_data_source_node; isLooping: ma_bool32): ma_result; cdecl;
  ma_data_source_node_uninit: procedure(pDataSourceNode: Pma_data_source_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_data_source_read_pcm_frames: function(pDataSource: Pma_data_source; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_data_source_seek_pcm_frames: function(pDataSource: Pma_data_source; frameCount: ma_uint64; pFramesSeeked: Pma_uint64): ma_result; cdecl;
  ma_data_source_seek_to_pcm_frame: function(pDataSource: Pma_data_source; frameIndex: ma_uint64): ma_result; cdecl;
  ma_data_source_set_current: function(pDataSource: Pma_data_source; pCurrentDataSource: Pma_data_source): ma_result; cdecl;
  ma_data_source_set_loop_point_in_pcm_frames: function(pDataSource: Pma_data_source; loopBegInFrames: ma_uint64; loopEndInFrames: ma_uint64): ma_result; cdecl;
  ma_data_source_set_looping: function(pDataSource: Pma_data_source; isLooping: ma_bool32): ma_result; cdecl;
  ma_data_source_set_next: function(pDataSource: Pma_data_source; pNextDataSource: Pma_data_source): ma_result; cdecl;
  ma_data_source_set_next_callback: function(pDataSource: Pma_data_source; onGetNext: ma_data_source_get_next_proc): ma_result; cdecl;
  ma_data_source_set_range_in_pcm_frames: function(pDataSource: Pma_data_source; rangeBegInFrames: ma_uint64; rangeEndInFrames: ma_uint64): ma_result; cdecl;
  ma_data_source_uninit: procedure(pDataSource: Pma_data_source); cdecl;
  ma_decode_file: function(const pFilePath: PUTF8Char; pConfig: Pma_decoder_config; pFrameCountOut: Pma_uint64; ppPCMFramesOut: PPointer): ma_result; cdecl;
  ma_decode_from_vfs: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; pConfig: Pma_decoder_config; pFrameCountOut: Pma_uint64; ppPCMFramesOut: PPointer): ma_result; cdecl;
  ma_decode_memory: function(const pData: Pointer; dataSize: NativeUInt; pConfig: Pma_decoder_config; pFrameCountOut: Pma_uint64; ppPCMFramesOut: PPointer): ma_result; cdecl;
  ma_decoder_config_init: function(outputFormat: ma_format; outputChannels: ma_uint32; outputSampleRate: ma_uint32): ma_decoder_config; cdecl;
  ma_decoder_config_init_default: function(): ma_decoder_config; cdecl;
  ma_decoder_get_available_frames: function(pDecoder: Pma_decoder; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_decoder_get_cursor_in_pcm_frames: function(pDecoder: Pma_decoder; pCursor: Pma_uint64): ma_result; cdecl;
  ma_decoder_get_data_format: function(pDecoder: Pma_decoder; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_decoder_get_length_in_pcm_frames: function(pDecoder: Pma_decoder; pLength: Pma_uint64): ma_result; cdecl;
  ma_decoder_init: function(onRead: ma_decoder_read_proc; onSeek: ma_decoder_seek_proc; pUserData: Pointer; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_init_file: function(const pFilePath: PUTF8Char; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_init_file_w: function(const pFilePath: PWideChar; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_init_memory: function(const pData: Pointer; dataSize: NativeUInt; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_init_vfs: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_init_vfs_w: function(pVFS: Pma_vfs; const pFilePath: PWideChar; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_read_pcm_frames: function(pDecoder: Pma_decoder; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_decoder_seek_to_pcm_frame: function(pDecoder: Pma_decoder; frameIndex: ma_uint64): ma_result; cdecl;
  ma_decoder_uninit: function(pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoding_backend_config_init: function(preferredFormat: ma_format; seekPointCount: ma_uint32): ma_decoding_backend_config; cdecl;
  ma_default_vfs_init: function(pVFS: Pma_default_vfs; const pAllocationCallbacks: Pma_allocation_callbacks): ma_result; cdecl;
  ma_deinterleave_pcm_frames: procedure(format: ma_format; channels: ma_uint32; frameCount: ma_uint64; const pInterleavedPCMFrames: Pointer; ppDeinterleavedPCMFrames: PPointer); cdecl;
  ma_delay_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; delayInFrames: ma_uint32; decay: Single): ma_delay_config; cdecl;
  ma_delay_get_decay: function(const pDelay: Pma_delay): Single; cdecl;
  ma_delay_get_dry: function(const pDelay: Pma_delay): Single; cdecl;
  ma_delay_get_wet: function(const pDelay: Pma_delay): Single; cdecl;
  ma_delay_init: function(const pConfig: Pma_delay_config; const pAllocationCallbacks: Pma_allocation_callbacks; pDelay: Pma_delay): ma_result; cdecl;
  ma_delay_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; delayInFrames: ma_uint32; decay: Single): ma_delay_node_config; cdecl;
  ma_delay_node_get_decay: function(const pDelayNode: Pma_delay_node): Single; cdecl;
  ma_delay_node_get_dry: function(const pDelayNode: Pma_delay_node): Single; cdecl;
  ma_delay_node_get_wet: function(const pDelayNode: Pma_delay_node): Single; cdecl;
  ma_delay_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_delay_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pDelayNode: Pma_delay_node): ma_result; cdecl;
  ma_delay_node_set_decay: procedure(pDelayNode: Pma_delay_node; value: Single); cdecl;
  ma_delay_node_set_dry: procedure(pDelayNode: Pma_delay_node; value: Single); cdecl;
  ma_delay_node_set_wet: procedure(pDelayNode: Pma_delay_node; value: Single); cdecl;
  ma_delay_node_uninit: procedure(pDelayNode: Pma_delay_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_delay_process_pcm_frames: function(pDelay: Pma_delay; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint32): ma_result; cdecl;
  ma_delay_set_decay: procedure(pDelay: Pma_delay; value: Single); cdecl;
  ma_delay_set_dry: procedure(pDelay: Pma_delay; value: Single); cdecl;
  ma_delay_set_wet: procedure(pDelay: Pma_delay; value: Single); cdecl;
  ma_delay_uninit: procedure(pDelay: Pma_delay; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_device_config_init: function(deviceType: ma_device_type): ma_device_config; cdecl;
  ma_device_get_context: function(pDevice: Pma_device): Pma_context; cdecl;
  ma_device_get_info: function(pDevice: Pma_device; _type: ma_device_type; pDeviceInfo: Pma_device_info): ma_result; cdecl;
  ma_device_get_log: function(pDevice: Pma_device): Pma_log; cdecl;
  ma_device_get_master_volume: function(pDevice: Pma_device; pVolume: PSingle): ma_result; cdecl;
  ma_device_get_master_volume_db: function(pDevice: Pma_device; pGainDB: PSingle): ma_result; cdecl;
  ma_device_get_name: function(pDevice: Pma_device; _type: ma_device_type; pName: PUTF8Char; nameCap: NativeUInt; pLengthNotIncludingNullTerminator: PNativeUInt): ma_result; cdecl;
  ma_device_get_state: function(const pDevice: Pma_device): ma_device_state; cdecl;
  ma_device_handle_backend_data_callback: function(pDevice: Pma_device; pOutput: Pointer; const pInput: Pointer; frameCount: ma_uint32): ma_result; cdecl;
  ma_device_init: function(pContext: Pma_context; const pConfig: Pma_device_config; pDevice: Pma_device): ma_result; cdecl;
  ma_device_init_ex: function(backends: Pma_backend; backendCount: ma_uint32; const pContextConfig: Pma_context_config; const pConfig: Pma_device_config; pDevice: Pma_device): ma_result; cdecl;
  ma_device_is_started: function(const pDevice: Pma_device): ma_bool32; cdecl;
  ma_device_job_thread_config_init: function(): ma_device_job_thread_config; cdecl;
  ma_device_job_thread_init: function(const pConfig: Pma_device_job_thread_config; const pAllocationCallbacks: Pma_allocation_callbacks; pJobThread: Pma_device_job_thread): ma_result; cdecl;
  ma_device_job_thread_next: function(pJobThread: Pma_device_job_thread; pJob: Pma_job): ma_result; cdecl;
  ma_device_job_thread_post: function(pJobThread: Pma_device_job_thread; const pJob: Pma_job): ma_result; cdecl;
  ma_device_job_thread_uninit: procedure(pJobThread: Pma_device_job_thread; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_device_post_init: function(pDevice: Pma_device; deviceType: ma_device_type; const pPlaybackDescriptor: Pma_device_descriptor; const pCaptureDescriptor: Pma_device_descriptor): ma_result; cdecl;
  ma_device_set_master_volume: function(pDevice: Pma_device; volume: Single): ma_result; cdecl;
  ma_device_set_master_volume_db: function(pDevice: Pma_device; gainDB: Single): ma_result; cdecl;
  ma_device_start: function(pDevice: Pma_device): ma_result; cdecl;
  ma_device_stop: function(pDevice: Pma_device): ma_result; cdecl;
  ma_device_uninit: procedure(pDevice: Pma_device); cdecl;
  ma_duplex_rb_init: function(captureFormat: ma_format; captureChannels: ma_uint32; sampleRate: ma_uint32; captureInternalSampleRate: ma_uint32; captureInternalPeriodSizeInFrames: ma_uint32; const pAllocationCallbacks: Pma_allocation_callbacks; pRB: Pma_duplex_rb): ma_result; cdecl;
  ma_duplex_rb_uninit: function(pRB: Pma_duplex_rb): ma_result; cdecl;
  ma_encoder_config_init: function(encodingFormat: ma_encoding_format; format: ma_format; channels: ma_uint32; sampleRate: ma_uint32): ma_encoder_config; cdecl;
  ma_encoder_init: function(onWrite: ma_encoder_write_proc; onSeek: ma_encoder_seek_proc; pUserData: Pointer; const pConfig: Pma_encoder_config; pEncoder: Pma_encoder): ma_result; cdecl;
  ma_encoder_init_file: function(const pFilePath: PUTF8Char; const pConfig: Pma_encoder_config; pEncoder: Pma_encoder): ma_result; cdecl;
  ma_encoder_init_file_w: function(const pFilePath: PWideChar; const pConfig: Pma_encoder_config; pEncoder: Pma_encoder): ma_result; cdecl;
  ma_encoder_init_vfs: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; const pConfig: Pma_encoder_config; pEncoder: Pma_encoder): ma_result; cdecl;
  ma_encoder_init_vfs_w: function(pVFS: Pma_vfs; const pFilePath: PWideChar; const pConfig: Pma_encoder_config; pEncoder: Pma_encoder): ma_result; cdecl;
  ma_encoder_uninit: procedure(pEncoder: Pma_encoder); cdecl;
  ma_encoder_write_pcm_frames: function(pEncoder: Pma_encoder; const pFramesIn: Pointer; frameCount: ma_uint64; pFramesWritten: Pma_uint64): ma_result; cdecl;
  ma_engine_config_init: function(): ma_engine_config; cdecl;
  ma_engine_find_closest_listener: function(const pEngine: Pma_engine; absolutePosX: Single; absolutePosY: Single; absolutePosZ: Single): ma_uint32; cdecl;
  ma_engine_get_channels: function(const pEngine: Pma_engine): ma_uint32; cdecl;
  ma_engine_get_device: function(pEngine: Pma_engine): Pma_device; cdecl;
  ma_engine_get_endpoint: function(pEngine: Pma_engine): Pma_node; cdecl;
  ma_engine_get_listener_count: function(const pEngine: Pma_engine): ma_uint32; cdecl;
  ma_engine_get_log: function(pEngine: Pma_engine): Pma_log; cdecl;
  ma_engine_get_node_graph: function(pEngine: Pma_engine): Pma_node_graph; cdecl;
  ma_engine_get_resource_manager: function(pEngine: Pma_engine): Pma_resource_manager; cdecl;
  ma_engine_get_sample_rate: function(const pEngine: Pma_engine): ma_uint32; cdecl;
  ma_engine_get_time: function(const pEngine: Pma_engine): ma_uint64; cdecl;
  ma_engine_init: function(const pConfig: Pma_engine_config; pEngine: Pma_engine): ma_result; cdecl;
  ma_engine_listener_get_cone: procedure(const pEngine: Pma_engine; listenerIndex: ma_uint32; pInnerAngleInRadians: PSingle; pOuterAngleInRadians: PSingle; pOuterGain: PSingle); cdecl;
  ma_engine_listener_get_direction: function(const pEngine: Pma_engine; listenerIndex: ma_uint32): ma_vec3f; cdecl;
  ma_engine_listener_get_position: function(const pEngine: Pma_engine; listenerIndex: ma_uint32): ma_vec3f; cdecl;
  ma_engine_listener_get_velocity: function(const pEngine: Pma_engine; listenerIndex: ma_uint32): ma_vec3f; cdecl;
  ma_engine_listener_get_world_up: function(const pEngine: Pma_engine; listenerIndex: ma_uint32): ma_vec3f; cdecl;
  ma_engine_listener_is_enabled: function(const pEngine: Pma_engine; listenerIndex: ma_uint32): ma_bool32; cdecl;
  ma_engine_listener_set_cone: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; innerAngleInRadians: Single; outerAngleInRadians: Single; outerGain: Single); cdecl;
  ma_engine_listener_set_direction: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; x: Single; y: Single; z: Single); cdecl;
  ma_engine_listener_set_enabled: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; isEnabled: ma_bool32); cdecl;
  ma_engine_listener_set_position: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; x: Single; y: Single; z: Single); cdecl;
  ma_engine_listener_set_velocity: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; x: Single; y: Single; z: Single); cdecl;
  ma_engine_listener_set_world_up: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; x: Single; y: Single; z: Single); cdecl;
  ma_engine_node_config_init: function(pEngine: Pma_engine; _type: ma_engine_node_type; flags: ma_uint32): ma_engine_node_config; cdecl;
  ma_engine_node_get_heap_size: function(const pConfig: Pma_engine_node_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_engine_node_init: function(const pConfig: Pma_engine_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pEngineNode: Pma_engine_node): ma_result; cdecl;
  ma_engine_node_init_preallocated: function(const pConfig: Pma_engine_node_config; pHeap: Pointer; pEngineNode: Pma_engine_node): ma_result; cdecl;
  ma_engine_node_uninit: procedure(pEngineNode: Pma_engine_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_engine_play_sound: function(pEngine: Pma_engine; const pFilePath: PUTF8Char; pGroup: Pma_sound_group): ma_result; cdecl;
  ma_engine_read_pcm_frames: function(pEngine: Pma_engine; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_engine_set_gain_db: function(pEngine: Pma_engine; gainDB: Single): ma_result; cdecl;
  ma_engine_set_time: function(pEngine: Pma_engine; globalTime: ma_uint64): ma_result; cdecl;
  ma_engine_set_volume: function(pEngine: Pma_engine; volume: Single): ma_result; cdecl;
  ma_engine_start: function(pEngine: Pma_engine): ma_result; cdecl;
  ma_engine_stop: function(pEngine: Pma_engine): ma_result; cdecl;
  ma_engine_uninit: procedure(pEngine: Pma_engine); cdecl;
  ma_event_init: function(pEvent: Pma_event): ma_result; cdecl;
  ma_event_signal: function(pEvent: Pma_event): ma_result; cdecl;
  ma_event_uninit: procedure(pEvent: Pma_event); cdecl;
  ma_event_wait: function(pEvent: Pma_event): ma_result; cdecl;
  ma_fader_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32): ma_fader_config; cdecl;
  ma_fader_get_current_volume: function(pFader: Pma_fader): Single; cdecl;
  ma_fader_get_data_format: procedure(const pFader: Pma_fader; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32); cdecl;
  ma_fader_init: function(const pConfig: Pma_fader_config; pFader: Pma_fader): ma_result; cdecl;
  ma_fader_process_pcm_frames: function(pFader: Pma_fader; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_fader_set_fade: procedure(pFader: Pma_fader; volumeBeg: Single; volumeEnd: Single; lengthInFrames: ma_uint64); cdecl;
  ma_fence_acquire: function(pFence: Pma_fence): ma_result; cdecl;
  ma_fence_init: function(pFence: Pma_fence): ma_result; cdecl;
  ma_fence_release: function(pFence: Pma_fence): ma_result; cdecl;
  ma_fence_uninit: procedure(pFence: Pma_fence); cdecl;
  ma_fence_wait: function(pFence: Pma_fence): ma_result; cdecl;
  ma_free: procedure(p: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_gainer_config_init: function(channels: ma_uint32; smoothTimeInFrames: ma_uint32): ma_gainer_config; cdecl;
  ma_gainer_get_heap_size: function(const pConfig: Pma_gainer_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_gainer_init: function(const pConfig: Pma_gainer_config; const pAllocationCallbacks: Pma_allocation_callbacks; pGainer: Pma_gainer): ma_result; cdecl;
  ma_gainer_init_preallocated: function(const pConfig: Pma_gainer_config; pHeap: Pointer; pGainer: Pma_gainer): ma_result; cdecl;
  ma_gainer_process_pcm_frames: function(pGainer: Pma_gainer; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_gainer_set_gain: function(pGainer: Pma_gainer; newGain: Single): ma_result; cdecl;
  ma_gainer_set_gains: function(pGainer: Pma_gainer; pNewGains: PSingle): ma_result; cdecl;
  ma_gainer_uninit: procedure(pGainer: Pma_gainer; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_get_backend_name: function(backend: ma_backend): PUTF8Char; cdecl;
  ma_get_bytes_per_sample: function(format: ma_format): ma_uint32; cdecl;
  ma_get_enabled_backends: function(pBackends: Pma_backend; backendCap: NativeUInt; pBackendCount: PNativeUInt): ma_result; cdecl;
  ma_get_format_name: function(format: ma_format): PUTF8Char; cdecl;
  ma_hishelf_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; q: Double; frequency: Double): ma_hishelf_node_config; cdecl;
  ma_hishelf_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_hishelf_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_hishelf_node): ma_result; cdecl;
  ma_hishelf_node_reinit: function(const pConfig: Pma_hishelf_config; pNode: Pma_hishelf_node): ma_result; cdecl;
  ma_hishelf_node_uninit: procedure(pNode: Pma_hishelf_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_hishelf2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; shelfSlope: Double; frequency: Double): ma_hishelf2_config; cdecl;
  ma_hishelf2_get_heap_size: function(const pConfig: Pma_hishelf2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_hishelf2_get_latency: function(const pFilter: Pma_hishelf2): ma_uint32; cdecl;
  ma_hishelf2_init: function(const pConfig: Pma_hishelf2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pFilter: Pma_hishelf2): ma_result; cdecl;
  ma_hishelf2_init_preallocated: function(const pConfig: Pma_hishelf2_config; pHeap: Pointer; pFilter: Pma_hishelf2): ma_result; cdecl;
  ma_hishelf2_process_pcm_frames: function(pFilter: Pma_hishelf2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_hishelf2_reinit: function(const pConfig: Pma_hishelf2_config; pFilter: Pma_hishelf2): ma_result; cdecl;
  ma_hishelf2_uninit: procedure(pFilter: Pma_hishelf2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_hpf_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_hpf_config; cdecl;
  ma_hpf_get_heap_size: function(const pConfig: Pma_hpf_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_hpf_get_latency: function(const pHPF: Pma_hpf): ma_uint32; cdecl;
  ma_hpf_init: function(const pConfig: Pma_hpf_config; const pAllocationCallbacks: Pma_allocation_callbacks; pHPF: Pma_hpf): ma_result; cdecl;
  ma_hpf_init_preallocated: function(const pConfig: Pma_hpf_config; pHeap: Pointer; pLPF: Pma_hpf): ma_result; cdecl;
  ma_hpf_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_hpf_node_config; cdecl;
  ma_hpf_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_hpf_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_hpf_node): ma_result; cdecl;
  ma_hpf_node_reinit: function(const pConfig: Pma_hpf_config; pNode: Pma_hpf_node): ma_result; cdecl;
  ma_hpf_node_uninit: procedure(pNode: Pma_hpf_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_hpf_process_pcm_frames: function(pHPF: Pma_hpf; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_hpf_reinit: function(const pConfig: Pma_hpf_config; pHPF: Pma_hpf): ma_result; cdecl;
  ma_hpf_uninit: procedure(pHPF: Pma_hpf; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_hpf1_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double): ma_hpf1_config; cdecl;
  ma_hpf1_get_heap_size: function(const pConfig: Pma_hpf1_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_hpf1_get_latency: function(const pHPF: Pma_hpf1): ma_uint32; cdecl;
  ma_hpf1_init: function(const pConfig: Pma_hpf1_config; const pAllocationCallbacks: Pma_allocation_callbacks; pHPF: Pma_hpf1): ma_result; cdecl;
  ma_hpf1_init_preallocated: function(const pConfig: Pma_hpf1_config; pHeap: Pointer; pLPF: Pma_hpf1): ma_result; cdecl;
  ma_hpf1_process_pcm_frames: function(pHPF: Pma_hpf1; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_hpf1_reinit: function(const pConfig: Pma_hpf1_config; pHPF: Pma_hpf1): ma_result; cdecl;
  ma_hpf1_uninit: procedure(pHPF: Pma_hpf1; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_hpf2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; q: Double): ma_hpf2_config; cdecl;
  ma_hpf2_get_heap_size: function(const pConfig: Pma_hpf2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_hpf2_get_latency: function(const pHPF: Pma_hpf2): ma_uint32; cdecl;
  ma_hpf2_init: function(const pConfig: Pma_hpf2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pHPF: Pma_hpf2): ma_result; cdecl;
  ma_hpf2_init_preallocated: function(const pConfig: Pma_hpf2_config; pHeap: Pointer; pHPF: Pma_hpf2): ma_result; cdecl;
  ma_hpf2_process_pcm_frames: function(pHPF: Pma_hpf2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_hpf2_reinit: function(const pConfig: Pma_hpf2_config; pHPF: Pma_hpf2): ma_result; cdecl;
  ma_hpf2_uninit: procedure(pHPF: Pma_hpf2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_interleave_pcm_frames: procedure(format: ma_format; channels: ma_uint32; frameCount: ma_uint64; ppDeinterleavedPCMFrames: PPointer; pInterleavedPCMFrames: Pointer); cdecl;
  ma_is_backend_enabled: function(backend: ma_backend): ma_bool32; cdecl;
  ma_is_loopback_supported: function(backend: ma_backend): ma_bool32; cdecl;
  ma_job_init: function(code: ma_uint16): ma_job; cdecl;
  ma_job_process: function(pJob: Pma_job): ma_result; cdecl;
  ma_job_queue_config_init: function(flags: ma_uint32; capacity: ma_uint32): ma_job_queue_config; cdecl;
  ma_job_queue_get_heap_size: function(const pConfig: Pma_job_queue_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_job_queue_init: function(const pConfig: Pma_job_queue_config; const pAllocationCallbacks: Pma_allocation_callbacks; pQueue: Pma_job_queue): ma_result; cdecl;
  ma_job_queue_init_preallocated: function(const pConfig: Pma_job_queue_config; pHeap: Pointer; pQueue: Pma_job_queue): ma_result; cdecl;
  ma_job_queue_next: function(pQueue: Pma_job_queue; pJob: Pma_job): ma_result; cdecl;
  ma_job_queue_post: function(pQueue: Pma_job_queue; const pJob: Pma_job): ma_result; cdecl;
  ma_job_queue_uninit: procedure(pQueue: Pma_job_queue; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_linear_resampler_config_init: function(format: ma_format; channels: ma_uint32; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_linear_resampler_config; cdecl;
  ma_linear_resampler_get_expected_output_frame_count: function(const pResampler: Pma_linear_resampler; inputFrameCount: ma_uint64; pOutputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_linear_resampler_get_heap_size: function(const pConfig: Pma_linear_resampler_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_linear_resampler_get_input_latency: function(const pResampler: Pma_linear_resampler): ma_uint64; cdecl;
  ma_linear_resampler_get_output_latency: function(const pResampler: Pma_linear_resampler): ma_uint64; cdecl;
  ma_linear_resampler_get_required_input_frame_count: function(const pResampler: Pma_linear_resampler; outputFrameCount: ma_uint64; pInputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_linear_resampler_init: function(const pConfig: Pma_linear_resampler_config; const pAllocationCallbacks: Pma_allocation_callbacks; pResampler: Pma_linear_resampler): ma_result; cdecl;
  ma_linear_resampler_init_preallocated: function(const pConfig: Pma_linear_resampler_config; pHeap: Pointer; pResampler: Pma_linear_resampler): ma_result; cdecl;
  ma_linear_resampler_process_pcm_frames: function(pResampler: Pma_linear_resampler; const pFramesIn: Pointer; pFrameCountIn: Pma_uint64; pFramesOut: Pointer; pFrameCountOut: Pma_uint64): ma_result; cdecl;
  ma_linear_resampler_set_rate: function(pResampler: Pma_linear_resampler; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_result; cdecl;
  ma_linear_resampler_set_rate_ratio: function(pResampler: Pma_linear_resampler; ratioInOut: Single): ma_result; cdecl;
  ma_linear_resampler_uninit: procedure(pResampler: Pma_linear_resampler; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_log_callback_init: function(onLog: ma_log_callback_proc; pUserData: Pointer): ma_log_callback; cdecl;
  ma_log_init: function(const pAllocationCallbacks: Pma_allocation_callbacks; pLog: Pma_log): ma_result; cdecl;
  ma_log_level_to_string: function(logLevel: ma_uint32): PUTF8Char; cdecl;
  ma_log_post: function(pLog: Pma_log; level: ma_uint32; const pMessage: PUTF8Char): ma_result; cdecl;
  ma_log_postf: function(pLog: Pma_log; level: ma_uint32; const pFormat: PUTF8Char): ma_result varargs; cdecl;
  ma_log_postv: function(pLog: Pma_log; level: ma_uint32; const pFormat: PUTF8Char; args: Pointer): ma_result; cdecl;
  ma_log_register_callback: function(pLog: Pma_log; callback: ma_log_callback): ma_result; cdecl;
  ma_log_uninit: procedure(pLog: Pma_log); cdecl;
  ma_log_unregister_callback: function(pLog: Pma_log; callback: ma_log_callback): ma_result; cdecl;
  ma_loshelf_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; q: Double; frequency: Double): ma_loshelf_node_config; cdecl;
  ma_loshelf_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_loshelf_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_loshelf_node): ma_result; cdecl;
  ma_loshelf_node_reinit: function(const pConfig: Pma_loshelf_config; pNode: Pma_loshelf_node): ma_result; cdecl;
  ma_loshelf_node_uninit: procedure(pNode: Pma_loshelf_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_loshelf2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; shelfSlope: Double; frequency: Double): ma_loshelf2_config; cdecl;
  ma_loshelf2_get_heap_size: function(const pConfig: Pma_loshelf2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_loshelf2_get_latency: function(const pFilter: Pma_loshelf2): ma_uint32; cdecl;
  ma_loshelf2_init: function(const pConfig: Pma_loshelf2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pFilter: Pma_loshelf2): ma_result; cdecl;
  ma_loshelf2_init_preallocated: function(const pConfig: Pma_loshelf2_config; pHeap: Pointer; pFilter: Pma_loshelf2): ma_result; cdecl;
  ma_loshelf2_process_pcm_frames: function(pFilter: Pma_loshelf2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_loshelf2_reinit: function(const pConfig: Pma_loshelf2_config; pFilter: Pma_loshelf2): ma_result; cdecl;
  ma_loshelf2_uninit: procedure(pFilter: Pma_loshelf2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_lpf_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_lpf_config; cdecl;
  ma_lpf_get_heap_size: function(const pConfig: Pma_lpf_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_lpf_get_latency: function(const pLPF: Pma_lpf): ma_uint32; cdecl;
  ma_lpf_init: function(const pConfig: Pma_lpf_config; const pAllocationCallbacks: Pma_allocation_callbacks; pLPF: Pma_lpf): ma_result; cdecl;
  ma_lpf_init_preallocated: function(const pConfig: Pma_lpf_config; pHeap: Pointer; pLPF: Pma_lpf): ma_result; cdecl;
  ma_lpf_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_lpf_node_config; cdecl;
  ma_lpf_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_lpf_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_lpf_node): ma_result; cdecl;
  ma_lpf_node_reinit: function(const pConfig: Pma_lpf_config; pNode: Pma_lpf_node): ma_result; cdecl;
  ma_lpf_node_uninit: procedure(pNode: Pma_lpf_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_lpf_process_pcm_frames: function(pLPF: Pma_lpf; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_lpf_reinit: function(const pConfig: Pma_lpf_config; pLPF: Pma_lpf): ma_result; cdecl;
  ma_lpf_uninit: procedure(pLPF: Pma_lpf; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_lpf1_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double): ma_lpf1_config; cdecl;
  ma_lpf1_get_heap_size: function(const pConfig: Pma_lpf1_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_lpf1_get_latency: function(const pLPF: Pma_lpf1): ma_uint32; cdecl;
  ma_lpf1_init: function(const pConfig: Pma_lpf1_config; const pAllocationCallbacks: Pma_allocation_callbacks; pLPF: Pma_lpf1): ma_result; cdecl;
  ma_lpf1_init_preallocated: function(const pConfig: Pma_lpf1_config; pHeap: Pointer; pLPF: Pma_lpf1): ma_result; cdecl;
  ma_lpf1_process_pcm_frames: function(pLPF: Pma_lpf1; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_lpf1_reinit: function(const pConfig: Pma_lpf1_config; pLPF: Pma_lpf1): ma_result; cdecl;
  ma_lpf1_uninit: procedure(pLPF: Pma_lpf1; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_lpf2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; q: Double): ma_lpf2_config; cdecl;
  ma_lpf2_get_heap_size: function(const pConfig: Pma_lpf2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_lpf2_get_latency: function(const pLPF: Pma_lpf2): ma_uint32; cdecl;
  ma_lpf2_init: function(const pConfig: Pma_lpf2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pLPF: Pma_lpf2): ma_result; cdecl;
  ma_lpf2_init_preallocated: function(const pConfig: Pma_lpf2_config; pHeap: Pointer; pHPF: Pma_lpf2): ma_result; cdecl;
  ma_lpf2_process_pcm_frames: function(pLPF: Pma_lpf2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_lpf2_reinit: function(const pConfig: Pma_lpf2_config; pLPF: Pma_lpf2): ma_result; cdecl;
  ma_lpf2_uninit: procedure(pLPF: Pma_lpf2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_malloc: function(sz: NativeUInt; const pAllocationCallbacks: Pma_allocation_callbacks): Pointer; cdecl;
  ma_mutex_init: function(pMutex: Pma_mutex): ma_result; cdecl;
  ma_mutex_lock: procedure(pMutex: Pma_mutex); cdecl;
  ma_mutex_uninit: procedure(pMutex: Pma_mutex); cdecl;
  ma_mutex_unlock: procedure(pMutex: Pma_mutex); cdecl;
  ma_node_attach_output_bus: function(pNode: Pma_node; outputBusIndex: ma_uint32; pOtherNode: Pma_node; otherNodeInputBusIndex: ma_uint32): ma_result; cdecl;
  ma_node_config_init: function(): ma_node_config; cdecl;
  ma_node_detach_all_output_buses: function(pNode: Pma_node): ma_result; cdecl;
  ma_node_detach_output_bus: function(pNode: Pma_node; outputBusIndex: ma_uint32): ma_result; cdecl;
  ma_node_get_heap_size: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_node_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_node_get_input_bus_count: function(const pNode: Pma_node): ma_uint32; cdecl;
  ma_node_get_input_channels: function(const pNode: Pma_node; inputBusIndex: ma_uint32): ma_uint32; cdecl;
  ma_node_get_node_graph: function(const pNode: Pma_node): Pma_node_graph; cdecl;
  ma_node_get_output_bus_count: function(const pNode: Pma_node): ma_uint32; cdecl;
  ma_node_get_output_bus_volume: function(const pNode: Pma_node; outputBusIndex: ma_uint32): Single; cdecl;
  ma_node_get_output_channels: function(const pNode: Pma_node; outputBusIndex: ma_uint32): ma_uint32; cdecl;
  ma_node_get_state: function(const pNode: Pma_node): ma_node_state; cdecl;
  ma_node_get_state_by_time: function(const pNode: Pma_node; globalTime: ma_uint64): ma_node_state; cdecl;
  ma_node_get_state_by_time_range: function(const pNode: Pma_node; globalTimeBeg: ma_uint64; globalTimeEnd: ma_uint64): ma_node_state; cdecl;
  ma_node_get_state_time: function(const pNode: Pma_node; state: ma_node_state): ma_uint64; cdecl;
  ma_node_get_time: function(const pNode: Pma_node): ma_uint64; cdecl;
  ma_node_graph_config_init: function(channels: ma_uint32): ma_node_graph_config; cdecl;
  ma_node_graph_get_channels: function(const pNodeGraph: Pma_node_graph): ma_uint32; cdecl;
  ma_node_graph_get_endpoint: function(pNodeGraph: Pma_node_graph): Pma_node; cdecl;
  ma_node_graph_get_time: function(const pNodeGraph: Pma_node_graph): ma_uint64; cdecl;
  ma_node_graph_init: function(const pConfig: Pma_node_graph_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNodeGraph: Pma_node_graph): ma_result; cdecl;
  ma_node_graph_read_pcm_frames: function(pNodeGraph: Pma_node_graph; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_node_graph_set_time: function(pNodeGraph: Pma_node_graph; globalTime: ma_uint64): ma_result; cdecl;
  ma_node_graph_uninit: procedure(pNodeGraph: Pma_node_graph; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_node): ma_result; cdecl;
  ma_node_init_preallocated: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_node_config; pHeap: Pointer; pNode: Pma_node): ma_result; cdecl;
  ma_node_set_output_bus_volume: function(pNode: Pma_node; outputBusIndex: ma_uint32; volume: Single): ma_result; cdecl;
  ma_node_set_state: function(pNode: Pma_node; state: ma_node_state): ma_result; cdecl;
  ma_node_set_state_time: function(pNode: Pma_node; state: ma_node_state; globalTime: ma_uint64): ma_result; cdecl;
  ma_node_set_time: function(pNode: Pma_node; localTime: ma_uint64): ma_result; cdecl;
  ma_node_uninit: procedure(pNode: Pma_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_noise_config_init: function(format: ma_format; channels: ma_uint32; _type: ma_noise_type; seed: ma_int32; amplitude: Double): ma_noise_config; cdecl;
  ma_noise_get_heap_size: function(const pConfig: Pma_noise_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_noise_init: function(const pConfig: Pma_noise_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNoise: Pma_noise): ma_result; cdecl;
  ma_noise_init_preallocated: function(const pConfig: Pma_noise_config; pHeap: Pointer; pNoise: Pma_noise): ma_result; cdecl;
  ma_noise_read_pcm_frames: function(pNoise: Pma_noise; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_noise_set_amplitude: function(pNoise: Pma_noise; amplitude: Double): ma_result; cdecl;
  ma_noise_set_seed: function(pNoise: Pma_noise; seed: ma_int32): ma_result; cdecl;
  ma_noise_set_type: function(pNoise: Pma_noise; _type: ma_noise_type): ma_result; cdecl;
  ma_noise_uninit: procedure(pNoise: Pma_noise; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_notch_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; q: Double; frequency: Double): ma_notch_node_config; cdecl;
  ma_notch_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_notch_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_notch_node): ma_result; cdecl;
  ma_notch_node_reinit: function(const pConfig: Pma_notch_config; pNode: Pma_notch_node): ma_result; cdecl;
  ma_notch_node_uninit: procedure(pNode: Pma_notch_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_notch2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; q: Double; frequency: Double): ma_notch2_config; cdecl;
  ma_notch2_get_heap_size: function(const pConfig: Pma_notch2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_notch2_get_latency: function(const pFilter: Pma_notch2): ma_uint32; cdecl;
  ma_notch2_init: function(const pConfig: Pma_notch2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pFilter: Pma_notch2): ma_result; cdecl;
  ma_notch2_init_preallocated: function(const pConfig: Pma_notch2_config; pHeap: Pointer; pFilter: Pma_notch2): ma_result; cdecl;
  ma_notch2_process_pcm_frames: function(pFilter: Pma_notch2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_notch2_reinit: function(const pConfig: Pma_notch2_config; pFilter: Pma_notch2): ma_result; cdecl;
  ma_notch2_uninit: procedure(pFilter: Pma_notch2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_offset_pcm_frames_const_ptr: function(const p: Pointer; offsetInFrames: ma_uint64; format: ma_format; channels: ma_uint32): Pointer; cdecl;
  ma_offset_pcm_frames_ptr: function(p: Pointer; offsetInFrames: ma_uint64; format: ma_format; channels: ma_uint32): Pointer; cdecl;
  ma_paged_audio_buffer_config_init: function(pData: Pma_paged_audio_buffer_data): ma_paged_audio_buffer_config; cdecl;
  ma_paged_audio_buffer_data_allocate_and_append_page: function(pData: Pma_paged_audio_buffer_data; pageSizeInFrames: ma_uint32; const pInitialData: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks): ma_result; cdecl;
  ma_paged_audio_buffer_data_allocate_page: function(pData: Pma_paged_audio_buffer_data; pageSizeInFrames: ma_uint64; const pInitialData: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks; ppPage: PPma_paged_audio_buffer_page): ma_result; cdecl;
  ma_paged_audio_buffer_data_append_page: function(pData: Pma_paged_audio_buffer_data; pPage: Pma_paged_audio_buffer_page): ma_result; cdecl;
  ma_paged_audio_buffer_data_free_page: function(pData: Pma_paged_audio_buffer_data; pPage: Pma_paged_audio_buffer_page; const pAllocationCallbacks: Pma_allocation_callbacks): ma_result; cdecl;
  ma_paged_audio_buffer_data_get_head: function(pData: Pma_paged_audio_buffer_data): Pma_paged_audio_buffer_page; cdecl;
  ma_paged_audio_buffer_data_get_length_in_pcm_frames: function(pData: Pma_paged_audio_buffer_data; pLength: Pma_uint64): ma_result; cdecl;
  ma_paged_audio_buffer_data_get_tail: function(pData: Pma_paged_audio_buffer_data): Pma_paged_audio_buffer_page; cdecl;
  ma_paged_audio_buffer_data_init: function(format: ma_format; channels: ma_uint32; pData: Pma_paged_audio_buffer_data): ma_result; cdecl;
  ma_paged_audio_buffer_data_uninit: procedure(pData: Pma_paged_audio_buffer_data; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_paged_audio_buffer_get_cursor_in_pcm_frames: function(pPagedAudioBuffer: Pma_paged_audio_buffer; pCursor: Pma_uint64): ma_result; cdecl;
  ma_paged_audio_buffer_get_length_in_pcm_frames: function(pPagedAudioBuffer: Pma_paged_audio_buffer; pLength: Pma_uint64): ma_result; cdecl;
  ma_paged_audio_buffer_init: function(const pConfig: Pma_paged_audio_buffer_config; pPagedAudioBuffer: Pma_paged_audio_buffer): ma_result; cdecl;
  ma_paged_audio_buffer_read_pcm_frames: function(pPagedAudioBuffer: Pma_paged_audio_buffer; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_paged_audio_buffer_seek_to_pcm_frame: function(pPagedAudioBuffer: Pma_paged_audio_buffer; frameIndex: ma_uint64): ma_result; cdecl;
  ma_paged_audio_buffer_uninit: procedure(pPagedAudioBuffer: Pma_paged_audio_buffer); cdecl;
  ma_panner_config_init: function(format: ma_format; channels: ma_uint32): ma_panner_config; cdecl;
  ma_panner_get_mode: function(const pPanner: Pma_panner): ma_pan_mode; cdecl;
  ma_panner_get_pan: function(const pPanner: Pma_panner): Single; cdecl;
  ma_panner_init: function(const pConfig: Pma_panner_config; pPanner: Pma_panner): ma_result; cdecl;
  ma_panner_process_pcm_frames: function(pPanner: Pma_panner; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_panner_set_mode: procedure(pPanner: Pma_panner; mode: ma_pan_mode); cdecl;
  ma_panner_set_pan: procedure(pPanner: Pma_panner; pan: Single); cdecl;
  ma_pcm_convert: procedure(pOut: Pointer; formatOut: ma_format; const pIn: Pointer; formatIn: ma_format; sampleCount: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_f32_to_s16: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_f32_to_s24: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_f32_to_s32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_f32_to_u8: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_rb_acquire_read: function(pRB: Pma_pcm_rb; pSizeInFrames: Pma_uint32; ppBufferOut: PPointer): ma_result; cdecl;
  ma_pcm_rb_acquire_write: function(pRB: Pma_pcm_rb; pSizeInFrames: Pma_uint32; ppBufferOut: PPointer): ma_result; cdecl;
  ma_pcm_rb_available_read: function(pRB: Pma_pcm_rb): ma_uint32; cdecl;
  ma_pcm_rb_available_write: function(pRB: Pma_pcm_rb): ma_uint32; cdecl;
  ma_pcm_rb_commit_read: function(pRB: Pma_pcm_rb; sizeInFrames: ma_uint32): ma_result; cdecl;
  ma_pcm_rb_commit_write: function(pRB: Pma_pcm_rb; sizeInFrames: ma_uint32): ma_result; cdecl;
  ma_pcm_rb_get_subbuffer_offset: function(pRB: Pma_pcm_rb; subbufferIndex: ma_uint32): ma_uint32; cdecl;
  ma_pcm_rb_get_subbuffer_ptr: function(pRB: Pma_pcm_rb; subbufferIndex: ma_uint32; pBuffer: Pointer): Pointer; cdecl;
  ma_pcm_rb_get_subbuffer_size: function(pRB: Pma_pcm_rb): ma_uint32; cdecl;
  ma_pcm_rb_get_subbuffer_stride: function(pRB: Pma_pcm_rb): ma_uint32; cdecl;
  ma_pcm_rb_init: function(format: ma_format; channels: ma_uint32; bufferSizeInFrames: ma_uint32; pOptionalPreallocatedBuffer: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks; pRB: Pma_pcm_rb): ma_result; cdecl;
  ma_pcm_rb_init_ex: function(format: ma_format; channels: ma_uint32; subbufferSizeInFrames: ma_uint32; subbufferCount: ma_uint32; subbufferStrideInFrames: ma_uint32; pOptionalPreallocatedBuffer: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks; pRB: Pma_pcm_rb): ma_result; cdecl;
  ma_pcm_rb_pointer_distance: function(pRB: Pma_pcm_rb): ma_int32; cdecl;
  ma_pcm_rb_reset: procedure(pRB: Pma_pcm_rb); cdecl;
  ma_pcm_rb_seek_read: function(pRB: Pma_pcm_rb; offsetInFrames: ma_uint32): ma_result; cdecl;
  ma_pcm_rb_seek_write: function(pRB: Pma_pcm_rb; offsetInFrames: ma_uint32): ma_result; cdecl;
  ma_pcm_rb_uninit: procedure(pRB: Pma_pcm_rb); cdecl;
  ma_pcm_s16_to_f32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s16_to_s24: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s16_to_s32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s16_to_u8: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s24_to_f32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s24_to_s16: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s24_to_s32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s24_to_u8: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s32_to_f32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s32_to_s16: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s32_to_s24: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s32_to_u8: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_u8_to_f32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_u8_to_s16: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_u8_to_s24: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_u8_to_s32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_peak_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; q: Double; frequency: Double): ma_peak_node_config; cdecl;
  ma_peak_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_peak_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_peak_node): ma_result; cdecl;
  ma_peak_node_reinit: function(const pConfig: Pma_peak_config; pNode: Pma_peak_node): ma_result; cdecl;
  ma_peak_node_uninit: procedure(pNode: Pma_peak_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_peak2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; q: Double; frequency: Double): ma_peak2_config; cdecl;
  ma_peak2_get_heap_size: function(const pConfig: Pma_peak2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_peak2_get_latency: function(const pFilter: Pma_peak2): ma_uint32; cdecl;
  ma_peak2_init: function(const pConfig: Pma_peak2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pFilter: Pma_peak2): ma_result; cdecl;
  ma_peak2_init_preallocated: function(const pConfig: Pma_peak2_config; pHeap: Pointer; pFilter: Pma_peak2): ma_result; cdecl;
  ma_peak2_process_pcm_frames: function(pFilter: Pma_peak2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_peak2_reinit: function(const pConfig: Pma_peak2_config; pFilter: Pma_peak2): ma_result; cdecl;
  ma_peak2_uninit: procedure(pFilter: Pma_peak2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_rb_acquire_read: function(pRB: Pma_rb; pSizeInBytes: PNativeUInt; ppBufferOut: PPointer): ma_result; cdecl;
  ma_rb_acquire_write: function(pRB: Pma_rb; pSizeInBytes: PNativeUInt; ppBufferOut: PPointer): ma_result; cdecl;
  ma_rb_available_read: function(pRB: Pma_rb): ma_uint32; cdecl;
  ma_rb_available_write: function(pRB: Pma_rb): ma_uint32; cdecl;
  ma_rb_commit_read: function(pRB: Pma_rb; sizeInBytes: NativeUInt): ma_result; cdecl;
  ma_rb_commit_write: function(pRB: Pma_rb; sizeInBytes: NativeUInt): ma_result; cdecl;
  ma_rb_get_subbuffer_offset: function(pRB: Pma_rb; subbufferIndex: NativeUInt): NativeUInt; cdecl;
  ma_rb_get_subbuffer_ptr: function(pRB: Pma_rb; subbufferIndex: NativeUInt; pBuffer: Pointer): Pointer; cdecl;
  ma_rb_get_subbuffer_size: function(pRB: Pma_rb): NativeUInt; cdecl;
  ma_rb_get_subbuffer_stride: function(pRB: Pma_rb): NativeUInt; cdecl;
  ma_rb_init: function(bufferSizeInBytes: NativeUInt; pOptionalPreallocatedBuffer: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks; pRB: Pma_rb): ma_result; cdecl;
  ma_rb_init_ex: function(subbufferSizeInBytes: NativeUInt; subbufferCount: NativeUInt; subbufferStrideInBytes: NativeUInt; pOptionalPreallocatedBuffer: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks; pRB: Pma_rb): ma_result; cdecl;
  ma_rb_pointer_distance: function(pRB: Pma_rb): ma_int32; cdecl;
  ma_rb_reset: procedure(pRB: Pma_rb); cdecl;
  ma_rb_seek_read: function(pRB: Pma_rb; offsetInBytes: NativeUInt): ma_result; cdecl;
  ma_rb_seek_write: function(pRB: Pma_rb; offsetInBytes: NativeUInt): ma_result; cdecl;
  ma_rb_uninit: procedure(pRB: Pma_rb); cdecl;
  ma_realloc: function(p: Pointer; sz: NativeUInt; const pAllocationCallbacks: Pma_allocation_callbacks): Pointer; cdecl;
  ma_resampler_config_init: function(format: ma_format; channels: ma_uint32; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32; algorithm: ma_resample_algorithm): ma_resampler_config; cdecl;
  ma_resampler_get_expected_output_frame_count: function(const pResampler: Pma_resampler; inputFrameCount: ma_uint64; pOutputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_resampler_get_heap_size: function(const pConfig: Pma_resampler_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_resampler_get_input_latency: function(const pResampler: Pma_resampler): ma_uint64; cdecl;
  ma_resampler_get_output_latency: function(const pResampler: Pma_resampler): ma_uint64; cdecl;
  ma_resampler_get_required_input_frame_count: function(const pResampler: Pma_resampler; outputFrameCount: ma_uint64; pInputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_resampler_init: function(const pConfig: Pma_resampler_config; const pAllocationCallbacks: Pma_allocation_callbacks; pResampler: Pma_resampler): ma_result; cdecl;
  ma_resampler_init_preallocated: function(const pConfig: Pma_resampler_config; pHeap: Pointer; pResampler: Pma_resampler): ma_result; cdecl;
  ma_resampler_process_pcm_frames: function(pResampler: Pma_resampler; const pFramesIn: Pointer; pFrameCountIn: Pma_uint64; pFramesOut: Pointer; pFrameCountOut: Pma_uint64): ma_result; cdecl;
  ma_resampler_set_rate: function(pResampler: Pma_resampler; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_result; cdecl;
  ma_resampler_set_rate_ratio: function(pResampler: Pma_resampler; ratio: Single): ma_result; cdecl;
  ma_resampler_uninit: procedure(pResampler: Pma_resampler; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_resource_manager_config_init: function(): ma_resource_manager_config; cdecl;
  ma_resource_manager_data_buffer_get_available_frames: function(pDataBuffer: Pma_resource_manager_data_buffer; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_buffer_get_cursor_in_pcm_frames: function(pDataBuffer: Pma_resource_manager_data_buffer; pCursor: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_buffer_get_data_format: function(pDataBuffer: Pma_resource_manager_data_buffer; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_resource_manager_data_buffer_get_length_in_pcm_frames: function(pDataBuffer: Pma_resource_manager_data_buffer; pLength: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_buffer_init: function(pResourceManager: Pma_resource_manager; const pFilePath: PUTF8Char; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_buffer_init_copy: function(pResourceManager: Pma_resource_manager; const pExistingDataBuffer: Pma_resource_manager_data_buffer; pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_buffer_init_ex: function(pResourceManager: Pma_resource_manager; const pConfig: Pma_resource_manager_data_source_config; pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_buffer_init_w: function(pResourceManager: Pma_resource_manager; const pFilePath: PWideChar; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_buffer_is_looping: function(const pDataBuffer: Pma_resource_manager_data_buffer): ma_bool32; cdecl;
  ma_resource_manager_data_buffer_read_pcm_frames: function(pDataBuffer: Pma_resource_manager_data_buffer; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_buffer_result: function(const pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_buffer_seek_to_pcm_frame: function(pDataBuffer: Pma_resource_manager_data_buffer; frameIndex: ma_uint64): ma_result; cdecl;
  ma_resource_manager_data_buffer_set_looping: function(pDataBuffer: Pma_resource_manager_data_buffer; isLooping: ma_bool32): ma_result; cdecl;
  ma_resource_manager_data_buffer_uninit: function(pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_source_config_init: function(): ma_resource_manager_data_source_config; cdecl;
  ma_resource_manager_data_source_get_available_frames: function(pDataSource: Pma_resource_manager_data_source; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_source_get_cursor_in_pcm_frames: function(pDataSource: Pma_resource_manager_data_source; pCursor: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_source_get_data_format: function(pDataSource: Pma_resource_manager_data_source; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_resource_manager_data_source_get_length_in_pcm_frames: function(pDataSource: Pma_resource_manager_data_source; pLength: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_source_init: function(pResourceManager: Pma_resource_manager; const pName: PUTF8Char; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_source_init_copy: function(pResourceManager: Pma_resource_manager; const pExistingDataSource: Pma_resource_manager_data_source; pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_source_init_ex: function(pResourceManager: Pma_resource_manager; const pConfig: Pma_resource_manager_data_source_config; pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_source_init_w: function(pResourceManager: Pma_resource_manager; const pName: PWideChar; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_source_is_looping: function(const pDataSource: Pma_resource_manager_data_source): ma_bool32; cdecl;
  ma_resource_manager_data_source_read_pcm_frames: function(pDataSource: Pma_resource_manager_data_source; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_source_result: function(const pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_source_seek_to_pcm_frame: function(pDataSource: Pma_resource_manager_data_source; frameIndex: ma_uint64): ma_result; cdecl;
  ma_resource_manager_data_source_set_looping: function(pDataSource: Pma_resource_manager_data_source; isLooping: ma_bool32): ma_result; cdecl;
  ma_resource_manager_data_source_uninit: function(pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_stream_get_available_frames: function(pDataStream: Pma_resource_manager_data_stream; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_stream_get_cursor_in_pcm_frames: function(pDataStream: Pma_resource_manager_data_stream; pCursor: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_stream_get_data_format: function(pDataStream: Pma_resource_manager_data_stream; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_resource_manager_data_stream_get_length_in_pcm_frames: function(pDataStream: Pma_resource_manager_data_stream; pLength: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_stream_init: function(pResourceManager: Pma_resource_manager; const pFilePath: PUTF8Char; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataStream: Pma_resource_manager_data_stream): ma_result; cdecl;
  ma_resource_manager_data_stream_init_ex: function(pResourceManager: Pma_resource_manager; const pConfig: Pma_resource_manager_data_source_config; pDataStream: Pma_resource_manager_data_stream): ma_result; cdecl;
  ma_resource_manager_data_stream_init_w: function(pResourceManager: Pma_resource_manager; const pFilePath: PWideChar; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataStream: Pma_resource_manager_data_stream): ma_result; cdecl;
  ma_resource_manager_data_stream_is_looping: function(const pDataStream: Pma_resource_manager_data_stream): ma_bool32; cdecl;
  ma_resource_manager_data_stream_read_pcm_frames: function(pDataStream: Pma_resource_manager_data_stream; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_stream_result: function(const pDataStream: Pma_resource_manager_data_stream): ma_result; cdecl;
  ma_resource_manager_data_stream_seek_to_pcm_frame: function(pDataStream: Pma_resource_manager_data_stream; frameIndex: ma_uint64): ma_result; cdecl;
  ma_resource_manager_data_stream_set_looping: function(pDataStream: Pma_resource_manager_data_stream; isLooping: ma_bool32): ma_result; cdecl;
  ma_resource_manager_data_stream_uninit: function(pDataStream: Pma_resource_manager_data_stream): ma_result; cdecl;
  ma_resource_manager_get_log: function(pResourceManager: Pma_resource_manager): Pma_log; cdecl;
  ma_resource_manager_init: function(const pConfig: Pma_resource_manager_config; pResourceManager: Pma_resource_manager): ma_result; cdecl;
  ma_resource_manager_next_job: function(pResourceManager: Pma_resource_manager; pJob: Pma_job): ma_result; cdecl;
  ma_resource_manager_pipeline_notifications_init: function(): ma_resource_manager_pipeline_notifications; cdecl;
  ma_resource_manager_post_job: function(pResourceManager: Pma_resource_manager; const pJob: Pma_job): ma_result; cdecl;
  ma_resource_manager_post_job_quit: function(pResourceManager: Pma_resource_manager): ma_result; cdecl;
  ma_resource_manager_process_job: function(pResourceManager: Pma_resource_manager; pJob: Pma_job): ma_result; cdecl;
  ma_resource_manager_process_next_job: function(pResourceManager: Pma_resource_manager): ma_result; cdecl;
  ma_resource_manager_register_decoded_data: function(pResourceManager: Pma_resource_manager; const pName: PUTF8Char; const pData: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32; sampleRate: ma_uint32): ma_result; cdecl;
  ma_resource_manager_register_decoded_data_w: function(pResourceManager: Pma_resource_manager; const pName: PWideChar; const pData: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32; sampleRate: ma_uint32): ma_result; cdecl;
  ma_resource_manager_register_encoded_data: function(pResourceManager: Pma_resource_manager; const pName: PUTF8Char; const pData: Pointer; sizeInBytes: NativeUInt): ma_result; cdecl;
  ma_resource_manager_register_encoded_data_w: function(pResourceManager: Pma_resource_manager; const pName: PWideChar; const pData: Pointer; sizeInBytes: NativeUInt): ma_result; cdecl;
  ma_resource_manager_register_file: function(pResourceManager: Pma_resource_manager; const pFilePath: PUTF8Char; flags: ma_uint32): ma_result; cdecl;
  ma_resource_manager_register_file_w: function(pResourceManager: Pma_resource_manager; const pFilePath: PWideChar; flags: ma_uint32): ma_result; cdecl;
  ma_resource_manager_uninit: procedure(pResourceManager: Pma_resource_manager); cdecl;
  ma_resource_manager_unregister_data: function(pResourceManager: Pma_resource_manager; const pName: PUTF8Char): ma_result; cdecl;
  ma_resource_manager_unregister_data_w: function(pResourceManager: Pma_resource_manager; const pName: PWideChar): ma_result; cdecl;
  ma_resource_manager_unregister_file: function(pResourceManager: Pma_resource_manager; const pFilePath: PUTF8Char): ma_result; cdecl;
  ma_resource_manager_unregister_file_w: function(pResourceManager: Pma_resource_manager; const pFilePath: PWideChar): ma_result; cdecl;
  ma_result_description: function(result: ma_result): PUTF8Char; cdecl;
  ma_silence_pcm_frames: procedure(p: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32); cdecl;
  ma_slot_allocator_alloc: function(pAllocator: Pma_slot_allocator; pSlot: Pma_uint64): ma_result; cdecl;
  ma_slot_allocator_config_init: function(capacity: ma_uint32): ma_slot_allocator_config; cdecl;
  ma_slot_allocator_free: function(pAllocator: Pma_slot_allocator; slot: ma_uint64): ma_result; cdecl;
  ma_slot_allocator_get_heap_size: function(const pConfig: Pma_slot_allocator_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_slot_allocator_init: function(const pConfig: Pma_slot_allocator_config; const pAllocationCallbacks: Pma_allocation_callbacks; pAllocator: Pma_slot_allocator): ma_result; cdecl;
  ma_slot_allocator_init_preallocated: function(const pConfig: Pma_slot_allocator_config; pHeap: Pointer; pAllocator: Pma_slot_allocator): ma_result; cdecl;
  ma_slot_allocator_uninit: procedure(pAllocator: Pma_slot_allocator; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_sound_at_end: function(const pSound: Pma_sound): ma_bool32; cdecl;
  ma_sound_config_init: function(): ma_sound_config; cdecl;
  ma_sound_get_attenuation_model: function(const pSound: Pma_sound): ma_attenuation_model; cdecl;
  ma_sound_get_cone: procedure(const pSound: Pma_sound; pInnerAngleInRadians: PSingle; pOuterAngleInRadians: PSingle; pOuterGain: PSingle); cdecl;
  ma_sound_get_current_fade_volume: function(pSound: Pma_sound): Single; cdecl;
  ma_sound_get_cursor_in_pcm_frames: function(pSound: Pma_sound; pCursor: Pma_uint64): ma_result; cdecl;
  ma_sound_get_data_format: function(pSound: Pma_sound; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_sound_get_data_source: function(const pSound: Pma_sound): Pma_data_source; cdecl;
  ma_sound_get_direction: function(const pSound: Pma_sound): ma_vec3f; cdecl;
  ma_sound_get_direction_to_listener: function(const pSound: Pma_sound): ma_vec3f; cdecl;
  ma_sound_get_directional_attenuation_factor: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_doppler_factor: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_engine: function(const pSound: Pma_sound): Pma_engine; cdecl;
  ma_sound_get_length_in_pcm_frames: function(pSound: Pma_sound; pLength: Pma_uint64): ma_result; cdecl;
  ma_sound_get_listener_index: function(const pSound: Pma_sound): ma_uint32; cdecl;
  ma_sound_get_max_distance: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_max_gain: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_min_distance: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_min_gain: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_pan: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_pan_mode: function(const pSound: Pma_sound): ma_pan_mode; cdecl;
  ma_sound_get_pinned_listener_index: function(const pSound: Pma_sound): ma_uint32; cdecl;
  ma_sound_get_pitch: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_position: function(const pSound: Pma_sound): ma_vec3f; cdecl;
  ma_sound_get_positioning: function(const pSound: Pma_sound): ma_positioning; cdecl;
  ma_sound_get_rolloff: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_time_in_pcm_frames: function(const pSound: Pma_sound): ma_uint64; cdecl;
  ma_sound_get_velocity: function(const pSound: Pma_sound): ma_vec3f; cdecl;
  ma_sound_get_volume: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_group_config_init: function(): ma_sound_group_config; cdecl;
  ma_sound_group_get_attenuation_model: function(const pGroup: Pma_sound_group): ma_attenuation_model; cdecl;
  ma_sound_group_get_cone: procedure(const pGroup: Pma_sound_group; pInnerAngleInRadians: PSingle; pOuterAngleInRadians: PSingle; pOuterGain: PSingle); cdecl;
  ma_sound_group_get_current_fade_volume: function(pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_direction: function(const pGroup: Pma_sound_group): ma_vec3f; cdecl;
  ma_sound_group_get_direction_to_listener: function(const pGroup: Pma_sound_group): ma_vec3f; cdecl;
  ma_sound_group_get_directional_attenuation_factor: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_doppler_factor: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_engine: function(const pGroup: Pma_sound_group): Pma_engine; cdecl;
  ma_sound_group_get_listener_index: function(const pGroup: Pma_sound_group): ma_uint32; cdecl;
  ma_sound_group_get_max_distance: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_max_gain: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_min_distance: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_min_gain: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_pan: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_pan_mode: function(const pGroup: Pma_sound_group): ma_pan_mode; cdecl;
  ma_sound_group_get_pinned_listener_index: function(const pGroup: Pma_sound_group): ma_uint32; cdecl;
  ma_sound_group_get_pitch: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_position: function(const pGroup: Pma_sound_group): ma_vec3f; cdecl;
  ma_sound_group_get_positioning: function(const pGroup: Pma_sound_group): ma_positioning; cdecl;
  ma_sound_group_get_rolloff: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_time_in_pcm_frames: function(const pGroup: Pma_sound_group): ma_uint64; cdecl;
  ma_sound_group_get_velocity: function(const pGroup: Pma_sound_group): ma_vec3f; cdecl;
  ma_sound_group_get_volume: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_init: function(pEngine: Pma_engine; flags: ma_uint32; pParentGroup: Pma_sound_group; pGroup: Pma_sound_group): ma_result; cdecl;
  ma_sound_group_init_ex: function(pEngine: Pma_engine; const pConfig: Pma_sound_group_config; pGroup: Pma_sound_group): ma_result; cdecl;
  ma_sound_group_is_playing: function(const pGroup: Pma_sound_group): ma_bool32; cdecl;
  ma_sound_group_is_spatialization_enabled: function(const pGroup: Pma_sound_group): ma_bool32; cdecl;
  ma_sound_group_set_attenuation_model: procedure(pGroup: Pma_sound_group; attenuationModel: ma_attenuation_model); cdecl;
  ma_sound_group_set_cone: procedure(pGroup: Pma_sound_group; innerAngleInRadians: Single; outerAngleInRadians: Single; outerGain: Single); cdecl;
  ma_sound_group_set_direction: procedure(pGroup: Pma_sound_group; x: Single; y: Single; z: Single); cdecl;
  ma_sound_group_set_directional_attenuation_factor: procedure(pGroup: Pma_sound_group; directionalAttenuationFactor: Single); cdecl;
  ma_sound_group_set_doppler_factor: procedure(pGroup: Pma_sound_group; dopplerFactor: Single); cdecl;
  ma_sound_group_set_fade_in_milliseconds: procedure(pGroup: Pma_sound_group; volumeBeg: Single; volumeEnd: Single; fadeLengthInMilliseconds: ma_uint64); cdecl;
  ma_sound_group_set_fade_in_pcm_frames: procedure(pGroup: Pma_sound_group; volumeBeg: Single; volumeEnd: Single; fadeLengthInFrames: ma_uint64); cdecl;
  ma_sound_group_set_max_distance: procedure(pGroup: Pma_sound_group; maxDistance: Single); cdecl;
  ma_sound_group_set_max_gain: procedure(pGroup: Pma_sound_group; maxGain: Single); cdecl;
  ma_sound_group_set_min_distance: procedure(pGroup: Pma_sound_group; minDistance: Single); cdecl;
  ma_sound_group_set_min_gain: procedure(pGroup: Pma_sound_group; minGain: Single); cdecl;
  ma_sound_group_set_pan: procedure(pGroup: Pma_sound_group; pan: Single); cdecl;
  ma_sound_group_set_pan_mode: procedure(pGroup: Pma_sound_group; panMode: ma_pan_mode); cdecl;
  ma_sound_group_set_pinned_listener_index: procedure(pGroup: Pma_sound_group; listenerIndex: ma_uint32); cdecl;
  ma_sound_group_set_pitch: procedure(pGroup: Pma_sound_group; pitch: Single); cdecl;
  ma_sound_group_set_position: procedure(pGroup: Pma_sound_group; x: Single; y: Single; z: Single); cdecl;
  ma_sound_group_set_positioning: procedure(pGroup: Pma_sound_group; positioning: ma_positioning); cdecl;
  ma_sound_group_set_rolloff: procedure(pGroup: Pma_sound_group; rolloff: Single); cdecl;
  ma_sound_group_set_spatialization_enabled: procedure(pGroup: Pma_sound_group; enabled: ma_bool32); cdecl;
  ma_sound_group_set_start_time_in_milliseconds: procedure(pGroup: Pma_sound_group; absoluteGlobalTimeInMilliseconds: ma_uint64); cdecl;
  ma_sound_group_set_start_time_in_pcm_frames: procedure(pGroup: Pma_sound_group; absoluteGlobalTimeInFrames: ma_uint64); cdecl;
  ma_sound_group_set_stop_time_in_milliseconds: procedure(pGroup: Pma_sound_group; absoluteGlobalTimeInMilliseconds: ma_uint64); cdecl;
  ma_sound_group_set_stop_time_in_pcm_frames: procedure(pGroup: Pma_sound_group; absoluteGlobalTimeInFrames: ma_uint64); cdecl;
  ma_sound_group_set_velocity: procedure(pGroup: Pma_sound_group; x: Single; y: Single; z: Single); cdecl;
  ma_sound_group_set_volume: procedure(pGroup: Pma_sound_group; volume: Single); cdecl;
  ma_sound_group_start: function(pGroup: Pma_sound_group): ma_result; cdecl;
  ma_sound_group_stop: function(pGroup: Pma_sound_group): ma_result; cdecl;
  ma_sound_group_uninit: procedure(pGroup: Pma_sound_group); cdecl;
  ma_sound_init_copy: function(pEngine: Pma_engine; const pExistingSound: Pma_sound; flags: ma_uint32; pGroup: Pma_sound_group; pSound: Pma_sound): ma_result; cdecl;
  ma_sound_init_ex: function(pEngine: Pma_engine; const pConfig: Pma_sound_config; pSound: Pma_sound): ma_result; cdecl;
  ma_sound_init_from_data_source: function(pEngine: Pma_engine; pDataSource: Pma_data_source; flags: ma_uint32; pGroup: Pma_sound_group; pSound: Pma_sound): ma_result; cdecl;
  ma_sound_init_from_file: function(pEngine: Pma_engine; const pFilePath: PUTF8Char; flags: ma_uint32; pGroup: Pma_sound_group; pDoneFence: Pma_fence; pSound: Pma_sound): ma_result; cdecl;
  ma_sound_init_from_file_w: function(pEngine: Pma_engine; const pFilePath: PWideChar; flags: ma_uint32; pGroup: Pma_sound_group; pDoneFence: Pma_fence; pSound: Pma_sound): ma_result; cdecl;
  ma_sound_is_looping: function(const pSound: Pma_sound): ma_bool32; cdecl;
  ma_sound_is_playing: function(const pSound: Pma_sound): ma_bool32; cdecl;
  ma_sound_is_spatialization_enabled: function(const pSound: Pma_sound): ma_bool32; cdecl;
  ma_sound_seek_to_pcm_frame: function(pSound: Pma_sound; frameIndex: ma_uint64): ma_result; cdecl;
  ma_sound_set_attenuation_model: procedure(pSound: Pma_sound; attenuationModel: ma_attenuation_model); cdecl;
  ma_sound_set_cone: procedure(pSound: Pma_sound; innerAngleInRadians: Single; outerAngleInRadians: Single; outerGain: Single); cdecl;
  ma_sound_set_direction: procedure(pSound: Pma_sound; x: Single; y: Single; z: Single); cdecl;
  ma_sound_set_directional_attenuation_factor: procedure(pSound: Pma_sound; directionalAttenuationFactor: Single); cdecl;
  ma_sound_set_doppler_factor: procedure(pSound: Pma_sound; dopplerFactor: Single); cdecl;
  ma_sound_set_fade_in_milliseconds: procedure(pSound: Pma_sound; volumeBeg: Single; volumeEnd: Single; fadeLengthInMilliseconds: ma_uint64); cdecl;
  ma_sound_set_fade_in_pcm_frames: procedure(pSound: Pma_sound; volumeBeg: Single; volumeEnd: Single; fadeLengthInFrames: ma_uint64); cdecl;
  ma_sound_set_looping: procedure(pSound: Pma_sound; isLooping: ma_bool32); cdecl;
  ma_sound_set_max_distance: procedure(pSound: Pma_sound; maxDistance: Single); cdecl;
  ma_sound_set_max_gain: procedure(pSound: Pma_sound; maxGain: Single); cdecl;
  ma_sound_set_min_distance: procedure(pSound: Pma_sound; minDistance: Single); cdecl;
  ma_sound_set_min_gain: procedure(pSound: Pma_sound; minGain: Single); cdecl;
  ma_sound_set_pan: procedure(pSound: Pma_sound; pan: Single); cdecl;
  ma_sound_set_pan_mode: procedure(pSound: Pma_sound; panMode: ma_pan_mode); cdecl;
  ma_sound_set_pinned_listener_index: procedure(pSound: Pma_sound; listenerIndex: ma_uint32); cdecl;
  ma_sound_set_pitch: procedure(pSound: Pma_sound; pitch: Single); cdecl;
  ma_sound_set_position: procedure(pSound: Pma_sound; x: Single; y: Single; z: Single); cdecl;
  ma_sound_set_positioning: procedure(pSound: Pma_sound; positioning: ma_positioning); cdecl;
  ma_sound_set_rolloff: procedure(pSound: Pma_sound; rolloff: Single); cdecl;
  ma_sound_set_spatialization_enabled: procedure(pSound: Pma_sound; enabled: ma_bool32); cdecl;
  ma_sound_set_start_time_in_milliseconds: procedure(pSound: Pma_sound; absoluteGlobalTimeInMilliseconds: ma_uint64); cdecl;
  ma_sound_set_start_time_in_pcm_frames: procedure(pSound: Pma_sound; absoluteGlobalTimeInFrames: ma_uint64); cdecl;
  ma_sound_set_stop_time_in_milliseconds: procedure(pSound: Pma_sound; absoluteGlobalTimeInMilliseconds: ma_uint64); cdecl;
  ma_sound_set_stop_time_in_pcm_frames: procedure(pSound: Pma_sound; absoluteGlobalTimeInFrames: ma_uint64); cdecl;
  ma_sound_set_velocity: procedure(pSound: Pma_sound; x: Single; y: Single; z: Single); cdecl;
  ma_sound_set_volume: procedure(pSound: Pma_sound; volume: Single); cdecl;
  ma_sound_start: function(pSound: Pma_sound): ma_result; cdecl;
  ma_sound_stop: function(pSound: Pma_sound): ma_result; cdecl;
  ma_sound_uninit: procedure(pSound: Pma_sound); cdecl;
  ma_spatializer_config_init: function(channelsIn: ma_uint32; channelsOut: ma_uint32): ma_spatializer_config; cdecl;
  ma_spatializer_get_attenuation_model: function(const pSpatializer: Pma_spatializer): ma_attenuation_model; cdecl;
  ma_spatializer_get_cone: procedure(const pSpatializer: Pma_spatializer; pInnerAngleInRadians: PSingle; pOuterAngleInRadians: PSingle; pOuterGain: PSingle); cdecl;
  ma_spatializer_get_direction: function(const pSpatializer: Pma_spatializer): ma_vec3f; cdecl;
  ma_spatializer_get_directional_attenuation_factor: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_doppler_factor: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_heap_size: function(const pConfig: Pma_spatializer_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_spatializer_get_input_channels: function(const pSpatializer: Pma_spatializer): ma_uint32; cdecl;
  ma_spatializer_get_max_distance: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_max_gain: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_min_distance: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_min_gain: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_output_channels: function(const pSpatializer: Pma_spatializer): ma_uint32; cdecl;
  ma_spatializer_get_position: function(const pSpatializer: Pma_spatializer): ma_vec3f; cdecl;
  ma_spatializer_get_positioning: function(const pSpatializer: Pma_spatializer): ma_positioning; cdecl;
  ma_spatializer_get_relative_position_and_direction: procedure(const pSpatializer: Pma_spatializer; const pListener: Pma_spatializer_listener; pRelativePos: Pma_vec3f; pRelativeDir: Pma_vec3f); cdecl;
  ma_spatializer_get_rolloff: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_velocity: function(const pSpatializer: Pma_spatializer): ma_vec3f; cdecl;
  ma_spatializer_init: function(const pConfig: Pma_spatializer_config; const pAllocationCallbacks: Pma_allocation_callbacks; pSpatializer: Pma_spatializer): ma_result; cdecl;
  ma_spatializer_init_preallocated: function(const pConfig: Pma_spatializer_config; pHeap: Pointer; pSpatializer: Pma_spatializer): ma_result; cdecl;
  ma_spatializer_listener_config_init: function(channelsOut: ma_uint32): ma_spatializer_listener_config; cdecl;
  ma_spatializer_listener_get_channel_map: function(pListener: Pma_spatializer_listener): Pma_channel; cdecl;
  ma_spatializer_listener_get_cone: procedure(const pListener: Pma_spatializer_listener; pInnerAngleInRadians: PSingle; pOuterAngleInRadians: PSingle; pOuterGain: PSingle); cdecl;
  ma_spatializer_listener_get_direction: function(const pListener: Pma_spatializer_listener): ma_vec3f; cdecl;
  ma_spatializer_listener_get_heap_size: function(const pConfig: Pma_spatializer_listener_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_spatializer_listener_get_position: function(const pListener: Pma_spatializer_listener): ma_vec3f; cdecl;
  ma_spatializer_listener_get_speed_of_sound: function(const pListener: Pma_spatializer_listener): Single; cdecl;
  ma_spatializer_listener_get_velocity: function(const pListener: Pma_spatializer_listener): ma_vec3f; cdecl;
  ma_spatializer_listener_get_world_up: function(const pListener: Pma_spatializer_listener): ma_vec3f; cdecl;
  ma_spatializer_listener_init: function(const pConfig: Pma_spatializer_listener_config; const pAllocationCallbacks: Pma_allocation_callbacks; pListener: Pma_spatializer_listener): ma_result; cdecl;
  ma_spatializer_listener_init_preallocated: function(const pConfig: Pma_spatializer_listener_config; pHeap: Pointer; pListener: Pma_spatializer_listener): ma_result; cdecl;
  ma_spatializer_listener_is_enabled: function(const pListener: Pma_spatializer_listener): ma_bool32; cdecl;
  ma_spatializer_listener_set_cone: procedure(pListener: Pma_spatializer_listener; innerAngleInRadians: Single; outerAngleInRadians: Single; outerGain: Single); cdecl;
  ma_spatializer_listener_set_direction: procedure(pListener: Pma_spatializer_listener; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_listener_set_enabled: procedure(pListener: Pma_spatializer_listener; isEnabled: ma_bool32); cdecl;
  ma_spatializer_listener_set_position: procedure(pListener: Pma_spatializer_listener; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_listener_set_speed_of_sound: procedure(pListener: Pma_spatializer_listener; speedOfSound: Single); cdecl;
  ma_spatializer_listener_set_velocity: procedure(pListener: Pma_spatializer_listener; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_listener_set_world_up: procedure(pListener: Pma_spatializer_listener; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_listener_uninit: procedure(pListener: Pma_spatializer_listener; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_spatializer_process_pcm_frames: function(pSpatializer: Pma_spatializer; pListener: Pma_spatializer_listener; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_spatializer_set_attenuation_model: procedure(pSpatializer: Pma_spatializer; attenuationModel: ma_attenuation_model); cdecl;
  ma_spatializer_set_cone: procedure(pSpatializer: Pma_spatializer; innerAngleInRadians: Single; outerAngleInRadians: Single; outerGain: Single); cdecl;
  ma_spatializer_set_direction: procedure(pSpatializer: Pma_spatializer; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_set_directional_attenuation_factor: procedure(pSpatializer: Pma_spatializer; directionalAttenuationFactor: Single); cdecl;
  ma_spatializer_set_doppler_factor: procedure(pSpatializer: Pma_spatializer; dopplerFactor: Single); cdecl;
  ma_spatializer_set_max_distance: procedure(pSpatializer: Pma_spatializer; maxDistance: Single); cdecl;
  ma_spatializer_set_max_gain: procedure(pSpatializer: Pma_spatializer; maxGain: Single); cdecl;
  ma_spatializer_set_min_distance: procedure(pSpatializer: Pma_spatializer; minDistance: Single); cdecl;
  ma_spatializer_set_min_gain: procedure(pSpatializer: Pma_spatializer; minGain: Single); cdecl;
  ma_spatializer_set_position: procedure(pSpatializer: Pma_spatializer; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_set_positioning: procedure(pSpatializer: Pma_spatializer; positioning: ma_positioning); cdecl;
  ma_spatializer_set_rolloff: procedure(pSpatializer: Pma_spatializer; rolloff: Single); cdecl;
  ma_spatializer_set_velocity: procedure(pSpatializer: Pma_spatializer; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_uninit: procedure(pSpatializer: Pma_spatializer; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_spinlock_lock: function(pSpinlock: Pma_spinlock): ma_result; cdecl;
  ma_spinlock_lock_noyield: function(pSpinlock: Pma_spinlock): ma_result; cdecl;
  ma_spinlock_unlock: function(pSpinlock: Pma_spinlock): ma_result; cdecl;
  ma_splitter_node_config_init: function(channels: ma_uint32): ma_splitter_node_config; cdecl;
  ma_splitter_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_splitter_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pSplitterNode: Pma_splitter_node): ma_result; cdecl;
  ma_splitter_node_uninit: procedure(pSplitterNode: Pma_splitter_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_version: procedure(pMajor: Pma_uint32; pMinor: Pma_uint32; pRevision: Pma_uint32); cdecl;
  ma_version_string: function(): PUTF8Char; cdecl;
  ma_vfs_close: function(pVFS: Pma_vfs; _file: ma_vfs_file): ma_result; cdecl;
  ma_vfs_info: function(pVFS: Pma_vfs; _file: ma_vfs_file; pInfo: Pma_file_info): ma_result; cdecl;
  ma_vfs_open: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; openMode: ma_uint32; pFile: Pma_vfs_file): ma_result; cdecl;
  ma_vfs_open_and_read_file: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; ppData: PPointer; pSize: PNativeUInt; const pAllocationCallbacks: Pma_allocation_callbacks): ma_result; cdecl;
  ma_vfs_open_w: function(pVFS: Pma_vfs; const pFilePath: PWideChar; openMode: ma_uint32; pFile: Pma_vfs_file): ma_result; cdecl;
  ma_vfs_read: function(pVFS: Pma_vfs; _file: ma_vfs_file; pDst: Pointer; sizeInBytes: NativeUInt; pBytesRead: PNativeUInt): ma_result; cdecl;
  ma_vfs_seek: function(pVFS: Pma_vfs; _file: ma_vfs_file; offset: ma_int64; origin: ma_seek_origin): ma_result; cdecl;
  ma_vfs_tell: function(pVFS: Pma_vfs; _file: ma_vfs_file; pCursor: Pma_int64): ma_result; cdecl;
  ma_vfs_write: function(pVFS: Pma_vfs; _file: ma_vfs_file; const pSrc: Pointer; sizeInBytes: NativeUInt; pBytesWritten: PNativeUInt): ma_result; cdecl;
  ma_volume_db_to_linear: function(gain: Single): Single; cdecl;
  ma_volume_linear_to_db: function(factor: Single): Single; cdecl;
  ma_waveform_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; _type: ma_waveform_type; amplitude: Double; frequency: Double): ma_waveform_config; cdecl;
  ma_waveform_init: function(const pConfig: Pma_waveform_config; pWaveform: Pma_waveform): ma_result; cdecl;
  ma_waveform_read_pcm_frames: function(pWaveform: Pma_waveform; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_waveform_seek_to_pcm_frame: function(pWaveform: Pma_waveform; frameIndex: ma_uint64): ma_result; cdecl;
  ma_waveform_set_amplitude: function(pWaveform: Pma_waveform; amplitude: Double): ma_result; cdecl;
  ma_waveform_set_frequency: function(pWaveform: Pma_waveform; frequency: Double): ma_result; cdecl;
  ma_waveform_set_sample_rate: function(pWaveform: Pma_waveform; sampleRate: ma_uint32): ma_result; cdecl;
  ma_waveform_set_type: function(pWaveform: Pma_waveform; _type: ma_waveform_type): ma_result; cdecl;
  ma_waveform_uninit: procedure(pWaveform: Pma_waveform); cdecl;
  nk__begin: function(p1: Pnk_context): Pnk_command; cdecl;
  nk__next: function(p1: Pnk_context; const p2: Pnk_command): Pnk_command; cdecl;
  nk_begin: function(ctx: Pnk_context; const title: PUTF8Char; bounds: nk_rect; flags: nk_flags): nk_bool; cdecl;
  nk_begin_titled: function(ctx: Pnk_context; const name: PUTF8Char; const title: PUTF8Char; bounds: nk_rect; flags: nk_flags): nk_bool; cdecl;
  nk_buffer_clear: procedure(p1: Pnk_buffer); cdecl;
  nk_buffer_free: procedure(p1: Pnk_buffer); cdecl;
  nk_buffer_info: procedure(p1: Pnk_memory_status; p2: Pnk_buffer); cdecl;
  nk_buffer_init: procedure(p1: Pnk_buffer; const p2: Pnk_allocator; size: nk_size); cdecl;
  nk_buffer_init_default: procedure(p1: Pnk_buffer); cdecl;
  nk_buffer_init_fixed: procedure(p1: Pnk_buffer; memory: Pointer; size: nk_size); cdecl;
  nk_buffer_mark: procedure(p1: Pnk_buffer; _type: nk_buffer_allocation_type); cdecl;
  nk_buffer_memory: function(p1: Pnk_buffer): Pointer; cdecl;
  nk_buffer_memory_const: function(const p1: Pnk_buffer): Pointer; cdecl;
  nk_buffer_push: procedure(p1: Pnk_buffer; _type: nk_buffer_allocation_type; const memory: Pointer; size: nk_size; align: nk_size); cdecl;
  nk_buffer_reset: procedure(p1: Pnk_buffer; _type: nk_buffer_allocation_type); cdecl;
  nk_buffer_total: function(p1: Pnk_buffer): nk_size; cdecl;
  nk_button_color: function(p1: Pnk_context; p2: nk_color): nk_bool; cdecl;
  nk_button_image: function(p1: Pnk_context; img: nk_image): nk_bool; cdecl;
  nk_button_image_label: function(p1: Pnk_context; img: nk_image; const p3: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;
  nk_button_image_label_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image; const p4: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;
  nk_button_image_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image): nk_bool; cdecl;
  nk_button_image_text: function(p1: Pnk_context; img: nk_image; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_image_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image; const p4: PUTF8Char; p5: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_label: function(p1: Pnk_context; const title: PUTF8Char): nk_bool; cdecl;
  nk_button_label_styled: function(p1: Pnk_context; const p2: Pnk_style_button; const title: PUTF8Char): nk_bool; cdecl;
  nk_button_pop_behavior: function(p1: Pnk_context): nk_bool; cdecl;
  nk_button_push_behavior: function(p1: Pnk_context; p2: nk_button_behavior): nk_bool; cdecl;
  nk_button_set_behavior: procedure(p1: Pnk_context; p2: nk_button_behavior); cdecl;
  nk_button_symbol: function(p1: Pnk_context; p2: nk_symbol_type): nk_bool; cdecl;
  nk_button_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;
  nk_button_symbol_label_styled: function(ctx: Pnk_context; const style: Pnk_style_button; symbol: nk_symbol_type; const title: PUTF8Char; align: nk_flags): nk_bool; cdecl;
  nk_button_symbol_styled: function(p1: Pnk_context; const p2: Pnk_style_button; p3: nk_symbol_type): nk_bool; cdecl;
  nk_button_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_symbol_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; p3: nk_symbol_type; const p4: PUTF8Char; p5: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_text: function(p1: Pnk_context; const title: PUTF8Char; len: Integer): nk_bool; cdecl;
  nk_button_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; const title: PUTF8Char; len: Integer): nk_bool; cdecl;
  nk_chart_add_slot: procedure(ctx: Pnk_context; const p2: nk_chart_type; count: Integer; min_value: Single; max_value: Single); cdecl;
  nk_chart_add_slot_colored: procedure(ctx: Pnk_context; const p2: nk_chart_type; p3: nk_color; active: nk_color; count: Integer; min_value: Single; max_value: Single); cdecl;
  nk_chart_begin: function(p1: Pnk_context; p2: nk_chart_type; num: Integer; min: Single; max: Single): nk_bool; cdecl;
  nk_chart_begin_colored: function(p1: Pnk_context; p2: nk_chart_type; p3: nk_color; active: nk_color; num: Integer; min: Single; max: Single): nk_bool; cdecl;
  nk_chart_end: procedure(p1: Pnk_context); cdecl;
  nk_chart_push: function(p1: Pnk_context; p2: Single): nk_flags; cdecl;
  nk_chart_push_slot: function(p1: Pnk_context; p2: Single; p3: Integer): nk_flags; cdecl;
  nk_check_flags_label: function(p1: Pnk_context; const p2: PUTF8Char; flags: Cardinal; value: Cardinal): Cardinal; cdecl;
  nk_check_flags_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; flags: Cardinal; value: Cardinal): Cardinal; cdecl;
  nk_check_label: function(p1: Pnk_context; const p2: PUTF8Char; active: nk_bool): nk_bool; cdecl;
  nk_check_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: nk_bool): nk_bool; cdecl;
  nk_checkbox_flags_label: function(p1: Pnk_context; const p2: PUTF8Char; flags: PCardinal; value: Cardinal): nk_bool; cdecl;
  nk_checkbox_flags_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; flags: PCardinal; value: Cardinal): nk_bool; cdecl;
  nk_checkbox_label: function(p1: Pnk_context; const p2: PUTF8Char; active: Pnk_bool): nk_bool; cdecl;
  nk_checkbox_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: Pnk_bool): nk_bool; cdecl;
  nk_clear: procedure(p1: Pnk_context); cdecl;
  nk_color_cf: function(p1: nk_color): nk_colorf; cdecl;
  nk_color_d: procedure(r: PDouble; g: PDouble; b: PDouble; a: PDouble; p5: nk_color); cdecl;
  nk_color_dv: procedure(rgba_out: PDouble; p2: nk_color); cdecl;
  nk_color_f: procedure(r: PSingle; g: PSingle; b: PSingle; a: PSingle; p5: nk_color); cdecl;
  nk_color_fv: procedure(rgba_out: PSingle; p2: nk_color); cdecl;
  nk_color_hex_rgb: procedure(output: PUTF8Char; p2: nk_color); cdecl;
  nk_color_hex_rgba: procedure(output: PUTF8Char; p2: nk_color); cdecl;
  nk_color_hsv_b: procedure(out_h: Pnk_byte; out_s: Pnk_byte; out_v: Pnk_byte; p4: nk_color); cdecl;
  nk_color_hsv_bv: procedure(hsv_out: Pnk_byte; p2: nk_color); cdecl;
  nk_color_hsv_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; p4: nk_color); cdecl;
  nk_color_hsv_fv: procedure(hsv_out: PSingle; p2: nk_color); cdecl;
  nk_color_hsv_i: procedure(out_h: PInteger; out_s: PInteger; out_v: PInteger; p4: nk_color); cdecl;
  nk_color_hsv_iv: procedure(hsv_out: PInteger; p2: nk_color); cdecl;
  nk_color_hsva_b: procedure(h: Pnk_byte; s: Pnk_byte; v: Pnk_byte; a: Pnk_byte; p5: nk_color); cdecl;
  nk_color_hsva_bv: procedure(hsva_out: Pnk_byte; p2: nk_color); cdecl;
  nk_color_hsva_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; out_a: PSingle; p5: nk_color); cdecl;
  nk_color_hsva_fv: procedure(hsva_out: PSingle; p2: nk_color); cdecl;
  nk_color_hsva_i: procedure(h: PInteger; s: PInteger; v: PInteger; a: PInteger; p5: nk_color); cdecl;
  nk_color_hsva_iv: procedure(hsva_out: PInteger; p2: nk_color); cdecl;
  nk_color_pick: function(p1: Pnk_context; p2: Pnk_colorf; p3: nk_color_format): nk_bool; cdecl;
  nk_color_picker: function(p1: Pnk_context; p2: nk_colorf; p3: nk_color_format): nk_colorf; cdecl;
  nk_color_u32: function(p1: nk_color): nk_uint; cdecl;
  nk_colorf_hsva_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; out_a: PSingle; _in: nk_colorf); cdecl;
  nk_colorf_hsva_fv: procedure(hsva: PSingle; _in: nk_colorf); cdecl;
  nk_combo: function(p1: Pnk_context; items: PPUTF8Char; count: Integer; selected: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combo_begin_color: function(p1: Pnk_context; color: nk_color; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_image: function(p1: Pnk_context; img: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_image_label: function(p1: Pnk_context; const selected: PUTF8Char; p3: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_image_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; p4: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_label: function(p1: Pnk_context; const selected: PUTF8Char; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_symbol: function(p1: Pnk_context; p2: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_symbol_label: function(p1: Pnk_context; const selected: PUTF8Char; p3: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_symbol_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; p4: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; size: nk_vec2): nk_bool; cdecl;
  nk_combo_callback: function(p1: Pnk_context; item_getter: nk_combo_callback_item_getter; userdata: Pointer; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combo_close: procedure(p1: Pnk_context); cdecl;
  nk_combo_end: procedure(p1: Pnk_context); cdecl;
  nk_combo_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_label: function(p1: Pnk_context; const p2: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_separator: function(p1: Pnk_context; const items_separated_by_separator: PUTF8Char; separator: Integer; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combo_string: function(p1: Pnk_context; const items_separated_by_zeros: PUTF8Char; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combobox: procedure(p1: Pnk_context; items: PPUTF8Char; count: Integer; selected: PInteger; item_height: Integer; size: nk_vec2); cdecl;
  nk_combobox_callback: procedure(p1: Pnk_context; item_getter: nk_combobox_callback_item_getter; p3: Pointer; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;
  nk_combobox_separator: procedure(p1: Pnk_context; const items_separated_by_separator: PUTF8Char; separator: Integer; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;
  nk_combobox_string: procedure(p1: Pnk_context; const items_separated_by_zeros: PUTF8Char; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;
  nk_contextual_begin: function(p1: Pnk_context; p2: nk_flags; p3: nk_vec2; trigger_bounds: nk_rect): nk_bool; cdecl;
  nk_contextual_close: procedure(p1: Pnk_context); cdecl;
  nk_contextual_end: procedure(p1: Pnk_context); cdecl;
  nk_contextual_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; len: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags): nk_bool; cdecl;
  nk_contextual_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags): nk_bool; cdecl;
  nk_draw_image: procedure(p1: Pnk_command_buffer; p2: nk_rect; const p3: Pnk_image; p4: nk_color); cdecl;
  nk_draw_nine_slice: procedure(p1: Pnk_command_buffer; p2: nk_rect; const p3: Pnk_nine_slice; p4: nk_color); cdecl;
  nk_draw_text: procedure(p1: Pnk_command_buffer; p2: nk_rect; const text: PUTF8Char; len: Integer; const p5: Pnk_user_font; p6: nk_color; p7: nk_color); cdecl;
  nk_edit_buffer: function(p1: Pnk_context; p2: nk_flags; p3: Pnk_text_edit; p4: nk_plugin_filter): nk_flags; cdecl;
  nk_edit_focus: procedure(p1: Pnk_context; flags: nk_flags); cdecl;
  nk_edit_string: function(p1: Pnk_context; p2: nk_flags; buffer: PUTF8Char; len: PInteger; max: Integer; p6: nk_plugin_filter): nk_flags; cdecl;
  nk_edit_string_zero_terminated: function(p1: Pnk_context; p2: nk_flags; buffer: PUTF8Char; max: Integer; p5: nk_plugin_filter): nk_flags; cdecl;
  nk_edit_unfocus: procedure(p1: Pnk_context); cdecl;
  nk_end: procedure(ctx: Pnk_context); cdecl;
  nk_fill_arc: procedure(p1: Pnk_command_buffer; cx: Single; cy: Single; radius: Single; a_min: Single; a_max: Single; p7: nk_color); cdecl;
  nk_fill_circle: procedure(p1: Pnk_command_buffer; p2: nk_rect; p3: nk_color); cdecl;
  nk_fill_polygon: procedure(p1: Pnk_command_buffer; p2: PSingle; point_count: Integer; p4: nk_color); cdecl;
  nk_fill_rect: procedure(p1: Pnk_command_buffer; p2: nk_rect; rounding: Single; p4: nk_color); cdecl;
  nk_fill_rect_multi_color: procedure(p1: Pnk_command_buffer; p2: nk_rect; left: nk_color; top: nk_color; right: nk_color; bottom: nk_color); cdecl;
  nk_fill_triangle: procedure(p1: Pnk_command_buffer; x0: Single; y0: Single; x1: Single; y1: Single; x2: Single; y2: Single; p8: nk_color); cdecl;
  nk_filter_ascii: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_binary: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_decimal: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_default: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_float: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_hex: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_oct: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_font_atlas_add: function(p1: Pnk_font_atlas; const p2: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_compressed: function(p1: Pnk_font_atlas; memory: Pointer; size: nk_size; height: Single; const p5: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_compressed_base85: function(p1: Pnk_font_atlas; const data: PUTF8Char; height: Single; const config: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_default: function(p1: Pnk_font_atlas; height: Single; const p3: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_from_file: function(atlas: Pnk_font_atlas; const file_path: PUTF8Char; height: Single; const p4: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_from_memory: function(atlas: Pnk_font_atlas; memory: Pointer; size: nk_size; height: Single; const config: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_bake: function(p1: Pnk_font_atlas; width: PInteger; height: PInteger; p4: nk_font_atlas_format): Pointer; cdecl;
  nk_font_atlas_begin: procedure(p1: Pnk_font_atlas); cdecl;
  nk_font_atlas_cleanup: procedure(atlas: Pnk_font_atlas); cdecl;
  nk_font_atlas_clear: procedure(p1: Pnk_font_atlas); cdecl;
  nk_font_atlas_end: procedure(p1: Pnk_font_atlas; tex: nk_handle; p3: Pnk_draw_null_texture); cdecl;
  nk_font_atlas_init: procedure(p1: Pnk_font_atlas; p2: Pnk_allocator); cdecl;
  nk_font_atlas_init_custom: procedure(p1: Pnk_font_atlas; persistent: Pnk_allocator; transient: Pnk_allocator); cdecl;
  nk_font_atlas_init_default: procedure(p1: Pnk_font_atlas); cdecl;
  nk_font_chinese_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_font_config_: function(pixel_height: Single): nk_font_config; cdecl;
  nk_font_cyrillic_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_font_default_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_font_find_glyph: function(p1: Pnk_font; unicode: nk_rune): Pnk_font_glyph; cdecl;
  nk_font_korean_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_free: procedure(p1: Pnk_context); cdecl;
  nk_get_null_rect: function(): nk_rect; cdecl;
  nk_group_begin: function(p1: Pnk_context; const title: PUTF8Char; p3: nk_flags): nk_bool; cdecl;
  nk_group_begin_titled: function(p1: Pnk_context; const name: PUTF8Char; const title: PUTF8Char; p4: nk_flags): nk_bool; cdecl;
  nk_group_end: procedure(p1: Pnk_context); cdecl;
  nk_group_get_scroll: procedure(p1: Pnk_context; const id: PUTF8Char; x_offset: Pnk_uint; y_offset: Pnk_uint); cdecl;
  nk_group_scrolled_begin: function(p1: Pnk_context; off: Pnk_scroll; const title: PUTF8Char; p4: nk_flags): nk_bool; cdecl;
  nk_group_scrolled_end: procedure(p1: Pnk_context); cdecl;
  nk_group_scrolled_offset_begin: function(p1: Pnk_context; x_offset: Pnk_uint; y_offset: Pnk_uint; const title: PUTF8Char; flags: nk_flags): nk_bool; cdecl;
  nk_group_set_scroll: procedure(p1: Pnk_context; const id: PUTF8Char; x_offset: nk_uint; y_offset: nk_uint); cdecl;
  nk_handle_id: function(p1: Integer): nk_handle; cdecl;
  nk_handle_ptr: function(p1: Pointer): nk_handle; cdecl;
  nk_hsv: function(h: Integer; s: Integer; v: Integer): nk_color; cdecl;
  nk_hsv_bv: function(const hsv: Pnk_byte): nk_color; cdecl;
  nk_hsv_f: function(h: Single; s: Single; v: Single): nk_color; cdecl;
  nk_hsv_fv: function(const hsv: PSingle): nk_color; cdecl;
  nk_hsv_iv: function(const hsv: PInteger): nk_color; cdecl;
  nk_hsva: function(h: Integer; s: Integer; v: Integer; a: Integer): nk_color; cdecl;
  nk_hsva_bv: function(const hsva: Pnk_byte): nk_color; cdecl;
  nk_hsva_colorf: function(h: Single; s: Single; v: Single; a: Single): nk_colorf; cdecl;
  nk_hsva_colorfv: function(c: PSingle): nk_colorf; cdecl;
  nk_hsva_f: function(h: Single; s: Single; v: Single; a: Single): nk_color; cdecl;
  nk_hsva_fv: function(const hsva: PSingle): nk_color; cdecl;
  nk_hsva_iv: function(const hsva: PInteger): nk_color; cdecl;
  nk_image_: procedure(p1: Pnk_context; p2: nk_image); cdecl;
  nk_image_color: procedure(p1: Pnk_context; p2: nk_image; p3: nk_color); cdecl;
  nk_image_handle: function(p1: nk_handle): nk_image; cdecl;
  nk_image_id: function(p1: Integer): nk_image; cdecl;
  nk_image_is_subimage: function(const img: Pnk_image): nk_bool; cdecl;
  nk_image_ptr: function(p1: Pointer): nk_image; cdecl;
  nk_init: function(p1: Pnk_context; p2: Pnk_allocator; const p3: Pnk_user_font): nk_bool; cdecl;
  nk_init_custom: function(p1: Pnk_context; cmds: Pnk_buffer; pool: Pnk_buffer; const p4: Pnk_user_font): nk_bool; cdecl;
  nk_init_default: function(p1: Pnk_context; const p2: Pnk_user_font): nk_bool; cdecl;
  nk_init_fixed: function(p1: Pnk_context; memory: Pointer; size: nk_size; const p4: Pnk_user_font): nk_bool; cdecl;
  nk_input_any_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;
  nk_input_begin: procedure(p1: Pnk_context); cdecl;
  nk_input_button: procedure(p1: Pnk_context; p2: nk_buttons; x: Integer; y: Integer; down: nk_bool); cdecl;
  nk_input_char: procedure(p1: Pnk_context; p2: UTF8Char); cdecl;
  nk_input_end: procedure(p1: Pnk_context); cdecl;
  nk_input_glyph: procedure(p1: Pnk_context; const p2: nk_glyph); cdecl;
  nk_input_has_mouse_click: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_has_mouse_click_down_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect; down: nk_bool): nk_bool; cdecl;
  nk_input_has_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;
  nk_input_is_key_down: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;
  nk_input_is_key_pressed: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;
  nk_input_is_key_released: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;
  nk_input_is_mouse_click_down_in_rect: function(const i: Pnk_input; id: nk_buttons; b: nk_rect; down: nk_bool): nk_bool; cdecl;
  nk_input_is_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;
  nk_input_is_mouse_down: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_is_mouse_hovering_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;
  nk_input_is_mouse_pressed: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_is_mouse_prev_hovering_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;
  nk_input_is_mouse_released: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_key: procedure(p1: Pnk_context; p2: nk_keys; down: nk_bool); cdecl;
  nk_input_motion: procedure(p1: Pnk_context; x: Integer; y: Integer); cdecl;
  nk_input_mouse_clicked: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;
  nk_input_scroll: procedure(p1: Pnk_context; val: nk_vec2); cdecl;
  nk_input_unicode: procedure(p1: Pnk_context; p2: nk_rune); cdecl;
  nk_item_is_any_active: function(p1: Pnk_context): nk_bool; cdecl;
  nk_label: procedure(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags); cdecl;
  nk_label_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_color); cdecl;
  nk_label_colored_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: nk_color); cdecl;
  nk_label_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char); cdecl;
  nk_labelf: procedure(p1: Pnk_context; p2: nk_flags; const p3: PUTF8Char) varargs; cdecl;
  nk_labelf_colored: procedure(p1: Pnk_context; p2: nk_flags; p3: nk_color; const p4: PUTF8Char) varargs; cdecl;
  nk_labelf_colored_wrap: procedure(p1: Pnk_context; p2: nk_color; const p3: PUTF8Char) varargs; cdecl;
  nk_labelf_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char) varargs; cdecl;
  nk_labelfv: procedure(p1: Pnk_context; p2: nk_flags; const p3: PUTF8Char; p4: Pointer); cdecl;
  nk_labelfv_colored: procedure(p1: Pnk_context; p2: nk_flags; p3: nk_color; const p4: PUTF8Char; p5: Pointer); cdecl;
  nk_labelfv_colored_wrap: procedure(p1: Pnk_context; p2: nk_color; const p3: PUTF8Char; p4: Pointer); cdecl;
  nk_labelfv_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Pointer); cdecl;
  nk_layout_ratio_from_pixel: function(p1: Pnk_context; pixel_width: Single): Single; cdecl;
  nk_layout_reset_min_row_height: procedure(p1: Pnk_context); cdecl;
  nk_layout_row: procedure(p1: Pnk_context; p2: nk_layout_format; height: Single; cols: Integer; const ratio: PSingle); cdecl;
  nk_layout_row_begin: procedure(ctx: Pnk_context; fmt: nk_layout_format; row_height: Single; cols: Integer); cdecl;
  nk_layout_row_dynamic: procedure(ctx: Pnk_context; height: Single; cols: Integer); cdecl;
  nk_layout_row_end: procedure(p1: Pnk_context); cdecl;
  nk_layout_row_push: procedure(p1: Pnk_context; value: Single); cdecl;
  nk_layout_row_static: procedure(ctx: Pnk_context; height: Single; item_width: Integer; cols: Integer); cdecl;
  nk_layout_row_template_begin: procedure(p1: Pnk_context; row_height: Single); cdecl;
  nk_layout_row_template_end: procedure(p1: Pnk_context); cdecl;
  nk_layout_row_template_push_dynamic: procedure(p1: Pnk_context); cdecl;
  nk_layout_row_template_push_static: procedure(p1: Pnk_context; width: Single); cdecl;
  nk_layout_row_template_push_variable: procedure(p1: Pnk_context; min_width: Single); cdecl;
  nk_layout_set_min_row_height: procedure(p1: Pnk_context; height: Single); cdecl;
  nk_layout_space_begin: procedure(p1: Pnk_context; p2: nk_layout_format; height: Single; widget_count: Integer); cdecl;
  nk_layout_space_bounds: function(p1: Pnk_context): nk_rect; cdecl;
  nk_layout_space_end: procedure(p1: Pnk_context); cdecl;
  nk_layout_space_push: procedure(p1: Pnk_context; bounds: nk_rect); cdecl;
  nk_layout_space_rect_to_local: function(p1: Pnk_context; p2: nk_rect): nk_rect; cdecl;
  nk_layout_space_rect_to_screen: function(p1: Pnk_context; p2: nk_rect): nk_rect; cdecl;
  nk_layout_space_to_local: function(p1: Pnk_context; p2: nk_vec2): nk_vec2; cdecl;
  nk_layout_space_to_screen: function(p1: Pnk_context; p2: nk_vec2): nk_vec2; cdecl;
  nk_layout_widget_bounds: function(p1: Pnk_context): nk_rect; cdecl;
  nk_list_view_begin: function(p1: Pnk_context; _out: Pnk_list_view; const id: PUTF8Char; p4: nk_flags; row_height: Integer; row_count: Integer): nk_bool; cdecl;
  nk_list_view_end: procedure(p1: Pnk_list_view); cdecl;
  nk_menu_begin_image: function(p1: Pnk_context; const p2: PUTF8Char; p3: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_image_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_image_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; p5: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_symbol: function(p1: Pnk_context; const p2: PUTF8Char; p3: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_symbol_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_symbol_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; p5: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_text: function(p1: Pnk_context; const title: PUTF8Char; title_len: Integer; align: nk_flags; size: nk_vec2): nk_bool; cdecl;
  nk_menu_close: procedure(p1: Pnk_context); cdecl;
  nk_menu_end: procedure(p1: Pnk_context); cdecl;
  nk_menu_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; len: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_label: function(p1: Pnk_context; const p2: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags): nk_bool; cdecl;
  nk_menubar_begin: procedure(p1: Pnk_context); cdecl;
  nk_menubar_end: procedure(p1: Pnk_context); cdecl;
  nk_murmur_hash: function(const key: Pointer; len: Integer; seed: nk_hash): nk_hash; cdecl;
  nk_nine_slice_handle: function(p1: nk_handle; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_nine_slice_id: function(p1: Integer; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_nine_slice_is_sub9slice: function(const img: Pnk_nine_slice): Integer; cdecl;
  nk_nine_slice_ptr: function(p1: Pointer; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_option_label: function(p1: Pnk_context; const p2: PUTF8Char; active: nk_bool): nk_bool; cdecl;
  nk_option_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: nk_bool): nk_bool; cdecl;
  nk_plot: procedure(p1: Pnk_context; p2: nk_chart_type; const values: PSingle; count: Integer; offset: Integer); cdecl;
  nk_plot_function: procedure(p1: Pnk_context; p2: nk_chart_type; userdata: Pointer; value_getter: nk_plot_function_value_getter; count: Integer; offset: Integer); cdecl;
  nk_popup_begin: function(p1: Pnk_context; p2: nk_popup_type; const p3: PUTF8Char; p4: nk_flags; bounds: nk_rect): nk_bool; cdecl;
  nk_popup_close: procedure(p1: Pnk_context); cdecl;
  nk_popup_end: procedure(p1: Pnk_context); cdecl;
  nk_popup_get_scroll: procedure(p1: Pnk_context; offset_x: Pnk_uint; offset_y: Pnk_uint); cdecl;
  nk_popup_set_scroll: procedure(p1: Pnk_context; offset_x: nk_uint; offset_y: nk_uint); cdecl;
  nk_prog: function(p1: Pnk_context; cur: nk_size; max: nk_size; modifyable: nk_bool): nk_size; cdecl;
  nk_progress: function(p1: Pnk_context; cur: Pnk_size; max: nk_size; modifyable: nk_bool): nk_bool; cdecl;
  nk_property_double: procedure(p1: Pnk_context; const name: PUTF8Char; min: Double; val: PDouble; max: Double; step: Double; inc_per_pixel: Single); cdecl;
  nk_property_float: procedure(p1: Pnk_context; const name: PUTF8Char; min: Single; val: PSingle; max: Single; step: Single; inc_per_pixel: Single); cdecl;
  nk_property_int: procedure(p1: Pnk_context; const name: PUTF8Char; min: Integer; val: PInteger; max: Integer; step: Integer; inc_per_pixel: Single); cdecl;
  nk_propertyd: function(p1: Pnk_context; const name: PUTF8Char; min: Double; val: Double; max: Double; step: Double; inc_per_pixel: Single): Double; cdecl;
  nk_propertyf: function(p1: Pnk_context; const name: PUTF8Char; min: Single; val: Single; max: Single; step: Single; inc_per_pixel: Single): Single; cdecl;
  nk_propertyi: function(p1: Pnk_context; const name: PUTF8Char; min: Integer; val: Integer; max: Integer; step: Integer; inc_per_pixel: Single): Integer; cdecl;
  nk_push_custom: procedure(p1: Pnk_command_buffer; p2: nk_rect; p3: nk_command_custom_callback; usr: nk_handle); cdecl;
  nk_push_scissor: procedure(p1: Pnk_command_buffer; p2: nk_rect); cdecl;
  nk_radio_label: function(p1: Pnk_context; const p2: PUTF8Char; active: Pnk_bool): nk_bool; cdecl;
  nk_radio_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: Pnk_bool): nk_bool; cdecl;
  nk_rect_: function(x: Single; y: Single; w: Single; h: Single): nk_rect; cdecl;
  nk_rect_pos: function(p1: nk_rect): nk_vec2; cdecl;
  nk_rect_size: function(p1: nk_rect): nk_vec2; cdecl;
  nk_recta: function(pos: nk_vec2; size: nk_vec2): nk_rect; cdecl;
  nk_recti_: function(x: Integer; y: Integer; w: Integer; h: Integer): nk_rect; cdecl;
  nk_rectiv: function(const xywh: PInteger): nk_rect; cdecl;
  nk_rectv: function(const xywh: PSingle): nk_rect; cdecl;
  nk_rgb_: function(r: Integer; g: Integer; b: Integer): nk_color; cdecl;
  nk_rgb_bv: function(const rgb: Pnk_byte): nk_color; cdecl;
  nk_rgb_cf: function(c: nk_colorf): nk_color; cdecl;
  nk_rgb_f: function(r: Single; g: Single; b: Single): nk_color; cdecl;
  nk_rgb_fv: function(const rgb: PSingle): nk_color; cdecl;
  nk_rgb_hex: function(const rgb: PUTF8Char): nk_color; cdecl;
  nk_rgb_iv: function(const rgb: PInteger): nk_color; cdecl;
  nk_rgba_: function(r: Integer; g: Integer; b: Integer; a: Integer): nk_color; cdecl;
  nk_rgba_bv: function(const rgba: Pnk_byte): nk_color; cdecl;
  nk_rgba_cf: function(c: nk_colorf): nk_color; cdecl;
  nk_rgba_f: function(r: Single; g: Single; b: Single; a: Single): nk_color; cdecl;
  nk_rgba_fv: function(const rgba: PSingle): nk_color; cdecl;
  nk_rgba_hex: function(const rgb: PUTF8Char): nk_color; cdecl;
  nk_rgba_iv: function(const rgba: PInteger): nk_color; cdecl;
  nk_rgba_u32: function(p1: nk_uint): nk_color; cdecl;
  nk_select_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_selectable_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_slide_float: function(p1: Pnk_context; min: Single; val: Single; max: Single; step: Single): Single; cdecl;
  nk_slide_int: function(p1: Pnk_context; min: Integer; val: Integer; max: Integer; step: Integer): Integer; cdecl;
  nk_slider_float: function(p1: Pnk_context; min: Single; val: PSingle; max: Single; step: Single): nk_bool; cdecl;
  nk_slider_int: function(p1: Pnk_context; min: Integer; val: PInteger; max: Integer; step: Integer): nk_bool; cdecl;
  nk_spacer: procedure(p1: Pnk_context); cdecl;
  nk_spacing: procedure(p1: Pnk_context; cols: Integer); cdecl;
  nk_str_append_str_char: function(p1: Pnk_str; const p2: PUTF8Char): Integer; cdecl;
  nk_str_append_str_runes: function(p1: Pnk_str; const p2: Pnk_rune): Integer; cdecl;
  nk_str_append_str_utf8: function(p1: Pnk_str; const p2: PUTF8Char): Integer; cdecl;
  nk_str_append_text_char: function(p1: Pnk_str; const p2: PUTF8Char; p3: Integer): Integer; cdecl;
  nk_str_append_text_runes: function(p1: Pnk_str; const p2: Pnk_rune; p3: Integer): Integer; cdecl;
  nk_str_append_text_utf8: function(p1: Pnk_str; const p2: PUTF8Char; p3: Integer): Integer; cdecl;
  nk_str_at_char: function(p1: Pnk_str; pos: Integer): PUTF8Char; cdecl;
  nk_str_at_char_const: function(const p1: Pnk_str; pos: Integer): PUTF8Char; cdecl;
  nk_str_at_const: function(const p1: Pnk_str; pos: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;
  nk_str_at_rune: function(p1: Pnk_str; pos: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;
  nk_str_clear: procedure(p1: Pnk_str); cdecl;
  nk_str_delete_chars: procedure(p1: Pnk_str; pos: Integer; len: Integer); cdecl;
  nk_str_delete_runes: procedure(p1: Pnk_str; pos: Integer; len: Integer); cdecl;
  nk_str_free: procedure(p1: Pnk_str); cdecl;
  nk_str_get: function(p1: Pnk_str): PUTF8Char; cdecl;
  nk_str_get_const: function(const p1: Pnk_str): PUTF8Char; cdecl;
  nk_str_init: procedure(p1: Pnk_str; const p2: Pnk_allocator; size: nk_size); cdecl;
  nk_str_init_default: procedure(p1: Pnk_str); cdecl;
  nk_str_init_fixed: procedure(p1: Pnk_str; memory: Pointer; size: nk_size); cdecl;
  nk_str_insert_at_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_insert_at_rune: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_insert_str_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char): Integer; cdecl;
  nk_str_insert_str_runes: function(p1: Pnk_str; pos: Integer; const p3: Pnk_rune): Integer; cdecl;
  nk_str_insert_str_utf8: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char): Integer; cdecl;
  nk_str_insert_text_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_insert_text_runes: function(p1: Pnk_str; pos: Integer; const p3: Pnk_rune; p4: Integer): Integer; cdecl;
  nk_str_insert_text_utf8: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_len: function(p1: Pnk_str): Integer; cdecl;
  nk_str_len_char: function(p1: Pnk_str): Integer; cdecl;
  nk_str_remove_chars: procedure(p1: Pnk_str; len: Integer); cdecl;
  nk_str_remove_runes: procedure(str: Pnk_str; len: Integer); cdecl;
  nk_str_rune_at: function(const p1: Pnk_str; pos: Integer): nk_rune; cdecl;
  nk_strfilter: function(const text: PUTF8Char; const regexp: PUTF8Char): Integer; cdecl;
  nk_stricmp: function(const s1: PUTF8Char; const s2: PUTF8Char): Integer; cdecl;
  nk_stricmpn: function(const s1: PUTF8Char; const s2: PUTF8Char; n: Integer): Integer; cdecl;
  nk_strlen: function(const str: PUTF8Char): Integer; cdecl;
  nk_strmatch_fuzzy_string: function(const str: PUTF8Char; const pattern: PUTF8Char; out_score: PInteger): Integer; cdecl;
  nk_strmatch_fuzzy_text: function(const txt: PUTF8Char; txt_len: Integer; const pattern: PUTF8Char; out_score: PInteger): Integer; cdecl;
  nk_stroke_arc: procedure(p1: Pnk_command_buffer; cx: Single; cy: Single; radius: Single; a_min: Single; a_max: Single; line_thickness: Single; p8: nk_color); cdecl;
  nk_stroke_circle: procedure(p1: Pnk_command_buffer; p2: nk_rect; line_thickness: Single; p4: nk_color); cdecl;
  nk_stroke_curve: procedure(p1: Pnk_command_buffer; p2: Single; p3: Single; p4: Single; p5: Single; p6: Single; p7: Single; p8: Single; p9: Single; line_thickness: Single; p11: nk_color); cdecl;
  nk_stroke_line: procedure(b: Pnk_command_buffer; x0: Single; y0: Single; x1: Single; y1: Single; line_thickness: Single; p7: nk_color); cdecl;
  nk_stroke_polygon: procedure(p1: Pnk_command_buffer; p2: PSingle; point_count: Integer; line_thickness: Single; p5: nk_color); cdecl;
  nk_stroke_polyline: procedure(p1: Pnk_command_buffer; points: PSingle; point_count: Integer; line_thickness: Single; col: nk_color); cdecl;
  nk_stroke_rect: procedure(p1: Pnk_command_buffer; p2: nk_rect; rounding: Single; line_thickness: Single; p5: nk_color); cdecl;
  nk_stroke_triangle: procedure(p1: Pnk_command_buffer; p2: Single; p3: Single; p4: Single; p5: Single; p6: Single; p7: Single; line_thichness: Single; p9: nk_color); cdecl;
  nk_strtod: function(const str: PUTF8Char; endptr: PPUTF8Char): Double; cdecl;
  nk_strtof: function(const str: PUTF8Char; endptr: PPUTF8Char): Single; cdecl;
  nk_strtoi: function(const str: PUTF8Char; endptr: PPUTF8Char): Integer; cdecl;
  nk_style_default: procedure(p1: Pnk_context); cdecl;
  nk_style_from_table: procedure(p1: Pnk_context; const p2: Pnk_color); cdecl;
  nk_style_get_color_by_name: function(p1: nk_style_colors): PUTF8Char; cdecl;
  nk_style_hide_cursor: procedure(p1: Pnk_context); cdecl;
  nk_style_item_color_: function(p1: nk_color): nk_style_item; cdecl;
  nk_style_item_hide: function(): nk_style_item; cdecl;
  nk_style_item_image_: function(img: nk_image): nk_style_item; cdecl;
  nk_style_item_nine_slice_: function(slice: nk_nine_slice): nk_style_item; cdecl;
  nk_style_load_all_cursors: procedure(p1: Pnk_context; p2: Pnk_cursor); cdecl;
  nk_style_load_cursor: procedure(p1: Pnk_context; p2: nk_style_cursor; const p3: Pnk_cursor); cdecl;
  nk_style_pop_color: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_flags: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_float: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_font: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_style_item: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_vec2: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_push_color: function(p1: Pnk_context; p2: Pnk_color; p3: nk_color): nk_bool; cdecl;
  nk_style_push_flags: function(p1: Pnk_context; p2: Pnk_flags; p3: nk_flags): nk_bool; cdecl;
  nk_style_push_float: function(p1: Pnk_context; p2: PSingle; p3: Single): nk_bool; cdecl;
  nk_style_push_font: function(p1: Pnk_context; const p2: Pnk_user_font): nk_bool; cdecl;
  nk_style_push_style_item: function(p1: Pnk_context; p2: Pnk_style_item; p3: nk_style_item): nk_bool; cdecl;
  nk_style_push_vec2: function(p1: Pnk_context; p2: Pnk_vec2; p3: nk_vec2): nk_bool; cdecl;
  nk_style_set_cursor: function(p1: Pnk_context; p2: nk_style_cursor): nk_bool; cdecl;
  nk_style_set_font: procedure(p1: Pnk_context; const p2: Pnk_user_font); cdecl;
  nk_style_show_cursor: procedure(p1: Pnk_context); cdecl;
  nk_sub9slice_handle: function(p1: nk_handle; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_sub9slice_id: function(p1: Integer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_sub9slice_ptr: function(p1: Pointer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_subimage_handle: function(p1: nk_handle; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;
  nk_subimage_id: function(p1: Integer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;
  nk_subimage_ptr: function(p1: Pointer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;
  nk_text: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_flags); cdecl;
  nk_text_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_flags; p5: nk_color); cdecl;
  nk_text_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer); cdecl;
  nk_text_wrap_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_color); cdecl;
  nk_textedit_cut: function(p1: Pnk_text_edit): nk_bool; cdecl;
  nk_textedit_delete: procedure(p1: Pnk_text_edit; where: Integer; len: Integer); cdecl;
  nk_textedit_delete_selection: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_free: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_init: procedure(p1: Pnk_text_edit; p2: Pnk_allocator; size: nk_size); cdecl;
  nk_textedit_init_default: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_init_fixed: procedure(p1: Pnk_text_edit; memory: Pointer; size: nk_size); cdecl;
  nk_textedit_paste: function(p1: Pnk_text_edit; const p2: PUTF8Char; len: Integer): nk_bool; cdecl;
  nk_textedit_redo: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_select_all: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_text: procedure(p1: Pnk_text_edit; const p2: PUTF8Char; total_len: Integer); cdecl;
  nk_textedit_undo: procedure(p1: Pnk_text_edit); cdecl;
  nk_tooltip: procedure(p1: Pnk_context; const p2: PUTF8Char); cdecl;
  nk_tooltip_begin: function(p1: Pnk_context; width: Single): nk_bool; cdecl;
  nk_tooltip_end: procedure(p1: Pnk_context); cdecl;
  nk_tooltipf: procedure(p1: Pnk_context; const p2: PUTF8Char) varargs; cdecl;
  nk_tooltipfv: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Pointer); cdecl;
  nk_tree_element_image_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; initial_state: nk_collapse_states; selected: Pnk_bool; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_element_pop: procedure(p1: Pnk_context); cdecl;
  nk_tree_element_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; initial_state: nk_collapse_states; selected: Pnk_bool; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_image_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; initial_state: nk_collapse_states; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_pop: procedure(p1: Pnk_context); cdecl;
  nk_tree_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; initial_state: nk_collapse_states; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_state_image_push: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; state: Pnk_collapse_states): nk_bool; cdecl;
  nk_tree_state_pop: procedure(p1: Pnk_context); cdecl;
  nk_tree_state_push: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; state: Pnk_collapse_states): nk_bool; cdecl;
  nk_triangle_from_direction: procedure(result: Pnk_vec2; r: nk_rect; pad_x: Single; pad_y: Single; p5: nk_heading); cdecl;
  nk_utf_at: function(const buffer: PUTF8Char; length: Integer; index: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;
  nk_utf_decode: function(const p1: PUTF8Char; p2: Pnk_rune; p3: Integer): Integer; cdecl;
  nk_utf_encode: function(p1: nk_rune; p2: PUTF8Char; p3: Integer): Integer; cdecl;
  nk_utf_len: function(const p1: PUTF8Char; byte_len: Integer): Integer; cdecl;
  nk_value_bool: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Integer); cdecl;
  nk_value_color_byte: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: nk_color); cdecl;
  nk_value_color_float: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: nk_color); cdecl;
  nk_value_color_hex: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: nk_color); cdecl;
  nk_value_float: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Single); cdecl;
  nk_value_int: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Integer); cdecl;
  nk_value_uint: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Cardinal); cdecl;
  nk_vec2_: function(x: Single; y: Single): nk_vec2; cdecl;
  nk_vec2i_: function(x: Integer; y: Integer): nk_vec2; cdecl;
  nk_vec2iv: function(const xy: PInteger): nk_vec2; cdecl;
  nk_vec2v: function(const xy: PSingle): nk_vec2; cdecl;
  nk_widget: function(p1: Pnk_rect; const p2: Pnk_context): nk_widget_layout_states; cdecl;
  nk_widget_bounds: function(p1: Pnk_context): nk_rect; cdecl;
  nk_widget_fitting: function(p1: Pnk_rect; p2: Pnk_context; p3: nk_vec2): nk_widget_layout_states; cdecl;
  nk_widget_has_mouse_click_down: function(p1: Pnk_context; p2: nk_buttons; down: nk_bool): nk_bool; cdecl;
  nk_widget_height: function(p1: Pnk_context): Single; cdecl;
  nk_widget_is_hovered: function(p1: Pnk_context): nk_bool; cdecl;
  nk_widget_is_mouse_clicked: function(p1: Pnk_context; p2: nk_buttons): nk_bool; cdecl;
  nk_widget_position: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_widget_size: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_widget_width: function(p1: Pnk_context): Single; cdecl;
  nk_window_close: procedure(ctx: Pnk_context; const name: PUTF8Char); cdecl;
  nk_window_collapse: procedure(p1: Pnk_context; const name: PUTF8Char; state: nk_collapse_states); cdecl;
  nk_window_collapse_if: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_collapse_states; cond: Integer); cdecl;
  nk_window_find: function(ctx: Pnk_context; const name: PUTF8Char): Pnk_window; cdecl;
  nk_window_get_bounds: function(const ctx: Pnk_context): nk_rect; cdecl;
  nk_window_get_canvas: function(p1: Pnk_context): Pnk_command_buffer; cdecl;
  nk_window_get_content_region: function(p1: Pnk_context): nk_rect; cdecl;
  nk_window_get_content_region_max: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_content_region_min: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_content_region_size: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_height: function(const p1: Pnk_context): Single; cdecl;
  nk_window_get_panel: function(p1: Pnk_context): Pnk_panel; cdecl;
  nk_window_get_position: function(const ctx: Pnk_context): nk_vec2; cdecl;
  nk_window_get_scroll: procedure(p1: Pnk_context; offset_x: Pnk_uint; offset_y: Pnk_uint); cdecl;
  nk_window_get_size: function(const p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_width: function(const p1: Pnk_context): Single; cdecl;
  nk_window_has_focus: function(const p1: Pnk_context): nk_bool; cdecl;
  nk_window_is_active: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;
  nk_window_is_any_hovered: function(p1: Pnk_context): nk_bool; cdecl;
  nk_window_is_closed: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;
  nk_window_is_collapsed: function(ctx: Pnk_context; const name: PUTF8Char): nk_bool; cdecl;
  nk_window_is_hidden: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;
  nk_window_is_hovered: function(p1: Pnk_context): nk_bool; cdecl;
  nk_window_set_bounds: procedure(p1: Pnk_context; const name: PUTF8Char; bounds: nk_rect); cdecl;
  nk_window_set_focus: procedure(p1: Pnk_context; const name: PUTF8Char); cdecl;
  nk_window_set_position: procedure(p1: Pnk_context; const name: PUTF8Char; pos: nk_vec2); cdecl;
  nk_window_set_scroll: procedure(p1: Pnk_context; offset_x: nk_uint; offset_y: nk_uint); cdecl;
  nk_window_set_size: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_vec2); cdecl;
  nk_window_show: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_show_states); cdecl;
  nk_window_show_if: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_show_states; cond: Integer); cdecl;
  PHYSFS_addToSearchPath: function(const newDir: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_caseFold: function(const from: PHYSFS_uint32; _to: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_close: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_deinit: function(): Integer; cdecl;
  PHYSFS_delete: function(const filename: PUTF8Char): Integer; cdecl;
  PHYSFS_deregisterArchiver: function(const ext: PUTF8Char): Integer; cdecl;
  PHYSFS_enumerate: function(const dir: PUTF8Char; c: PHYSFS_EnumerateCallback; d: Pointer): Integer; cdecl;
  PHYSFS_enumerateFiles: function(const dir: PUTF8Char): PPUTF8Char; cdecl;
  PHYSFS_enumerateFilesCallback: procedure(const dir: PUTF8Char; c: PHYSFS_EnumFilesCallback; d: Pointer); cdecl;
  PHYSFS_eof: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_exists: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_fileLength: function(handle: PPHYSFS_File): PHYSFS_sint64; cdecl;
  PHYSFS_flush: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_freeList: procedure(listVar: Pointer); cdecl;
  PHYSFS_getAllocator: function(): PPHYSFS_Allocator; cdecl;
  PHYSFS_getBaseDir: function(): PUTF8Char; cdecl;
  PHYSFS_getCdRomDirs: function(): PPUTF8Char; cdecl;
  PHYSFS_getCdRomDirsCallback: procedure(c: PHYSFS_StringCallback; d: Pointer); cdecl;
  PHYSFS_getDirSeparator: function(): PUTF8Char; cdecl;
  PHYSFS_getErrorByCode: function(code: PHYSFS_ErrorCode): PUTF8Char; cdecl;
  PHYSFS_getLastError: function(): PUTF8Char; cdecl;
  PHYSFS_getLastErrorCode: function(): PHYSFS_ErrorCode; cdecl;
  PHYSFS_getLastModTime: function(const filename: PUTF8Char): PHYSFS_sint64; cdecl;
  PHYSFS_getLinkedVersion: procedure(ver: PPHYSFS_Version); cdecl;
  PHYSFS_getMountPoint: function(const dir: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getPrefDir: function(const org: PUTF8Char; const app: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getRealDir: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getSearchPath: function(): PPUTF8Char; cdecl;
  PHYSFS_getSearchPathCallback: procedure(c: PHYSFS_StringCallback; d: Pointer); cdecl;
  PHYSFS_getUserDir: function(): PUTF8Char; cdecl;
  PHYSFS_getWriteDir: function(): PUTF8Char; cdecl;
  PHYSFS_init: function(const argv0: PUTF8Char): Integer; cdecl;
  PHYSFS_isDirectory: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_isInit: function(): Integer; cdecl;
  PHYSFS_isSymbolicLink: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_mkdir: function(const dirName: PUTF8Char): Integer; cdecl;
  PHYSFS_mount: function(const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountHandle: function(_file: PPHYSFS_File; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountIo: function(io: PPHYSFS_Io; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountMemory: function(const buf: Pointer; len: PHYSFS_uint64; del: PHYSFS_mountMemory_del; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_openAppend: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_openRead: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_openWrite: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_permitSymbolicLinks: procedure(allow: Integer); cdecl;
  PHYSFS_read: function(handle: PPHYSFS_File; buffer: Pointer; objSize: PHYSFS_uint32; objCount: PHYSFS_uint32): PHYSFS_sint64; cdecl;
  PHYSFS_readBytes: function(handle: PPHYSFS_File; buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
  PHYSFS_readSBE16: function(_file: PPHYSFS_File; val: PPHYSFS_sint16): Integer; cdecl;
  PHYSFS_readSBE32: function(_file: PPHYSFS_File; val: PPHYSFS_sint32): Integer; cdecl;
  PHYSFS_readSBE64: function(_file: PPHYSFS_File; val: PPHYSFS_sint64): Integer; cdecl;
  PHYSFS_readSLE16: function(_file: PPHYSFS_File; val: PPHYSFS_sint16): Integer; cdecl;
  PHYSFS_readSLE32: function(_file: PPHYSFS_File; val: PPHYSFS_sint32): Integer; cdecl;
  PHYSFS_readSLE64: function(_file: PPHYSFS_File; val: PPHYSFS_sint64): Integer; cdecl;
  PHYSFS_readUBE16: function(_file: PPHYSFS_File; val: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_readUBE32: function(_file: PPHYSFS_File; val: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_readUBE64: function(_file: PPHYSFS_File; val: PPHYSFS_uint64): Integer; cdecl;
  PHYSFS_readULE16: function(_file: PPHYSFS_File; val: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_readULE32: function(_file: PPHYSFS_File; val: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_readULE64: function(_file: PPHYSFS_File; val: PPHYSFS_uint64): Integer; cdecl;
  PHYSFS_registerArchiver: function(const archiver: PPHYSFS_Archiver): Integer; cdecl;
  PHYSFS_removeFromSearchPath: function(const oldDir: PUTF8Char): Integer; cdecl;
  PHYSFS_seek: function(handle: PPHYSFS_File; pos: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_setAllocator: function(const allocator: PPHYSFS_Allocator): Integer; cdecl;
  PHYSFS_setBuffer: function(handle: PPHYSFS_File; bufsize: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_setErrorCode: procedure(code: PHYSFS_ErrorCode); cdecl;
  PHYSFS_setRoot: function(const archive: PUTF8Char; const subdir: PUTF8Char): Integer; cdecl;
  PHYSFS_setSaneConfig: function(const organization: PUTF8Char; const appName: PUTF8Char; const archiveExt: PUTF8Char; includeCdRoms: Integer; archivesFirst: Integer): Integer; cdecl;
  PHYSFS_setWriteDir: function(const newDir: PUTF8Char): Integer; cdecl;
  PHYSFS_stat: function(const fname: PUTF8Char; stat: PPHYSFS_Stat_): Integer; cdecl;
  PHYSFS_supportedArchiveTypes: function(): PPPHYSFS_ArchiveInfo; cdecl;
  PHYSFS_swapSBE16: function(val: PHYSFS_sint16): PHYSFS_sint16; cdecl;
  PHYSFS_swapSBE32: function(val: PHYSFS_sint32): PHYSFS_sint32; cdecl;
  PHYSFS_swapSBE64: function(val: PHYSFS_sint64): PHYSFS_sint64; cdecl;
  PHYSFS_swapSLE16: function(val: PHYSFS_sint16): PHYSFS_sint16; cdecl;
  PHYSFS_swapSLE32: function(val: PHYSFS_sint32): PHYSFS_sint32; cdecl;
  PHYSFS_swapSLE64: function(val: PHYSFS_sint64): PHYSFS_sint64; cdecl;
  PHYSFS_swapUBE16: function(val: PHYSFS_uint16): PHYSFS_uint16; cdecl;
  PHYSFS_swapUBE32: function(val: PHYSFS_uint32): PHYSFS_uint32; cdecl;
  PHYSFS_swapUBE64: function(val: PHYSFS_uint64): PHYSFS_uint64; cdecl;
  PHYSFS_swapULE16: function(val: PHYSFS_uint16): PHYSFS_uint16; cdecl;
  PHYSFS_swapULE32: function(val: PHYSFS_uint32): PHYSFS_uint32; cdecl;
  PHYSFS_swapULE64: function(val: PHYSFS_uint64): PHYSFS_uint64; cdecl;
  PHYSFS_symbolicLinksPermitted: function(): Integer; cdecl;
  PHYSFS_tell: function(handle: PPHYSFS_File): PHYSFS_sint64; cdecl;
  PHYSFS_ucs4stricmp: function(const str1: PPHYSFS_uint32; const str2: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_unmount: function(const oldDir: PUTF8Char): Integer; cdecl;
  PHYSFS_utf16stricmp: function(const str1: PPHYSFS_uint16; const str2: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_utf8FromLatin1: procedure(const src: PUTF8Char; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUcs2: procedure(const src: PPHYSFS_uint16; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUcs4: procedure(const src: PPHYSFS_uint32; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUtf16: procedure(const src: PPHYSFS_uint16; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8stricmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  PHYSFS_utf8ToUcs2: procedure(const src: PUTF8Char; dst: PPHYSFS_uint16; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUcs4: procedure(const src: PUTF8Char; dst: PPHYSFS_uint32; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUtf16: procedure(const src: PUTF8Char; dst: PPHYSFS_uint16; len: PHYSFS_uint64); cdecl;
  PHYSFS_write: function(handle: PPHYSFS_File; const buffer: Pointer; objSize: PHYSFS_uint32; objCount: PHYSFS_uint32): PHYSFS_sint64; cdecl;
  PHYSFS_writeBytes: function(handle: PPHYSFS_File; const buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
  PHYSFS_writeSBE16: function(_file: PPHYSFS_File; val: PHYSFS_sint16): Integer; cdecl;
  PHYSFS_writeSBE32: function(_file: PPHYSFS_File; val: PHYSFS_sint32): Integer; cdecl;
  PHYSFS_writeSBE64: function(_file: PPHYSFS_File; val: PHYSFS_sint64): Integer; cdecl;
  PHYSFS_writeSLE16: function(_file: PPHYSFS_File; val: PHYSFS_sint16): Integer; cdecl;
  PHYSFS_writeSLE32: function(_file: PPHYSFS_File; val: PHYSFS_sint32): Integer; cdecl;
  PHYSFS_writeSLE64: function(_file: PPHYSFS_File; val: PHYSFS_sint64): Integer; cdecl;
  PHYSFS_writeUBE16: function(_file: PPHYSFS_File; val: PHYSFS_uint16): Integer; cdecl;
  PHYSFS_writeUBE32: function(_file: PPHYSFS_File; val: PHYSFS_uint32): Integer; cdecl;
  PHYSFS_writeUBE64: function(_file: PPHYSFS_File; val: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_writeULE16: function(_file: PPHYSFS_File; val: PHYSFS_uint16): Integer; cdecl;
  PHYSFS_writeULE32: function(_file: PPHYSFS_File; val: PHYSFS_uint32): Integer; cdecl;
  PHYSFS_writeULE64: function(_file: PPHYSFS_File; val: PHYSFS_uint64): Integer; cdecl;
  plm_audio_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_audio_t; cdecl;
  plm_audio_decode: function(self: Pplm_audio_t): Pplm_samples_t; cdecl;
  plm_audio_destroy: procedure(self: Pplm_audio_t); cdecl;
  plm_audio_get_samplerate: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_get_time: function(self: Pplm_audio_t): Double; cdecl;
  plm_audio_has_ended: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_has_header: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_rewind: procedure(self: Pplm_audio_t); cdecl;
  plm_audio_set_time: procedure(self: Pplm_audio_t; time: Double); cdecl;
  plm_buffer_create_for_appending: function(initial_capacity: NativeUInt): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_capacity: function(capacity: NativeUInt): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_file: function(fh: PPointer; close_when_done: Integer): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_filename: function(const filename: PUTF8Char): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_memory: function(bytes: PUInt8; length: NativeUInt; free_when_done: Integer): Pplm_buffer_t; cdecl;
  plm_buffer_destroy: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_get_remaining: function(self: Pplm_buffer_t): NativeUInt; cdecl;
  plm_buffer_get_size: function(self: Pplm_buffer_t): NativeUInt; cdecl;
  plm_buffer_has_ended: function(self: Pplm_buffer_t): Integer; cdecl;
  plm_buffer_rewind: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_set_load_callback: procedure(self: Pplm_buffer_t; fp: plm_buffer_load_callback; user: Pointer); cdecl;
  plm_buffer_signal_end: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_write: function(self: Pplm_buffer_t; bytes: PUInt8; length: NativeUInt): NativeUInt; cdecl;
  plm_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_t; cdecl;
  plm_create_with_file: function(fh: PPointer; close_when_done: Integer): Pplm_t; cdecl;
  plm_create_with_filename: function(const filename: PUTF8Char): Pplm_t; cdecl;
  plm_create_with_memory: function(bytes: PUInt8; length: NativeUInt; free_when_done: Integer): Pplm_t; cdecl;
  plm_decode: procedure(self: Pplm_t; seconds: Double); cdecl;
  plm_decode_audio: function(self: Pplm_t): Pplm_samples_t; cdecl;
  plm_decode_video: function(self: Pplm_t): Pplm_frame_t; cdecl;
  plm_demux_create: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_demux_t; cdecl;
  plm_demux_decode: function(self: Pplm_demux_t): Pplm_packet_t; cdecl;
  plm_demux_destroy: procedure(self: Pplm_demux_t); cdecl;
  plm_demux_get_duration: function(self: Pplm_demux_t; _type: Integer): Double; cdecl;
  plm_demux_get_num_audio_streams: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_get_num_video_streams: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_get_start_time: function(self: Pplm_demux_t; _type: Integer): Double; cdecl;
  plm_demux_has_ended: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_has_headers: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_rewind: procedure(self: Pplm_demux_t); cdecl;
  plm_demux_seek: function(self: Pplm_demux_t; time: Double; _type: Integer; force_intra: Integer): Pplm_packet_t; cdecl;
  plm_destroy: procedure(self: Pplm_t); cdecl;
  plm_frame_to_abgr: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_argb: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_bgr: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_bgra: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_rgb: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_rgba: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_get_audio_enabled: function(self: Pplm_t): Integer; cdecl;
  plm_get_audio_lead_time: function(self: Pplm_t): Double; cdecl;
  plm_get_duration: function(self: Pplm_t): Double; cdecl;
  plm_get_framerate: function(self: Pplm_t): Double; cdecl;
  plm_get_height: function(self: Pplm_t): Integer; cdecl;
  plm_get_loop: function(self: Pplm_t): Integer; cdecl;
  plm_get_num_audio_streams: function(self: Pplm_t): Integer; cdecl;
  plm_get_num_video_streams: function(self: Pplm_t): Integer; cdecl;
  plm_get_samplerate: function(self: Pplm_t): Integer; cdecl;
  plm_get_time: function(self: Pplm_t): Double; cdecl;
  plm_get_video_enabled: function(self: Pplm_t): Integer; cdecl;
  plm_get_width: function(self: Pplm_t): Integer; cdecl;
  plm_has_ended: function(self: Pplm_t): Integer; cdecl;
  plm_has_headers: function(self: Pplm_t): Integer; cdecl;
  plm_rewind: procedure(self: Pplm_t); cdecl;
  plm_seek: function(self: Pplm_t; time: Double; seek_exact: Integer): Integer; cdecl;
  plm_seek_frame: function(self: Pplm_t; time: Double; seek_exact: Integer): Pplm_frame_t; cdecl;
  plm_set_audio_decode_callback: procedure(self: Pplm_t; fp: plm_audio_decode_callback; user: Pointer); cdecl;
  plm_set_audio_enabled: procedure(self: Pplm_t; enabled: Integer); cdecl;
  plm_set_audio_lead_time: procedure(self: Pplm_t; lead_time: Double); cdecl;
  plm_set_audio_stream: procedure(self: Pplm_t; stream_index: Integer); cdecl;
  plm_set_loop: procedure(self: Pplm_t; loop: Integer); cdecl;
  plm_set_video_decode_callback: procedure(self: Pplm_t; fp: plm_video_decode_callback; user: Pointer); cdecl;
  plm_set_video_enabled: procedure(self: Pplm_t; enabled: Integer); cdecl;
  plm_video_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_video_t; cdecl;
  plm_video_decode: function(self: Pplm_video_t): Pplm_frame_t; cdecl;
  plm_video_destroy: procedure(self: Pplm_video_t); cdecl;
  plm_video_get_framerate: function(self: Pplm_video_t): Double; cdecl;
  plm_video_get_height: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_get_time: function(self: Pplm_video_t): Double; cdecl;
  plm_video_get_width: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_has_ended: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_has_header: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_rewind: procedure(self: Pplm_video_t); cdecl;
  plm_video_set_no_delay: procedure(self: Pplm_video_t; no_delay: Integer); cdecl;
  plm_video_set_time: procedure(self: Pplm_video_t; time: Double); cdecl;
  stbi_convert_iphone_png_to_rgb: procedure(flag_true_if_should_convert: Integer); cdecl;
  stbi_convert_iphone_png_to_rgb_thread: procedure(flag_true_if_should_convert: Integer); cdecl;
  stbi_failure_reason: function(): PUTF8Char; cdecl;
  stbi_flip_vertically_on_write: procedure(flip_boolean: Integer); cdecl;
  stbi_hdr_to_ldr_gamma: procedure(gamma: Single); cdecl;
  stbi_hdr_to_ldr_scale: procedure(scale: Single); cdecl;
  stbi_image_free: procedure(retval_from_stbi_load: Pointer); cdecl;
  stbi_info: function(const filename: PUTF8Char; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_info_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_info_from_file: function(f: PPointer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_info_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_is_16_bit: function(const filename: PUTF8Char): Integer; cdecl;
  stbi_is_16_bit_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer): Integer; cdecl;
  stbi_is_16_bit_from_file: function(f: PPointer): Integer; cdecl;
  stbi_is_16_bit_from_memory: function(const buffer: Pstbi_uc; len: Integer): Integer; cdecl;
  stbi_is_hdr: function(const filename: PUTF8Char): Integer; cdecl;
  stbi_is_hdr_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer): Integer; cdecl;
  stbi_is_hdr_from_file: function(f: PPointer): Integer; cdecl;
  stbi_is_hdr_from_memory: function(const buffer: Pstbi_uc; len: Integer): Integer; cdecl;
  stbi_ldr_to_hdr_gamma: procedure(gamma: Single); cdecl;
  stbi_ldr_to_hdr_scale: procedure(scale: Single); cdecl;
  stbi_load: function(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_16: function(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_16_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_16_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_from_file: function(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_from_file_16: function(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_gif_from_memory: function(const buffer: Pstbi_uc; len: Integer; delays: PPInteger; x: PInteger; y: PInteger; z: PInteger; comp: PInteger; req_comp: Integer): Pstbi_uc; cdecl;
  stbi_loadf: function(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_loadf_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_loadf_from_file: function(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_loadf_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_set_flip_vertically_on_load: procedure(flag_true_if_should_flip: Integer); cdecl;
  stbi_set_flip_vertically_on_load_thread: procedure(flag_true_if_should_flip: Integer); cdecl;
  stbi_set_unpremultiply_on_load: procedure(flag_true_if_should_unpremultiply: Integer); cdecl;
  stbi_set_unpremultiply_on_load_thread: procedure(flag_true_if_should_unpremultiply: Integer); cdecl;
  stbi_write_bmp: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_write_bmp_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_write_hdr: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: PSingle): Integer; cdecl;
  stbi_write_hdr_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: PSingle): Integer; cdecl;
  stbi_write_jpg: function(const filename: PUTF8Char; x: Integer; y: Integer; comp: Integer; const data: Pointer; quality: Integer): Integer; cdecl;
  stbi_write_jpg_to_func: function(func: Pstbi_write_func; context: Pointer; x: Integer; y: Integer; comp: Integer; const data: Pointer; quality: Integer): Integer; cdecl;
  stbi_write_png: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: Pointer; stride_in_bytes: Integer): Integer; cdecl;
  stbi_write_png_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: Pointer; stride_in_bytes: Integer): Integer; cdecl;
  stbi_write_tga: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_write_tga_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_zlib_decode_buffer: function(obuffer: PUTF8Char; olen: Integer; const ibuffer: PUTF8Char; ilen: Integer): Integer; cdecl;
  stbi_zlib_decode_malloc: function(const buffer: PUTF8Char; len: Integer; outlen: PInteger): PUTF8Char; cdecl;
  stbi_zlib_decode_malloc_guesssize: function(const buffer: PUTF8Char; len: Integer; initial_size: Integer; outlen: PInteger): PUTF8Char; cdecl;
  stbi_zlib_decode_malloc_guesssize_headerflag: function(const buffer: PUTF8Char; len: Integer; initial_size: Integer; outlen: PInteger; parse_header: Integer): PUTF8Char; cdecl;
  stbi_zlib_decode_noheader_buffer: function(obuffer: PUTF8Char; olen: Integer; const ibuffer: PUTF8Char; ilen: Integer): Integer; cdecl;
  stbi_zlib_decode_noheader_malloc: function(const buffer: PUTF8Char; len: Integer; outlen: PInteger): PUTF8Char; cdecl;
  stbtt_BakeFontBitmap: function(const data: PByte; offset: Integer; pixel_height: Single; pixels: PByte; pw: Integer; ph: Integer; first_char: Integer; num_chars: Integer; chardata: Pstbtt_bakedchar): Integer; cdecl;
  stbtt_CompareUTF8toUTF16_bigendian: function(const s1: PUTF8Char; len1: Integer; const s2: PUTF8Char; len2: Integer): Integer; cdecl;
  stbtt_FindGlyphIndex: function(const info: Pstbtt_fontinfo; unicode_codepoint: Integer): Integer; cdecl;
  stbtt_FindMatchingFont: function(const fontdata: PByte; const name: PUTF8Char; flags: Integer): Integer; cdecl;
  stbtt_FindSVGDoc: function(const info: Pstbtt_fontinfo; gl: Integer): PByte; cdecl;
  stbtt_FreeBitmap: procedure(bitmap: PByte; userdata: Pointer); cdecl;
  stbtt_FreeSDF: procedure(bitmap: PByte; userdata: Pointer); cdecl;
  stbtt_FreeShape: procedure(const info: Pstbtt_fontinfo; vertices: Pstbtt_vertex); cdecl;
  stbtt_GetBakedQuad: procedure(const chardata: Pstbtt_bakedchar; pw: Integer; ph: Integer; char_index: Integer; xpos: PSingle; ypos: PSingle; q: Pstbtt_aligned_quad; opengl_fillrule: Integer); cdecl;
  stbtt_GetCodepointBitmap: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; codepoint: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetCodepointBitmapBox: procedure(const font: Pstbtt_fontinfo; codepoint: Integer; scale_x: Single; scale_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetCodepointBitmapBoxSubpixel: procedure(const font: Pstbtt_fontinfo; codepoint: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetCodepointBitmapSubpixel: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; codepoint: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetCodepointBox: function(const info: Pstbtt_fontinfo; codepoint: Integer; x0: PInteger; y0: PInteger; x1: PInteger; y1: PInteger): Integer; cdecl;
  stbtt_GetCodepointHMetrics: procedure(const info: Pstbtt_fontinfo; codepoint: Integer; advanceWidth: PInteger; leftSideBearing: PInteger); cdecl;
  stbtt_GetCodepointKernAdvance: function(const info: Pstbtt_fontinfo; ch1: Integer; ch2: Integer): Integer; cdecl;
  stbtt_GetCodepointSDF: function(const info: Pstbtt_fontinfo; scale: Single; codepoint: Integer; padding: Integer; onedge_value: Byte; pixel_dist_scale: Single; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetCodepointShape: function(const info: Pstbtt_fontinfo; unicode_codepoint: Integer; vertices: PPstbtt_vertex): Integer; cdecl;
  stbtt_GetCodepointSVG: function(const info: Pstbtt_fontinfo; unicode_codepoint: Integer; svg: PPUTF8Char): Integer; cdecl;
  stbtt_GetFontBoundingBox: procedure(const info: Pstbtt_fontinfo; x0: PInteger; y0: PInteger; x1: PInteger; y1: PInteger); cdecl;
  stbtt_GetFontNameString: function(const font: Pstbtt_fontinfo; length: PInteger; platformID: Integer; encodingID: Integer; languageID: Integer; nameID: Integer): PUTF8Char; cdecl;
  stbtt_GetFontOffsetForIndex: function(const data: PByte; index: Integer): Integer; cdecl;
  stbtt_GetFontVMetrics: procedure(const info: Pstbtt_fontinfo; ascent: PInteger; descent: PInteger; lineGap: PInteger); cdecl;
  stbtt_GetFontVMetricsOS2: function(const info: Pstbtt_fontinfo; typoAscent: PInteger; typoDescent: PInteger; typoLineGap: PInteger): Integer; cdecl;
  stbtt_GetGlyphBitmap: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; glyph: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetGlyphBitmapBox: procedure(const font: Pstbtt_fontinfo; glyph: Integer; scale_x: Single; scale_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetGlyphBitmapBoxSubpixel: procedure(const font: Pstbtt_fontinfo; glyph: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetGlyphBitmapSubpixel: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; glyph: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetGlyphBox: function(const info: Pstbtt_fontinfo; glyph_index: Integer; x0: PInteger; y0: PInteger; x1: PInteger; y1: PInteger): Integer; cdecl;
  stbtt_GetGlyphHMetrics: procedure(const info: Pstbtt_fontinfo; glyph_index: Integer; advanceWidth: PInteger; leftSideBearing: PInteger); cdecl;
  stbtt_GetGlyphKernAdvance: function(const info: Pstbtt_fontinfo; glyph1: Integer; glyph2: Integer): Integer; cdecl;
  stbtt_GetGlyphSDF: function(const info: Pstbtt_fontinfo; scale: Single; glyph: Integer; padding: Integer; onedge_value: Byte; pixel_dist_scale: Single; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetGlyphShape: function(const info: Pstbtt_fontinfo; glyph_index: Integer; vertices: PPstbtt_vertex): Integer; cdecl;
  stbtt_GetGlyphSVG: function(const info: Pstbtt_fontinfo; gl: Integer; svg: PPUTF8Char): Integer; cdecl;
  stbtt_GetKerningTable: function(const info: Pstbtt_fontinfo; table: Pstbtt_kerningentry; table_length: Integer): Integer; cdecl;
  stbtt_GetKerningTableLength: function(const info: Pstbtt_fontinfo): Integer; cdecl;
  stbtt_GetNumberOfFonts: function(const data: PByte): Integer; cdecl;
  stbtt_GetPackedQuad: procedure(const chardata: Pstbtt_packedchar; pw: Integer; ph: Integer; char_index: Integer; xpos: PSingle; ypos: PSingle; q: Pstbtt_aligned_quad; align_to_integer: Integer); cdecl;
  stbtt_GetScaledFontVMetrics: procedure(const fontdata: PByte; index: Integer; size: Single; ascent: PSingle; descent: PSingle; lineGap: PSingle); cdecl;
  stbtt_InitFont: function(info: Pstbtt_fontinfo; const data: PByte; offset: Integer): Integer; cdecl;
  stbtt_IsGlyphEmpty: function(const info: Pstbtt_fontinfo; glyph_index: Integer): Integer; cdecl;
  stbtt_MakeCodepointBitmap: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; codepoint: Integer); cdecl;
  stbtt_MakeCodepointBitmapSubpixel: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; codepoint: Integer); cdecl;
  stbtt_MakeCodepointBitmapSubpixelPrefilter: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; oversample_x: Integer; oversample_y: Integer; sub_x: PSingle; sub_y: PSingle; codepoint: Integer); cdecl;
  stbtt_MakeGlyphBitmap: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; glyph: Integer); cdecl;
  stbtt_MakeGlyphBitmapSubpixel: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; glyph: Integer); cdecl;
  stbtt_MakeGlyphBitmapSubpixelPrefilter: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; oversample_x: Integer; oversample_y: Integer; sub_x: PSingle; sub_y: PSingle; glyph: Integer); cdecl;
  stbtt_PackBegin: function(spc: Pstbtt_pack_context; pixels: PByte; width: Integer; height: Integer; stride_in_bytes: Integer; padding: Integer; alloc_context: Pointer): Integer; cdecl;
  stbtt_PackEnd: procedure(spc: Pstbtt_pack_context); cdecl;
  stbtt_PackFontRange: function(spc: Pstbtt_pack_context; const fontdata: PByte; font_index: Integer; font_size: Single; first_unicode_char_in_range: Integer; num_chars_in_range: Integer; chardata_for_range: Pstbtt_packedchar): Integer; cdecl;
  stbtt_PackFontRanges: function(spc: Pstbtt_pack_context; const fontdata: PByte; font_index: Integer; ranges: Pstbtt_pack_range; num_ranges: Integer): Integer; cdecl;
  stbtt_PackFontRangesGatherRects: function(spc: Pstbtt_pack_context; const info: Pstbtt_fontinfo; ranges: Pstbtt_pack_range; num_ranges: Integer; rects: Pstbrp_rect): Integer; cdecl;
  stbtt_PackFontRangesPackRects: procedure(spc: Pstbtt_pack_context; rects: Pstbrp_rect; num_rects: Integer); cdecl;
  stbtt_PackFontRangesRenderIntoRects: function(spc: Pstbtt_pack_context; const info: Pstbtt_fontinfo; ranges: Pstbtt_pack_range; num_ranges: Integer; rects: Pstbrp_rect): Integer; cdecl;
  stbtt_PackSetOversampling: procedure(spc: Pstbtt_pack_context; h_oversample: Cardinal; v_oversample: Cardinal); cdecl;
  stbtt_PackSetSkipMissingCodepoints: procedure(spc: Pstbtt_pack_context; skip: Integer); cdecl;
  stbtt_Rasterize: procedure(result: Pstbtt__bitmap; flatness_in_pixels: Single; vertices: Pstbtt_vertex; num_verts: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; x_off: Integer; y_off: Integer; invert: Integer; userdata: Pointer); cdecl;
  stbtt_ScaleForMappingEmToPixels: function(const info: Pstbtt_fontinfo; pixels: Single): Single; cdecl;
  stbtt_ScaleForPixelHeight: function(const info: Pstbtt_fontinfo; pixels: Single): Single; cdecl;
  zipClose: function(_file: zipFile; const global_comment: PUTF8Char): Integer; cdecl;
  zipCloseFileInZip: function(_file: zipFile): Integer; cdecl;
  zipOpen: function(const pathname: PUTF8Char; append: Integer): zipFile; cdecl;
  zipOpenNewFileInZip3: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; windowBits: Integer; memLevel: Integer; strategy: Integer; const password: PUTF8Char; crcForCrypting: uLong): Integer; cdecl;
  zipWriteInFileInZip: function(_file: zipFile; const buf: Pointer; len: Cardinal): Integer; cdecl;
{$ENDREGION}

implementation

{$R GLFW.res}

uses
  System.SysUtils,
  System.IOUtils,
  System.Classes,
  System.Zip,
  WinAPI.ShellAPI;

var
  LDllHandle: THandle;
  LDllName: string;

procedure DeferDelFile(const aFilename: string);
var
  LCode: TStringList;
  LFilename: string;

  procedure C(const aMsg: string; const aArgs: array of const);
  var
    LLine: string;
  begin
    LLine := Format(aMsg, aArgs);
    LCode.Add(LLine);
  end;

begin
  if aFilename.IsEmpty then Exit;
  LFilename := ChangeFileExt(aFilename, '');
  LFilename := LFilename + '_DeferDelFile.bat';

  LCode := TStringList.Create;
  try
    C('@echo off', []);
    C(':Repeat', []);
    C('del "%s"', [aFilename]);
    C('if exist "%s" goto Repeat', [aFilename]);
    C('del "%s"', [LFilename]);
    LCode.SaveToFile(LFilename);
  finally
    FreeAndNil(LCode);
  end;

  if FileExists(LFilename) then
  begin
    ShellExecute(0, 'open', PChar(LFilename), nil, nil, SW_HIDE);
  end;
end;

procedure LoadDLL;
var
  LResStream: TResourceStream;
  LZipFile: TZipFile;
  LZipStream: TStream;
  LFileStream: TFileStream;
  LHeader: TZipHeader;
begin
  LResStream := TResourceStream.Create(HInstance, 'RESDATA', RT_RCDATA);
  LZipFile := TZipFile.Create;
  LZipFile.Open(LResStream, zmRead);
  LZipFile.Read(0, LZipStream, LHeader);
  LDllName := TPath.GetTempFileName;
  LFileStream := TFile.Create(LDllName);
  LFileStream.CopyFrom(LZipStream, LZipStream.Size);
  FreeAndNil(LFileStream);
  FreeAndNil(LZipStream);
  FreeAndNil(LZipFile);
  FreeAndNil(LResStream);

  LDllHandle := SafeLoadLibrary(LDllName);

  {$REGION 'Init DLL Export Variables'}
  enet_address_get_host := GetProcAddress(LDllHandle, 'enet_address_get_host');
  enet_address_get_host_ip := GetProcAddress(LDllHandle, 'enet_address_get_host_ip');
  enet_address_set_host := GetProcAddress(LDllHandle, 'enet_address_set_host');
  enet_address_set_host_ip := GetProcAddress(LDllHandle, 'enet_address_set_host_ip');
  enet_crc32 := GetProcAddress(LDllHandle, 'enet_crc32');
  enet_deinitialize := GetProcAddress(LDllHandle, 'enet_deinitialize');
  enet_free := GetProcAddress(LDllHandle, 'enet_free');
  enet_host_bandwidth_limit := GetProcAddress(LDllHandle, 'enet_host_bandwidth_limit');
  enet_host_bandwidth_throttle := GetProcAddress(LDllHandle, 'enet_host_bandwidth_throttle');
  enet_host_broadcast := GetProcAddress(LDllHandle, 'enet_host_broadcast');
  enet_host_channel_limit := GetProcAddress(LDllHandle, 'enet_host_channel_limit');
  enet_host_check_events := GetProcAddress(LDllHandle, 'enet_host_check_events');
  enet_host_compress := GetProcAddress(LDllHandle, 'enet_host_compress');
  enet_host_compress_with_range_coder := GetProcAddress(LDllHandle, 'enet_host_compress_with_range_coder');
  enet_host_connect := GetProcAddress(LDllHandle, 'enet_host_connect');
  enet_host_create := GetProcAddress(LDllHandle, 'enet_host_create');
  enet_host_destroy := GetProcAddress(LDllHandle, 'enet_host_destroy');
  enet_host_flush := GetProcAddress(LDllHandle, 'enet_host_flush');
  enet_host_random := GetProcAddress(LDllHandle, 'enet_host_random');
  enet_host_random_seed := GetProcAddress(LDllHandle, 'enet_host_random_seed');
  enet_host_service := GetProcAddress(LDllHandle, 'enet_host_service');
  enet_initialize := GetProcAddress(LDllHandle, 'enet_initialize');
  enet_initialize_with_callbacks := GetProcAddress(LDllHandle, 'enet_initialize_with_callbacks');
  enet_linked_version := GetProcAddress(LDllHandle, 'enet_linked_version');
  enet_list_clear := GetProcAddress(LDllHandle, 'enet_list_clear');
  enet_list_insert := GetProcAddress(LDllHandle, 'enet_list_insert');
  enet_list_move := GetProcAddress(LDllHandle, 'enet_list_move');
  enet_list_remove := GetProcAddress(LDllHandle, 'enet_list_remove');
  enet_list_size := GetProcAddress(LDllHandle, 'enet_list_size');
  enet_malloc := GetProcAddress(LDllHandle, 'enet_malloc');
  enet_packet_create := GetProcAddress(LDllHandle, 'enet_packet_create');
  enet_packet_destroy := GetProcAddress(LDllHandle, 'enet_packet_destroy');
  enet_packet_resize := GetProcAddress(LDllHandle, 'enet_packet_resize');
  enet_peer_disconnect := GetProcAddress(LDllHandle, 'enet_peer_disconnect');
  enet_peer_disconnect_later := GetProcAddress(LDllHandle, 'enet_peer_disconnect_later');
  enet_peer_disconnect_now := GetProcAddress(LDllHandle, 'enet_peer_disconnect_now');
  enet_peer_dispatch_incoming_reliable_commands := GetProcAddress(LDllHandle, 'enet_peer_dispatch_incoming_reliable_commands');
  enet_peer_dispatch_incoming_unreliable_commands := GetProcAddress(LDllHandle, 'enet_peer_dispatch_incoming_unreliable_commands');
  enet_peer_on_connect := GetProcAddress(LDllHandle, 'enet_peer_on_connect');
  enet_peer_on_disconnect := GetProcAddress(LDllHandle, 'enet_peer_on_disconnect');
  enet_peer_ping := GetProcAddress(LDllHandle, 'enet_peer_ping');
  enet_peer_ping_interval := GetProcAddress(LDllHandle, 'enet_peer_ping_interval');
  enet_peer_queue_acknowledgement := GetProcAddress(LDllHandle, 'enet_peer_queue_acknowledgement');
  enet_peer_queue_incoming_command := GetProcAddress(LDllHandle, 'enet_peer_queue_incoming_command');
  enet_peer_queue_outgoing_command := GetProcAddress(LDllHandle, 'enet_peer_queue_outgoing_command');
  enet_peer_receive := GetProcAddress(LDllHandle, 'enet_peer_receive');
  enet_peer_reset := GetProcAddress(LDllHandle, 'enet_peer_reset');
  enet_peer_reset_queues := GetProcAddress(LDllHandle, 'enet_peer_reset_queues');
  enet_peer_send := GetProcAddress(LDllHandle, 'enet_peer_send');
  enet_peer_setup_outgoing_command := GetProcAddress(LDllHandle, 'enet_peer_setup_outgoing_command');
  enet_peer_throttle := GetProcAddress(LDllHandle, 'enet_peer_throttle');
  enet_peer_throttle_configure := GetProcAddress(LDllHandle, 'enet_peer_throttle_configure');
  enet_peer_timeout := GetProcAddress(LDllHandle, 'enet_peer_timeout');
  enet_protocol_command_size := GetProcAddress(LDllHandle, 'enet_protocol_command_size');
  enet_range_coder_compress := GetProcAddress(LDllHandle, 'enet_range_coder_compress');
  enet_range_coder_create := GetProcAddress(LDllHandle, 'enet_range_coder_create');
  enet_range_coder_decompress := GetProcAddress(LDllHandle, 'enet_range_coder_decompress');
  enet_range_coder_destroy := GetProcAddress(LDllHandle, 'enet_range_coder_destroy');
  enet_socket_accept := GetProcAddress(LDllHandle, 'enet_socket_accept');
  enet_socket_bind := GetProcAddress(LDllHandle, 'enet_socket_bind');
  enet_socket_connect := GetProcAddress(LDllHandle, 'enet_socket_connect');
  enet_socket_create := GetProcAddress(LDllHandle, 'enet_socket_create');
  enet_socket_destroy := GetProcAddress(LDllHandle, 'enet_socket_destroy');
  enet_socket_get_address := GetProcAddress(LDllHandle, 'enet_socket_get_address');
  enet_socket_get_option := GetProcAddress(LDllHandle, 'enet_socket_get_option');
  enet_socket_listen := GetProcAddress(LDllHandle, 'enet_socket_listen');
  enet_socket_receive := GetProcAddress(LDllHandle, 'enet_socket_receive');
  enet_socket_send := GetProcAddress(LDllHandle, 'enet_socket_send');
  enet_socket_set_option := GetProcAddress(LDllHandle, 'enet_socket_set_option');
  enet_socket_shutdown := GetProcAddress(LDllHandle, 'enet_socket_shutdown');
  enet_socket_wait := GetProcAddress(LDllHandle, 'enet_socket_wait');
  enet_socketset_select := GetProcAddress(LDllHandle, 'enet_socketset_select');
  enet_time_get := GetProcAddress(LDllHandle, 'enet_time_get');
  enet_time_set := GetProcAddress(LDllHandle, 'enet_time_set');
  glfwCreateCursor := GetProcAddress(LDllHandle, 'glfwCreateCursor');
  glfwCreateStandardCursor := GetProcAddress(LDllHandle, 'glfwCreateStandardCursor');
  glfwCreateWindow := GetProcAddress(LDllHandle, 'glfwCreateWindow');
  glfwDefaultWindowHints := GetProcAddress(LDllHandle, 'glfwDefaultWindowHints');
  glfwDestroyCursor := GetProcAddress(LDllHandle, 'glfwDestroyCursor');
  glfwDestroyWindow := GetProcAddress(LDllHandle, 'glfwDestroyWindow');
  glfwExtensionSupported := GetProcAddress(LDllHandle, 'glfwExtensionSupported');
  glfwFocusWindow := GetProcAddress(LDllHandle, 'glfwFocusWindow');
  glfwGetClipboardString := GetProcAddress(LDllHandle, 'glfwGetClipboardString');
  glfwGetCurrentContext := GetProcAddress(LDllHandle, 'glfwGetCurrentContext');
  glfwGetCursorPos := GetProcAddress(LDllHandle, 'glfwGetCursorPos');
  glfwGetError := GetProcAddress(LDllHandle, 'glfwGetError');
  glfwGetFramebufferSize := GetProcAddress(LDllHandle, 'glfwGetFramebufferSize');
  glfwGetGamepadName := GetProcAddress(LDllHandle, 'glfwGetGamepadName');
  glfwGetGamepadState := GetProcAddress(LDllHandle, 'glfwGetGamepadState');
  glfwGetGammaRamp := GetProcAddress(LDllHandle, 'glfwGetGammaRamp');
  glfwGetInputMode := GetProcAddress(LDllHandle, 'glfwGetInputMode');
  glfwGetJoystickAxes := GetProcAddress(LDllHandle, 'glfwGetJoystickAxes');
  glfwGetJoystickButtons := GetProcAddress(LDllHandle, 'glfwGetJoystickButtons');
  glfwGetJoystickGUID := GetProcAddress(LDllHandle, 'glfwGetJoystickGUID');
  glfwGetJoystickHats := GetProcAddress(LDllHandle, 'glfwGetJoystickHats');
  glfwGetJoystickName := GetProcAddress(LDllHandle, 'glfwGetJoystickName');
  glfwGetJoystickUserPointer := GetProcAddress(LDllHandle, 'glfwGetJoystickUserPointer');
  glfwGetKey := GetProcAddress(LDllHandle, 'glfwGetKey');
  glfwGetKeyName := GetProcAddress(LDllHandle, 'glfwGetKeyName');
  glfwGetKeyScancode := GetProcAddress(LDllHandle, 'glfwGetKeyScancode');
  glfwGetMonitorContentScale := GetProcAddress(LDllHandle, 'glfwGetMonitorContentScale');
  glfwGetMonitorName := GetProcAddress(LDllHandle, 'glfwGetMonitorName');
  glfwGetMonitorPhysicalSize := GetProcAddress(LDllHandle, 'glfwGetMonitorPhysicalSize');
  glfwGetMonitorPos := GetProcAddress(LDllHandle, 'glfwGetMonitorPos');
  glfwGetMonitors := GetProcAddress(LDllHandle, 'glfwGetMonitors');
  glfwGetMonitorUserPointer := GetProcAddress(LDllHandle, 'glfwGetMonitorUserPointer');
  glfwGetMonitorWorkarea := GetProcAddress(LDllHandle, 'glfwGetMonitorWorkarea');
  glfwGetMouseButton := GetProcAddress(LDllHandle, 'glfwGetMouseButton');
  glfwGetPrimaryMonitor := GetProcAddress(LDllHandle, 'glfwGetPrimaryMonitor');
  glfwGetProcAddress := GetProcAddress(LDllHandle, 'glfwGetProcAddress');
  glfwGetRequiredInstanceExtensions := GetProcAddress(LDllHandle, 'glfwGetRequiredInstanceExtensions');
  glfwGetTime := GetProcAddress(LDllHandle, 'glfwGetTime');
  glfwGetTimerFrequency := GetProcAddress(LDllHandle, 'glfwGetTimerFrequency');
  glfwGetTimerValue := GetProcAddress(LDllHandle, 'glfwGetTimerValue');
  glfwGetVersion := GetProcAddress(LDllHandle, 'glfwGetVersion');
  glfwGetVersionString := GetProcAddress(LDllHandle, 'glfwGetVersionString');
  glfwGetVideoMode := GetProcAddress(LDllHandle, 'glfwGetVideoMode');
  glfwGetVideoModes := GetProcAddress(LDllHandle, 'glfwGetVideoModes');
  glfwGetWindowAttrib := GetProcAddress(LDllHandle, 'glfwGetWindowAttrib');
  glfwGetWindowContentScale := GetProcAddress(LDllHandle, 'glfwGetWindowContentScale');
  glfwGetWindowFrameSize := GetProcAddress(LDllHandle, 'glfwGetWindowFrameSize');
  glfwGetWindowMonitor := GetProcAddress(LDllHandle, 'glfwGetWindowMonitor');
  glfwGetWindowOpacity := GetProcAddress(LDllHandle, 'glfwGetWindowOpacity');
  glfwGetWindowPos := GetProcAddress(LDllHandle, 'glfwGetWindowPos');
  glfwGetWindowSize := GetProcAddress(LDllHandle, 'glfwGetWindowSize');
  glfwGetWindowUserPointer := GetProcAddress(LDllHandle, 'glfwGetWindowUserPointer');
  glfwHideWindow := GetProcAddress(LDllHandle, 'glfwHideWindow');
  glfwIconifyWindow := GetProcAddress(LDllHandle, 'glfwIconifyWindow');
  glfwInit := GetProcAddress(LDllHandle, 'glfwInit');
  glfwInitHint := GetProcAddress(LDllHandle, 'glfwInitHint');
  glfwJoystickIsGamepad := GetProcAddress(LDllHandle, 'glfwJoystickIsGamepad');
  glfwJoystickPresent := GetProcAddress(LDllHandle, 'glfwJoystickPresent');
  glfwMakeContextCurrent := GetProcAddress(LDllHandle, 'glfwMakeContextCurrent');
  glfwMaximizeWindow := GetProcAddress(LDllHandle, 'glfwMaximizeWindow');
  glfwPollEvents := GetProcAddress(LDllHandle, 'glfwPollEvents');
  glfwPostEmptyEvent := GetProcAddress(LDllHandle, 'glfwPostEmptyEvent');
  glfwRawMouseMotionSupported := GetProcAddress(LDllHandle, 'glfwRawMouseMotionSupported');
  glfwRequestWindowAttention := GetProcAddress(LDllHandle, 'glfwRequestWindowAttention');
  glfwRestoreWindow := GetProcAddress(LDllHandle, 'glfwRestoreWindow');
  glfwSetCharCallback := GetProcAddress(LDllHandle, 'glfwSetCharCallback');
  glfwSetCharModsCallback := GetProcAddress(LDllHandle, 'glfwSetCharModsCallback');
  glfwSetClipboardString := GetProcAddress(LDllHandle, 'glfwSetClipboardString');
  glfwSetCursor := GetProcAddress(LDllHandle, 'glfwSetCursor');
  glfwSetCursorEnterCallback := GetProcAddress(LDllHandle, 'glfwSetCursorEnterCallback');
  glfwSetCursorPos := GetProcAddress(LDllHandle, 'glfwSetCursorPos');
  glfwSetCursorPosCallback := GetProcAddress(LDllHandle, 'glfwSetCursorPosCallback');
  glfwSetDropCallback := GetProcAddress(LDllHandle, 'glfwSetDropCallback');
  glfwSetErrorCallback := GetProcAddress(LDllHandle, 'glfwSetErrorCallback');
  glfwSetFramebufferSizeCallback := GetProcAddress(LDllHandle, 'glfwSetFramebufferSizeCallback');
  glfwSetGamma := GetProcAddress(LDllHandle, 'glfwSetGamma');
  glfwSetGammaRamp := GetProcAddress(LDllHandle, 'glfwSetGammaRamp');
  glfwSetInputMode := GetProcAddress(LDllHandle, 'glfwSetInputMode');
  glfwSetJoystickCallback := GetProcAddress(LDllHandle, 'glfwSetJoystickCallback');
  glfwSetJoystickUserPointer := GetProcAddress(LDllHandle, 'glfwSetJoystickUserPointer');
  glfwSetKeyCallback := GetProcAddress(LDllHandle, 'glfwSetKeyCallback');
  glfwSetMonitorCallback := GetProcAddress(LDllHandle, 'glfwSetMonitorCallback');
  glfwSetMonitorUserPointer := GetProcAddress(LDllHandle, 'glfwSetMonitorUserPointer');
  glfwSetMouseButtonCallback := GetProcAddress(LDllHandle, 'glfwSetMouseButtonCallback');
  glfwSetScrollCallback := GetProcAddress(LDllHandle, 'glfwSetScrollCallback');
  glfwSetTime := GetProcAddress(LDllHandle, 'glfwSetTime');
  glfwSetWindowAspectRatio := GetProcAddress(LDllHandle, 'glfwSetWindowAspectRatio');
  glfwSetWindowAttrib := GetProcAddress(LDllHandle, 'glfwSetWindowAttrib');
  glfwSetWindowCloseCallback := GetProcAddress(LDllHandle, 'glfwSetWindowCloseCallback');
  glfwSetWindowContentScaleCallback := GetProcAddress(LDllHandle, 'glfwSetWindowContentScaleCallback');
  glfwSetWindowFocusCallback := GetProcAddress(LDllHandle, 'glfwSetWindowFocusCallback');
  glfwSetWindowIcon := GetProcAddress(LDllHandle, 'glfwSetWindowIcon');
  glfwSetWindowIconifyCallback := GetProcAddress(LDllHandle, 'glfwSetWindowIconifyCallback');
  glfwSetWindowMaximizeCallback := GetProcAddress(LDllHandle, 'glfwSetWindowMaximizeCallback');
  glfwSetWindowMonitor := GetProcAddress(LDllHandle, 'glfwSetWindowMonitor');
  glfwSetWindowOpacity := GetProcAddress(LDllHandle, 'glfwSetWindowOpacity');
  glfwSetWindowPos := GetProcAddress(LDllHandle, 'glfwSetWindowPos');
  glfwSetWindowPosCallback := GetProcAddress(LDllHandle, 'glfwSetWindowPosCallback');
  glfwSetWindowRefreshCallback := GetProcAddress(LDllHandle, 'glfwSetWindowRefreshCallback');
  glfwSetWindowShouldClose := GetProcAddress(LDllHandle, 'glfwSetWindowShouldClose');
  glfwSetWindowSize := GetProcAddress(LDllHandle, 'glfwSetWindowSize');
  glfwSetWindowSizeCallback := GetProcAddress(LDllHandle, 'glfwSetWindowSizeCallback');
  glfwSetWindowSizeLimits := GetProcAddress(LDllHandle, 'glfwSetWindowSizeLimits');
  glfwSetWindowTitle := GetProcAddress(LDllHandle, 'glfwSetWindowTitle');
  glfwSetWindowUserPointer := GetProcAddress(LDllHandle, 'glfwSetWindowUserPointer');
  glfwShowWindow := GetProcAddress(LDllHandle, 'glfwShowWindow');
  glfwSwapBuffers := GetProcAddress(LDllHandle, 'glfwSwapBuffers');
  glfwSwapInterval := GetProcAddress(LDllHandle, 'glfwSwapInterval');
  glfwTerminate := GetProcAddress(LDllHandle, 'glfwTerminate');
  glfwUpdateGamepadMappings := GetProcAddress(LDllHandle, 'glfwUpdateGamepadMappings');
  glfwVulkanSupported := GetProcAddress(LDllHandle, 'glfwVulkanSupported');
  glfwWaitEvents := GetProcAddress(LDllHandle, 'glfwWaitEvents');
  glfwWaitEventsTimeout := GetProcAddress(LDllHandle, 'glfwWaitEventsTimeout');
  glfwWindowHint := GetProcAddress(LDllHandle, 'glfwWindowHint');
  glfwWindowHintString := GetProcAddress(LDllHandle, 'glfwWindowHintString');
  glfwWindowShouldClose := GetProcAddress(LDllHandle, 'glfwWindowShouldClose');
  ma_aligned_free := GetProcAddress(LDllHandle, 'ma_aligned_free');
  ma_aligned_malloc := GetProcAddress(LDllHandle, 'ma_aligned_malloc');
  ma_apply_volume_factor_f32 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_f32');
  ma_apply_volume_factor_pcm_frames := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames');
  ma_apply_volume_factor_pcm_frames_f32 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames_f32');
  ma_apply_volume_factor_pcm_frames_s16 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames_s16');
  ma_apply_volume_factor_pcm_frames_s24 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames_s24');
  ma_apply_volume_factor_pcm_frames_s32 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames_s32');
  ma_apply_volume_factor_pcm_frames_u8 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames_u8');
  ma_apply_volume_factor_s16 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_s16');
  ma_apply_volume_factor_s24 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_s24');
  ma_apply_volume_factor_s32 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_s32');
  ma_apply_volume_factor_u8 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_u8');
  ma_async_notification_event_init := GetProcAddress(LDllHandle, 'ma_async_notification_event_init');
  ma_async_notification_event_signal := GetProcAddress(LDllHandle, 'ma_async_notification_event_signal');
  ma_async_notification_event_uninit := GetProcAddress(LDllHandle, 'ma_async_notification_event_uninit');
  ma_async_notification_event_wait := GetProcAddress(LDllHandle, 'ma_async_notification_event_wait');
  ma_async_notification_poll_init := GetProcAddress(LDllHandle, 'ma_async_notification_poll_init');
  ma_async_notification_poll_is_signalled := GetProcAddress(LDllHandle, 'ma_async_notification_poll_is_signalled');
  ma_async_notification_signal := GetProcAddress(LDllHandle, 'ma_async_notification_signal');
  ma_audio_buffer_alloc_and_init := GetProcAddress(LDllHandle, 'ma_audio_buffer_alloc_and_init');
  ma_audio_buffer_at_end := GetProcAddress(LDllHandle, 'ma_audio_buffer_at_end');
  ma_audio_buffer_config_init := GetProcAddress(LDllHandle, 'ma_audio_buffer_config_init');
  ma_audio_buffer_get_available_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_get_available_frames');
  ma_audio_buffer_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_get_cursor_in_pcm_frames');
  ma_audio_buffer_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_get_length_in_pcm_frames');
  ma_audio_buffer_init := GetProcAddress(LDllHandle, 'ma_audio_buffer_init');
  ma_audio_buffer_init_copy := GetProcAddress(LDllHandle, 'ma_audio_buffer_init_copy');
  ma_audio_buffer_map := GetProcAddress(LDllHandle, 'ma_audio_buffer_map');
  ma_audio_buffer_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_read_pcm_frames');
  ma_audio_buffer_ref_at_end := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_at_end');
  ma_audio_buffer_ref_get_available_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_get_available_frames');
  ma_audio_buffer_ref_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_get_cursor_in_pcm_frames');
  ma_audio_buffer_ref_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_get_length_in_pcm_frames');
  ma_audio_buffer_ref_init := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_init');
  ma_audio_buffer_ref_map := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_map');
  ma_audio_buffer_ref_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_read_pcm_frames');
  ma_audio_buffer_ref_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_seek_to_pcm_frame');
  ma_audio_buffer_ref_set_data := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_set_data');
  ma_audio_buffer_ref_uninit := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_uninit');
  ma_audio_buffer_ref_unmap := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_unmap');
  ma_audio_buffer_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_audio_buffer_seek_to_pcm_frame');
  ma_audio_buffer_uninit := GetProcAddress(LDllHandle, 'ma_audio_buffer_uninit');
  ma_audio_buffer_uninit_and_free := GetProcAddress(LDllHandle, 'ma_audio_buffer_uninit_and_free');
  ma_audio_buffer_unmap := GetProcAddress(LDllHandle, 'ma_audio_buffer_unmap');
  ma_biquad_config_init := GetProcAddress(LDllHandle, 'ma_biquad_config_init');
  ma_biquad_get_heap_size := GetProcAddress(LDllHandle, 'ma_biquad_get_heap_size');
  ma_biquad_get_latency := GetProcAddress(LDllHandle, 'ma_biquad_get_latency');
  ma_biquad_init := GetProcAddress(LDllHandle, 'ma_biquad_init');
  ma_biquad_init_preallocated := GetProcAddress(LDllHandle, 'ma_biquad_init_preallocated');
  ma_biquad_node_config_init := GetProcAddress(LDllHandle, 'ma_biquad_node_config_init');
  ma_biquad_node_init := GetProcAddress(LDllHandle, 'ma_biquad_node_init');
  ma_biquad_node_reinit := GetProcAddress(LDllHandle, 'ma_biquad_node_reinit');
  ma_biquad_node_uninit := GetProcAddress(LDllHandle, 'ma_biquad_node_uninit');
  ma_biquad_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_biquad_process_pcm_frames');
  ma_biquad_reinit := GetProcAddress(LDllHandle, 'ma_biquad_reinit');
  ma_biquad_uninit := GetProcAddress(LDllHandle, 'ma_biquad_uninit');
  ma_blend_f32 := GetProcAddress(LDllHandle, 'ma_blend_f32');
  ma_bpf_config_init := GetProcAddress(LDllHandle, 'ma_bpf_config_init');
  ma_bpf_get_heap_size := GetProcAddress(LDllHandle, 'ma_bpf_get_heap_size');
  ma_bpf_get_latency := GetProcAddress(LDllHandle, 'ma_bpf_get_latency');
  ma_bpf_init := GetProcAddress(LDllHandle, 'ma_bpf_init');
  ma_bpf_init_preallocated := GetProcAddress(LDllHandle, 'ma_bpf_init_preallocated');
  ma_bpf_node_config_init := GetProcAddress(LDllHandle, 'ma_bpf_node_config_init');
  ma_bpf_node_init := GetProcAddress(LDllHandle, 'ma_bpf_node_init');
  ma_bpf_node_reinit := GetProcAddress(LDllHandle, 'ma_bpf_node_reinit');
  ma_bpf_node_uninit := GetProcAddress(LDllHandle, 'ma_bpf_node_uninit');
  ma_bpf_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_bpf_process_pcm_frames');
  ma_bpf_reinit := GetProcAddress(LDllHandle, 'ma_bpf_reinit');
  ma_bpf_uninit := GetProcAddress(LDllHandle, 'ma_bpf_uninit');
  ma_bpf2_config_init := GetProcAddress(LDllHandle, 'ma_bpf2_config_init');
  ma_bpf2_get_heap_size := GetProcAddress(LDllHandle, 'ma_bpf2_get_heap_size');
  ma_bpf2_get_latency := GetProcAddress(LDllHandle, 'ma_bpf2_get_latency');
  ma_bpf2_init := GetProcAddress(LDllHandle, 'ma_bpf2_init');
  ma_bpf2_init_preallocated := GetProcAddress(LDllHandle, 'ma_bpf2_init_preallocated');
  ma_bpf2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_bpf2_process_pcm_frames');
  ma_bpf2_reinit := GetProcAddress(LDllHandle, 'ma_bpf2_reinit');
  ma_bpf2_uninit := GetProcAddress(LDllHandle, 'ma_bpf2_uninit');
  ma_calculate_buffer_size_in_frames_from_descriptor := GetProcAddress(LDllHandle, 'ma_calculate_buffer_size_in_frames_from_descriptor');
  ma_calculate_buffer_size_in_frames_from_milliseconds := GetProcAddress(LDllHandle, 'ma_calculate_buffer_size_in_frames_from_milliseconds');
  ma_calculate_buffer_size_in_milliseconds_from_frames := GetProcAddress(LDllHandle, 'ma_calculate_buffer_size_in_milliseconds_from_frames');
  ma_calloc := GetProcAddress(LDllHandle, 'ma_calloc');
  ma_channel_converter_config_init := GetProcAddress(LDllHandle, 'ma_channel_converter_config_init');
  ma_channel_converter_get_heap_size := GetProcAddress(LDllHandle, 'ma_channel_converter_get_heap_size');
  ma_channel_converter_get_input_channel_map := GetProcAddress(LDllHandle, 'ma_channel_converter_get_input_channel_map');
  ma_channel_converter_get_output_channel_map := GetProcAddress(LDllHandle, 'ma_channel_converter_get_output_channel_map');
  ma_channel_converter_init := GetProcAddress(LDllHandle, 'ma_channel_converter_init');
  ma_channel_converter_init_preallocated := GetProcAddress(LDllHandle, 'ma_channel_converter_init_preallocated');
  ma_channel_converter_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_channel_converter_process_pcm_frames');
  ma_channel_converter_uninit := GetProcAddress(LDllHandle, 'ma_channel_converter_uninit');
  ma_channel_map_contains_channel_position := GetProcAddress(LDllHandle, 'ma_channel_map_contains_channel_position');
  ma_channel_map_copy := GetProcAddress(LDllHandle, 'ma_channel_map_copy');
  ma_channel_map_copy_or_default := GetProcAddress(LDllHandle, 'ma_channel_map_copy_or_default');
  ma_channel_map_get_channel := GetProcAddress(LDllHandle, 'ma_channel_map_get_channel');
  ma_channel_map_init_blank := GetProcAddress(LDllHandle, 'ma_channel_map_init_blank');
  ma_channel_map_init_standard := GetProcAddress(LDllHandle, 'ma_channel_map_init_standard');
  ma_channel_map_is_blank := GetProcAddress(LDllHandle, 'ma_channel_map_is_blank');
  ma_channel_map_is_equal := GetProcAddress(LDllHandle, 'ma_channel_map_is_equal');
  ma_channel_map_is_valid := GetProcAddress(LDllHandle, 'ma_channel_map_is_valid');
  ma_clip_pcm_frames := GetProcAddress(LDllHandle, 'ma_clip_pcm_frames');
  ma_clip_samples_f32 := GetProcAddress(LDllHandle, 'ma_clip_samples_f32');
  ma_clip_samples_s16 := GetProcAddress(LDllHandle, 'ma_clip_samples_s16');
  ma_clip_samples_s24 := GetProcAddress(LDllHandle, 'ma_clip_samples_s24');
  ma_clip_samples_s32 := GetProcAddress(LDllHandle, 'ma_clip_samples_s32');
  ma_clip_samples_u8 := GetProcAddress(LDllHandle, 'ma_clip_samples_u8');
  ma_context_config_init := GetProcAddress(LDllHandle, 'ma_context_config_init');
  ma_context_enumerate_devices := GetProcAddress(LDllHandle, 'ma_context_enumerate_devices');
  ma_context_get_device_info := GetProcAddress(LDllHandle, 'ma_context_get_device_info');
  ma_context_get_devices := GetProcAddress(LDllHandle, 'ma_context_get_devices');
  ma_context_get_log := GetProcAddress(LDllHandle, 'ma_context_get_log');
  ma_context_init := GetProcAddress(LDllHandle, 'ma_context_init');
  ma_context_is_loopback_supported := GetProcAddress(LDllHandle, 'ma_context_is_loopback_supported');
  ma_context_sizeof := GetProcAddress(LDllHandle, 'ma_context_sizeof');
  ma_context_uninit := GetProcAddress(LDllHandle, 'ma_context_uninit');
  ma_convert_frames := GetProcAddress(LDllHandle, 'ma_convert_frames');
  ma_convert_frames_ex := GetProcAddress(LDllHandle, 'ma_convert_frames_ex');
  ma_convert_pcm_frames_format := GetProcAddress(LDllHandle, 'ma_convert_pcm_frames_format');
  ma_copy_and_apply_volume_and_clip_pcm_frames := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_pcm_frames');
  ma_copy_and_apply_volume_and_clip_samples_f32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_samples_f32');
  ma_copy_and_apply_volume_and_clip_samples_s16 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_samples_s16');
  ma_copy_and_apply_volume_and_clip_samples_s24 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_samples_s24');
  ma_copy_and_apply_volume_and_clip_samples_s32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_samples_s32');
  ma_copy_and_apply_volume_and_clip_samples_u8 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_samples_u8');
  ma_copy_and_apply_volume_factor_f32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_f32');
  ma_copy_and_apply_volume_factor_pcm_frames := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames');
  ma_copy_and_apply_volume_factor_pcm_frames_f32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames_f32');
  ma_copy_and_apply_volume_factor_pcm_frames_s16 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames_s16');
  ma_copy_and_apply_volume_factor_pcm_frames_s24 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames_s24');
  ma_copy_and_apply_volume_factor_pcm_frames_s32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames_s32');
  ma_copy_and_apply_volume_factor_pcm_frames_u8 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames_u8');
  ma_copy_and_apply_volume_factor_per_channel_f32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_per_channel_f32');
  ma_copy_and_apply_volume_factor_s16 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_s16');
  ma_copy_and_apply_volume_factor_s24 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_s24');
  ma_copy_and_apply_volume_factor_s32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_s32');
  ma_copy_and_apply_volume_factor_u8 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_u8');
  ma_copy_pcm_frames := GetProcAddress(LDllHandle, 'ma_copy_pcm_frames');
  ma_data_converter_config_init := GetProcAddress(LDllHandle, 'ma_data_converter_config_init');
  ma_data_converter_config_init_default := GetProcAddress(LDllHandle, 'ma_data_converter_config_init_default');
  ma_data_converter_get_expected_output_frame_count := GetProcAddress(LDllHandle, 'ma_data_converter_get_expected_output_frame_count');
  ma_data_converter_get_heap_size := GetProcAddress(LDllHandle, 'ma_data_converter_get_heap_size');
  ma_data_converter_get_input_channel_map := GetProcAddress(LDllHandle, 'ma_data_converter_get_input_channel_map');
  ma_data_converter_get_input_latency := GetProcAddress(LDllHandle, 'ma_data_converter_get_input_latency');
  ma_data_converter_get_output_channel_map := GetProcAddress(LDllHandle, 'ma_data_converter_get_output_channel_map');
  ma_data_converter_get_output_latency := GetProcAddress(LDllHandle, 'ma_data_converter_get_output_latency');
  ma_data_converter_get_required_input_frame_count := GetProcAddress(LDllHandle, 'ma_data_converter_get_required_input_frame_count');
  ma_data_converter_init := GetProcAddress(LDllHandle, 'ma_data_converter_init');
  ma_data_converter_init_preallocated := GetProcAddress(LDllHandle, 'ma_data_converter_init_preallocated');
  ma_data_converter_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_converter_process_pcm_frames');
  ma_data_converter_set_rate := GetProcAddress(LDllHandle, 'ma_data_converter_set_rate');
  ma_data_converter_set_rate_ratio := GetProcAddress(LDllHandle, 'ma_data_converter_set_rate_ratio');
  ma_data_converter_uninit := GetProcAddress(LDllHandle, 'ma_data_converter_uninit');
  ma_data_source_config_init := GetProcAddress(LDllHandle, 'ma_data_source_config_init');
  ma_data_source_get_current := GetProcAddress(LDllHandle, 'ma_data_source_get_current');
  ma_data_source_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_get_cursor_in_pcm_frames');
  ma_data_source_get_data_format := GetProcAddress(LDllHandle, 'ma_data_source_get_data_format');
  ma_data_source_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_get_length_in_pcm_frames');
  ma_data_source_get_loop_point_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_get_loop_point_in_pcm_frames');
  ma_data_source_get_next := GetProcAddress(LDllHandle, 'ma_data_source_get_next');
  ma_data_source_get_next_callback := GetProcAddress(LDllHandle, 'ma_data_source_get_next_callback');
  ma_data_source_get_range_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_get_range_in_pcm_frames');
  ma_data_source_init := GetProcAddress(LDllHandle, 'ma_data_source_init');
  ma_data_source_is_looping := GetProcAddress(LDllHandle, 'ma_data_source_is_looping');
  ma_data_source_node_config_init := GetProcAddress(LDllHandle, 'ma_data_source_node_config_init');
  ma_data_source_node_init := GetProcAddress(LDllHandle, 'ma_data_source_node_init');
  ma_data_source_node_is_looping := GetProcAddress(LDllHandle, 'ma_data_source_node_is_looping');
  ma_data_source_node_set_looping := GetProcAddress(LDllHandle, 'ma_data_source_node_set_looping');
  ma_data_source_node_uninit := GetProcAddress(LDllHandle, 'ma_data_source_node_uninit');
  ma_data_source_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_read_pcm_frames');
  ma_data_source_seek_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_seek_pcm_frames');
  ma_data_source_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_data_source_seek_to_pcm_frame');
  ma_data_source_set_current := GetProcAddress(LDllHandle, 'ma_data_source_set_current');
  ma_data_source_set_loop_point_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_set_loop_point_in_pcm_frames');
  ma_data_source_set_looping := GetProcAddress(LDllHandle, 'ma_data_source_set_looping');
  ma_data_source_set_next := GetProcAddress(LDllHandle, 'ma_data_source_set_next');
  ma_data_source_set_next_callback := GetProcAddress(LDllHandle, 'ma_data_source_set_next_callback');
  ma_data_source_set_range_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_set_range_in_pcm_frames');
  ma_data_source_uninit := GetProcAddress(LDllHandle, 'ma_data_source_uninit');
  ma_decode_file := GetProcAddress(LDllHandle, 'ma_decode_file');
  ma_decode_from_vfs := GetProcAddress(LDllHandle, 'ma_decode_from_vfs');
  ma_decode_memory := GetProcAddress(LDllHandle, 'ma_decode_memory');
  ma_decoder_config_init := GetProcAddress(LDllHandle, 'ma_decoder_config_init');
  ma_decoder_config_init_default := GetProcAddress(LDllHandle, 'ma_decoder_config_init_default');
  ma_decoder_get_available_frames := GetProcAddress(LDllHandle, 'ma_decoder_get_available_frames');
  ma_decoder_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_decoder_get_cursor_in_pcm_frames');
  ma_decoder_get_data_format := GetProcAddress(LDllHandle, 'ma_decoder_get_data_format');
  ma_decoder_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_decoder_get_length_in_pcm_frames');
  ma_decoder_init := GetProcAddress(LDllHandle, 'ma_decoder_init');
  ma_decoder_init_file := GetProcAddress(LDllHandle, 'ma_decoder_init_file');
  ma_decoder_init_file_w := GetProcAddress(LDllHandle, 'ma_decoder_init_file_w');
  ma_decoder_init_memory := GetProcAddress(LDllHandle, 'ma_decoder_init_memory');
  ma_decoder_init_vfs := GetProcAddress(LDllHandle, 'ma_decoder_init_vfs');
  ma_decoder_init_vfs_w := GetProcAddress(LDllHandle, 'ma_decoder_init_vfs_w');
  ma_decoder_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_decoder_read_pcm_frames');
  ma_decoder_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_decoder_seek_to_pcm_frame');
  ma_decoder_uninit := GetProcAddress(LDllHandle, 'ma_decoder_uninit');
  ma_decoding_backend_config_init := GetProcAddress(LDllHandle, 'ma_decoding_backend_config_init');
  ma_default_vfs_init := GetProcAddress(LDllHandle, 'ma_default_vfs_init');
  ma_deinterleave_pcm_frames := GetProcAddress(LDllHandle, 'ma_deinterleave_pcm_frames');
  ma_delay_config_init := GetProcAddress(LDllHandle, 'ma_delay_config_init');
  ma_delay_get_decay := GetProcAddress(LDllHandle, 'ma_delay_get_decay');
  ma_delay_get_dry := GetProcAddress(LDllHandle, 'ma_delay_get_dry');
  ma_delay_get_wet := GetProcAddress(LDllHandle, 'ma_delay_get_wet');
  ma_delay_init := GetProcAddress(LDllHandle, 'ma_delay_init');
  ma_delay_node_config_init := GetProcAddress(LDllHandle, 'ma_delay_node_config_init');
  ma_delay_node_get_decay := GetProcAddress(LDllHandle, 'ma_delay_node_get_decay');
  ma_delay_node_get_dry := GetProcAddress(LDllHandle, 'ma_delay_node_get_dry');
  ma_delay_node_get_wet := GetProcAddress(LDllHandle, 'ma_delay_node_get_wet');
  ma_delay_node_init := GetProcAddress(LDllHandle, 'ma_delay_node_init');
  ma_delay_node_set_decay := GetProcAddress(LDllHandle, 'ma_delay_node_set_decay');
  ma_delay_node_set_dry := GetProcAddress(LDllHandle, 'ma_delay_node_set_dry');
  ma_delay_node_set_wet := GetProcAddress(LDllHandle, 'ma_delay_node_set_wet');
  ma_delay_node_uninit := GetProcAddress(LDllHandle, 'ma_delay_node_uninit');
  ma_delay_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_delay_process_pcm_frames');
  ma_delay_set_decay := GetProcAddress(LDllHandle, 'ma_delay_set_decay');
  ma_delay_set_dry := GetProcAddress(LDllHandle, 'ma_delay_set_dry');
  ma_delay_set_wet := GetProcAddress(LDllHandle, 'ma_delay_set_wet');
  ma_delay_uninit := GetProcAddress(LDllHandle, 'ma_delay_uninit');
  ma_device_config_init := GetProcAddress(LDllHandle, 'ma_device_config_init');
  ma_device_get_context := GetProcAddress(LDllHandle, 'ma_device_get_context');
  ma_device_get_info := GetProcAddress(LDllHandle, 'ma_device_get_info');
  ma_device_get_log := GetProcAddress(LDllHandle, 'ma_device_get_log');
  ma_device_get_master_volume := GetProcAddress(LDllHandle, 'ma_device_get_master_volume');
  ma_device_get_master_volume_db := GetProcAddress(LDllHandle, 'ma_device_get_master_volume_db');
  ma_device_get_name := GetProcAddress(LDllHandle, 'ma_device_get_name');
  ma_device_get_state := GetProcAddress(LDllHandle, 'ma_device_get_state');
  ma_device_handle_backend_data_callback := GetProcAddress(LDllHandle, 'ma_device_handle_backend_data_callback');
  ma_device_init := GetProcAddress(LDllHandle, 'ma_device_init');
  ma_device_init_ex := GetProcAddress(LDllHandle, 'ma_device_init_ex');
  ma_device_is_started := GetProcAddress(LDllHandle, 'ma_device_is_started');
  ma_device_job_thread_config_init := GetProcAddress(LDllHandle, 'ma_device_job_thread_config_init');
  ma_device_job_thread_init := GetProcAddress(LDllHandle, 'ma_device_job_thread_init');
  ma_device_job_thread_next := GetProcAddress(LDllHandle, 'ma_device_job_thread_next');
  ma_device_job_thread_post := GetProcAddress(LDllHandle, 'ma_device_job_thread_post');
  ma_device_job_thread_uninit := GetProcAddress(LDllHandle, 'ma_device_job_thread_uninit');
  ma_device_post_init := GetProcAddress(LDllHandle, 'ma_device_post_init');
  ma_device_set_master_volume := GetProcAddress(LDllHandle, 'ma_device_set_master_volume');
  ma_device_set_master_volume_db := GetProcAddress(LDllHandle, 'ma_device_set_master_volume_db');
  ma_device_start := GetProcAddress(LDllHandle, 'ma_device_start');
  ma_device_stop := GetProcAddress(LDllHandle, 'ma_device_stop');
  ma_device_uninit := GetProcAddress(LDllHandle, 'ma_device_uninit');
  ma_duplex_rb_init := GetProcAddress(LDllHandle, 'ma_duplex_rb_init');
  ma_duplex_rb_uninit := GetProcAddress(LDllHandle, 'ma_duplex_rb_uninit');
  ma_encoder_config_init := GetProcAddress(LDllHandle, 'ma_encoder_config_init');
  ma_encoder_init := GetProcAddress(LDllHandle, 'ma_encoder_init');
  ma_encoder_init_file := GetProcAddress(LDllHandle, 'ma_encoder_init_file');
  ma_encoder_init_file_w := GetProcAddress(LDllHandle, 'ma_encoder_init_file_w');
  ma_encoder_init_vfs := GetProcAddress(LDllHandle, 'ma_encoder_init_vfs');
  ma_encoder_init_vfs_w := GetProcAddress(LDllHandle, 'ma_encoder_init_vfs_w');
  ma_encoder_uninit := GetProcAddress(LDllHandle, 'ma_encoder_uninit');
  ma_encoder_write_pcm_frames := GetProcAddress(LDllHandle, 'ma_encoder_write_pcm_frames');
  ma_engine_config_init := GetProcAddress(LDllHandle, 'ma_engine_config_init');
  ma_engine_find_closest_listener := GetProcAddress(LDllHandle, 'ma_engine_find_closest_listener');
  ma_engine_get_channels := GetProcAddress(LDllHandle, 'ma_engine_get_channels');
  ma_engine_get_device := GetProcAddress(LDllHandle, 'ma_engine_get_device');
  ma_engine_get_endpoint := GetProcAddress(LDllHandle, 'ma_engine_get_endpoint');
  ma_engine_get_listener_count := GetProcAddress(LDllHandle, 'ma_engine_get_listener_count');
  ma_engine_get_log := GetProcAddress(LDllHandle, 'ma_engine_get_log');
  ma_engine_get_node_graph := GetProcAddress(LDllHandle, 'ma_engine_get_node_graph');
  ma_engine_get_resource_manager := GetProcAddress(LDllHandle, 'ma_engine_get_resource_manager');
  ma_engine_get_sample_rate := GetProcAddress(LDllHandle, 'ma_engine_get_sample_rate');
  ma_engine_get_time := GetProcAddress(LDllHandle, 'ma_engine_get_time');
  ma_engine_init := GetProcAddress(LDllHandle, 'ma_engine_init');
  ma_engine_listener_get_cone := GetProcAddress(LDllHandle, 'ma_engine_listener_get_cone');
  ma_engine_listener_get_direction := GetProcAddress(LDllHandle, 'ma_engine_listener_get_direction');
  ma_engine_listener_get_position := GetProcAddress(LDllHandle, 'ma_engine_listener_get_position');
  ma_engine_listener_get_velocity := GetProcAddress(LDllHandle, 'ma_engine_listener_get_velocity');
  ma_engine_listener_get_world_up := GetProcAddress(LDllHandle, 'ma_engine_listener_get_world_up');
  ma_engine_listener_is_enabled := GetProcAddress(LDllHandle, 'ma_engine_listener_is_enabled');
  ma_engine_listener_set_cone := GetProcAddress(LDllHandle, 'ma_engine_listener_set_cone');
  ma_engine_listener_set_direction := GetProcAddress(LDllHandle, 'ma_engine_listener_set_direction');
  ma_engine_listener_set_enabled := GetProcAddress(LDllHandle, 'ma_engine_listener_set_enabled');
  ma_engine_listener_set_position := GetProcAddress(LDllHandle, 'ma_engine_listener_set_position');
  ma_engine_listener_set_velocity := GetProcAddress(LDllHandle, 'ma_engine_listener_set_velocity');
  ma_engine_listener_set_world_up := GetProcAddress(LDllHandle, 'ma_engine_listener_set_world_up');
  ma_engine_node_config_init := GetProcAddress(LDllHandle, 'ma_engine_node_config_init');
  ma_engine_node_get_heap_size := GetProcAddress(LDllHandle, 'ma_engine_node_get_heap_size');
  ma_engine_node_init := GetProcAddress(LDllHandle, 'ma_engine_node_init');
  ma_engine_node_init_preallocated := GetProcAddress(LDllHandle, 'ma_engine_node_init_preallocated');
  ma_engine_node_uninit := GetProcAddress(LDllHandle, 'ma_engine_node_uninit');
  ma_engine_play_sound := GetProcAddress(LDllHandle, 'ma_engine_play_sound');
  ma_engine_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_engine_read_pcm_frames');
  ma_engine_set_gain_db := GetProcAddress(LDllHandle, 'ma_engine_set_gain_db');
  ma_engine_set_time := GetProcAddress(LDllHandle, 'ma_engine_set_time');
  ma_engine_set_volume := GetProcAddress(LDllHandle, 'ma_engine_set_volume');
  ma_engine_start := GetProcAddress(LDllHandle, 'ma_engine_start');
  ma_engine_stop := GetProcAddress(LDllHandle, 'ma_engine_stop');
  ma_engine_uninit := GetProcAddress(LDllHandle, 'ma_engine_uninit');
  ma_event_init := GetProcAddress(LDllHandle, 'ma_event_init');
  ma_event_signal := GetProcAddress(LDllHandle, 'ma_event_signal');
  ma_event_uninit := GetProcAddress(LDllHandle, 'ma_event_uninit');
  ma_event_wait := GetProcAddress(LDllHandle, 'ma_event_wait');
  ma_fader_config_init := GetProcAddress(LDllHandle, 'ma_fader_config_init');
  ma_fader_get_current_volume := GetProcAddress(LDllHandle, 'ma_fader_get_current_volume');
  ma_fader_get_data_format := GetProcAddress(LDllHandle, 'ma_fader_get_data_format');
  ma_fader_init := GetProcAddress(LDllHandle, 'ma_fader_init');
  ma_fader_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_fader_process_pcm_frames');
  ma_fader_set_fade := GetProcAddress(LDllHandle, 'ma_fader_set_fade');
  ma_fence_acquire := GetProcAddress(LDllHandle, 'ma_fence_acquire');
  ma_fence_init := GetProcAddress(LDllHandle, 'ma_fence_init');
  ma_fence_release := GetProcAddress(LDllHandle, 'ma_fence_release');
  ma_fence_uninit := GetProcAddress(LDllHandle, 'ma_fence_uninit');
  ma_fence_wait := GetProcAddress(LDllHandle, 'ma_fence_wait');
  ma_free := GetProcAddress(LDllHandle, 'ma_free');
  ma_gainer_config_init := GetProcAddress(LDllHandle, 'ma_gainer_config_init');
  ma_gainer_get_heap_size := GetProcAddress(LDllHandle, 'ma_gainer_get_heap_size');
  ma_gainer_init := GetProcAddress(LDllHandle, 'ma_gainer_init');
  ma_gainer_init_preallocated := GetProcAddress(LDllHandle, 'ma_gainer_init_preallocated');
  ma_gainer_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_gainer_process_pcm_frames');
  ma_gainer_set_gain := GetProcAddress(LDllHandle, 'ma_gainer_set_gain');
  ma_gainer_set_gains := GetProcAddress(LDllHandle, 'ma_gainer_set_gains');
  ma_gainer_uninit := GetProcAddress(LDllHandle, 'ma_gainer_uninit');
  ma_get_backend_name := GetProcAddress(LDllHandle, 'ma_get_backend_name');
  ma_get_bytes_per_sample := GetProcAddress(LDllHandle, 'ma_get_bytes_per_sample');
  ma_get_enabled_backends := GetProcAddress(LDllHandle, 'ma_get_enabled_backends');
  ma_get_format_name := GetProcAddress(LDllHandle, 'ma_get_format_name');
  ma_hishelf_node_config_init := GetProcAddress(LDllHandle, 'ma_hishelf_node_config_init');
  ma_hishelf_node_init := GetProcAddress(LDllHandle, 'ma_hishelf_node_init');
  ma_hishelf_node_reinit := GetProcAddress(LDllHandle, 'ma_hishelf_node_reinit');
  ma_hishelf_node_uninit := GetProcAddress(LDllHandle, 'ma_hishelf_node_uninit');
  ma_hishelf2_config_init := GetProcAddress(LDllHandle, 'ma_hishelf2_config_init');
  ma_hishelf2_get_heap_size := GetProcAddress(LDllHandle, 'ma_hishelf2_get_heap_size');
  ma_hishelf2_get_latency := GetProcAddress(LDllHandle, 'ma_hishelf2_get_latency');
  ma_hishelf2_init := GetProcAddress(LDllHandle, 'ma_hishelf2_init');
  ma_hishelf2_init_preallocated := GetProcAddress(LDllHandle, 'ma_hishelf2_init_preallocated');
  ma_hishelf2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_hishelf2_process_pcm_frames');
  ma_hishelf2_reinit := GetProcAddress(LDllHandle, 'ma_hishelf2_reinit');
  ma_hishelf2_uninit := GetProcAddress(LDllHandle, 'ma_hishelf2_uninit');
  ma_hpf_config_init := GetProcAddress(LDllHandle, 'ma_hpf_config_init');
  ma_hpf_get_heap_size := GetProcAddress(LDllHandle, 'ma_hpf_get_heap_size');
  ma_hpf_get_latency := GetProcAddress(LDllHandle, 'ma_hpf_get_latency');
  ma_hpf_init := GetProcAddress(LDllHandle, 'ma_hpf_init');
  ma_hpf_init_preallocated := GetProcAddress(LDllHandle, 'ma_hpf_init_preallocated');
  ma_hpf_node_config_init := GetProcAddress(LDllHandle, 'ma_hpf_node_config_init');
  ma_hpf_node_init := GetProcAddress(LDllHandle, 'ma_hpf_node_init');
  ma_hpf_node_reinit := GetProcAddress(LDllHandle, 'ma_hpf_node_reinit');
  ma_hpf_node_uninit := GetProcAddress(LDllHandle, 'ma_hpf_node_uninit');
  ma_hpf_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_hpf_process_pcm_frames');
  ma_hpf_reinit := GetProcAddress(LDllHandle, 'ma_hpf_reinit');
  ma_hpf_uninit := GetProcAddress(LDllHandle, 'ma_hpf_uninit');
  ma_hpf1_config_init := GetProcAddress(LDllHandle, 'ma_hpf1_config_init');
  ma_hpf1_get_heap_size := GetProcAddress(LDllHandle, 'ma_hpf1_get_heap_size');
  ma_hpf1_get_latency := GetProcAddress(LDllHandle, 'ma_hpf1_get_latency');
  ma_hpf1_init := GetProcAddress(LDllHandle, 'ma_hpf1_init');
  ma_hpf1_init_preallocated := GetProcAddress(LDllHandle, 'ma_hpf1_init_preallocated');
  ma_hpf1_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_hpf1_process_pcm_frames');
  ma_hpf1_reinit := GetProcAddress(LDllHandle, 'ma_hpf1_reinit');
  ma_hpf1_uninit := GetProcAddress(LDllHandle, 'ma_hpf1_uninit');
  ma_hpf2_config_init := GetProcAddress(LDllHandle, 'ma_hpf2_config_init');
  ma_hpf2_get_heap_size := GetProcAddress(LDllHandle, 'ma_hpf2_get_heap_size');
  ma_hpf2_get_latency := GetProcAddress(LDllHandle, 'ma_hpf2_get_latency');
  ma_hpf2_init := GetProcAddress(LDllHandle, 'ma_hpf2_init');
  ma_hpf2_init_preallocated := GetProcAddress(LDllHandle, 'ma_hpf2_init_preallocated');
  ma_hpf2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_hpf2_process_pcm_frames');
  ma_hpf2_reinit := GetProcAddress(LDllHandle, 'ma_hpf2_reinit');
  ma_hpf2_uninit := GetProcAddress(LDllHandle, 'ma_hpf2_uninit');
  ma_interleave_pcm_frames := GetProcAddress(LDllHandle, 'ma_interleave_pcm_frames');
  ma_is_backend_enabled := GetProcAddress(LDllHandle, 'ma_is_backend_enabled');
  ma_is_loopback_supported := GetProcAddress(LDllHandle, 'ma_is_loopback_supported');
  ma_job_init := GetProcAddress(LDllHandle, 'ma_job_init');
  ma_job_process := GetProcAddress(LDllHandle, 'ma_job_process');
  ma_job_queue_config_init := GetProcAddress(LDllHandle, 'ma_job_queue_config_init');
  ma_job_queue_get_heap_size := GetProcAddress(LDllHandle, 'ma_job_queue_get_heap_size');
  ma_job_queue_init := GetProcAddress(LDllHandle, 'ma_job_queue_init');
  ma_job_queue_init_preallocated := GetProcAddress(LDllHandle, 'ma_job_queue_init_preallocated');
  ma_job_queue_next := GetProcAddress(LDllHandle, 'ma_job_queue_next');
  ma_job_queue_post := GetProcAddress(LDllHandle, 'ma_job_queue_post');
  ma_job_queue_uninit := GetProcAddress(LDllHandle, 'ma_job_queue_uninit');
  ma_linear_resampler_config_init := GetProcAddress(LDllHandle, 'ma_linear_resampler_config_init');
  ma_linear_resampler_get_expected_output_frame_count := GetProcAddress(LDllHandle, 'ma_linear_resampler_get_expected_output_frame_count');
  ma_linear_resampler_get_heap_size := GetProcAddress(LDllHandle, 'ma_linear_resampler_get_heap_size');
  ma_linear_resampler_get_input_latency := GetProcAddress(LDllHandle, 'ma_linear_resampler_get_input_latency');
  ma_linear_resampler_get_output_latency := GetProcAddress(LDllHandle, 'ma_linear_resampler_get_output_latency');
  ma_linear_resampler_get_required_input_frame_count := GetProcAddress(LDllHandle, 'ma_linear_resampler_get_required_input_frame_count');
  ma_linear_resampler_init := GetProcAddress(LDllHandle, 'ma_linear_resampler_init');
  ma_linear_resampler_init_preallocated := GetProcAddress(LDllHandle, 'ma_linear_resampler_init_preallocated');
  ma_linear_resampler_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_linear_resampler_process_pcm_frames');
  ma_linear_resampler_set_rate := GetProcAddress(LDllHandle, 'ma_linear_resampler_set_rate');
  ma_linear_resampler_set_rate_ratio := GetProcAddress(LDllHandle, 'ma_linear_resampler_set_rate_ratio');
  ma_linear_resampler_uninit := GetProcAddress(LDllHandle, 'ma_linear_resampler_uninit');
  ma_log_callback_init := GetProcAddress(LDllHandle, 'ma_log_callback_init');
  ma_log_init := GetProcAddress(LDllHandle, 'ma_log_init');
  ma_log_level_to_string := GetProcAddress(LDllHandle, 'ma_log_level_to_string');
  ma_log_post := GetProcAddress(LDllHandle, 'ma_log_post');
  ma_log_postf := GetProcAddress(LDllHandle, 'ma_log_postf');
  ma_log_postv := GetProcAddress(LDllHandle, 'ma_log_postv');
  ma_log_register_callback := GetProcAddress(LDllHandle, 'ma_log_register_callback');
  ma_log_uninit := GetProcAddress(LDllHandle, 'ma_log_uninit');
  ma_log_unregister_callback := GetProcAddress(LDllHandle, 'ma_log_unregister_callback');
  ma_loshelf_node_config_init := GetProcAddress(LDllHandle, 'ma_loshelf_node_config_init');
  ma_loshelf_node_init := GetProcAddress(LDllHandle, 'ma_loshelf_node_init');
  ma_loshelf_node_reinit := GetProcAddress(LDllHandle, 'ma_loshelf_node_reinit');
  ma_loshelf_node_uninit := GetProcAddress(LDllHandle, 'ma_loshelf_node_uninit');
  ma_loshelf2_config_init := GetProcAddress(LDllHandle, 'ma_loshelf2_config_init');
  ma_loshelf2_get_heap_size := GetProcAddress(LDllHandle, 'ma_loshelf2_get_heap_size');
  ma_loshelf2_get_latency := GetProcAddress(LDllHandle, 'ma_loshelf2_get_latency');
  ma_loshelf2_init := GetProcAddress(LDllHandle, 'ma_loshelf2_init');
  ma_loshelf2_init_preallocated := GetProcAddress(LDllHandle, 'ma_loshelf2_init_preallocated');
  ma_loshelf2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_loshelf2_process_pcm_frames');
  ma_loshelf2_reinit := GetProcAddress(LDllHandle, 'ma_loshelf2_reinit');
  ma_loshelf2_uninit := GetProcAddress(LDllHandle, 'ma_loshelf2_uninit');
  ma_lpf_config_init := GetProcAddress(LDllHandle, 'ma_lpf_config_init');
  ma_lpf_get_heap_size := GetProcAddress(LDllHandle, 'ma_lpf_get_heap_size');
  ma_lpf_get_latency := GetProcAddress(LDllHandle, 'ma_lpf_get_latency');
  ma_lpf_init := GetProcAddress(LDllHandle, 'ma_lpf_init');
  ma_lpf_init_preallocated := GetProcAddress(LDllHandle, 'ma_lpf_init_preallocated');
  ma_lpf_node_config_init := GetProcAddress(LDllHandle, 'ma_lpf_node_config_init');
  ma_lpf_node_init := GetProcAddress(LDllHandle, 'ma_lpf_node_init');
  ma_lpf_node_reinit := GetProcAddress(LDllHandle, 'ma_lpf_node_reinit');
  ma_lpf_node_uninit := GetProcAddress(LDllHandle, 'ma_lpf_node_uninit');
  ma_lpf_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_lpf_process_pcm_frames');
  ma_lpf_reinit := GetProcAddress(LDllHandle, 'ma_lpf_reinit');
  ma_lpf_uninit := GetProcAddress(LDllHandle, 'ma_lpf_uninit');
  ma_lpf1_config_init := GetProcAddress(LDllHandle, 'ma_lpf1_config_init');
  ma_lpf1_get_heap_size := GetProcAddress(LDllHandle, 'ma_lpf1_get_heap_size');
  ma_lpf1_get_latency := GetProcAddress(LDllHandle, 'ma_lpf1_get_latency');
  ma_lpf1_init := GetProcAddress(LDllHandle, 'ma_lpf1_init');
  ma_lpf1_init_preallocated := GetProcAddress(LDllHandle, 'ma_lpf1_init_preallocated');
  ma_lpf1_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_lpf1_process_pcm_frames');
  ma_lpf1_reinit := GetProcAddress(LDllHandle, 'ma_lpf1_reinit');
  ma_lpf1_uninit := GetProcAddress(LDllHandle, 'ma_lpf1_uninit');
  ma_lpf2_config_init := GetProcAddress(LDllHandle, 'ma_lpf2_config_init');
  ma_lpf2_get_heap_size := GetProcAddress(LDllHandle, 'ma_lpf2_get_heap_size');
  ma_lpf2_get_latency := GetProcAddress(LDllHandle, 'ma_lpf2_get_latency');
  ma_lpf2_init := GetProcAddress(LDllHandle, 'ma_lpf2_init');
  ma_lpf2_init_preallocated := GetProcAddress(LDllHandle, 'ma_lpf2_init_preallocated');
  ma_lpf2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_lpf2_process_pcm_frames');
  ma_lpf2_reinit := GetProcAddress(LDllHandle, 'ma_lpf2_reinit');
  ma_lpf2_uninit := GetProcAddress(LDllHandle, 'ma_lpf2_uninit');
  ma_malloc := GetProcAddress(LDllHandle, 'ma_malloc');
  ma_mutex_init := GetProcAddress(LDllHandle, 'ma_mutex_init');
  ma_mutex_lock := GetProcAddress(LDllHandle, 'ma_mutex_lock');
  ma_mutex_uninit := GetProcAddress(LDllHandle, 'ma_mutex_uninit');
  ma_mutex_unlock := GetProcAddress(LDllHandle, 'ma_mutex_unlock');
  ma_node_attach_output_bus := GetProcAddress(LDllHandle, 'ma_node_attach_output_bus');
  ma_node_config_init := GetProcAddress(LDllHandle, 'ma_node_config_init');
  ma_node_detach_all_output_buses := GetProcAddress(LDllHandle, 'ma_node_detach_all_output_buses');
  ma_node_detach_output_bus := GetProcAddress(LDllHandle, 'ma_node_detach_output_bus');
  ma_node_get_heap_size := GetProcAddress(LDllHandle, 'ma_node_get_heap_size');
  ma_node_get_input_bus_count := GetProcAddress(LDllHandle, 'ma_node_get_input_bus_count');
  ma_node_get_input_channels := GetProcAddress(LDllHandle, 'ma_node_get_input_channels');
  ma_node_get_node_graph := GetProcAddress(LDllHandle, 'ma_node_get_node_graph');
  ma_node_get_output_bus_count := GetProcAddress(LDllHandle, 'ma_node_get_output_bus_count');
  ma_node_get_output_bus_volume := GetProcAddress(LDllHandle, 'ma_node_get_output_bus_volume');
  ma_node_get_output_channels := GetProcAddress(LDllHandle, 'ma_node_get_output_channels');
  ma_node_get_state := GetProcAddress(LDllHandle, 'ma_node_get_state');
  ma_node_get_state_by_time := GetProcAddress(LDllHandle, 'ma_node_get_state_by_time');
  ma_node_get_state_by_time_range := GetProcAddress(LDllHandle, 'ma_node_get_state_by_time_range');
  ma_node_get_state_time := GetProcAddress(LDllHandle, 'ma_node_get_state_time');
  ma_node_get_time := GetProcAddress(LDllHandle, 'ma_node_get_time');
  ma_node_graph_config_init := GetProcAddress(LDllHandle, 'ma_node_graph_config_init');
  ma_node_graph_get_channels := GetProcAddress(LDllHandle, 'ma_node_graph_get_channels');
  ma_node_graph_get_endpoint := GetProcAddress(LDllHandle, 'ma_node_graph_get_endpoint');
  ma_node_graph_get_time := GetProcAddress(LDllHandle, 'ma_node_graph_get_time');
  ma_node_graph_init := GetProcAddress(LDllHandle, 'ma_node_graph_init');
  ma_node_graph_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_node_graph_read_pcm_frames');
  ma_node_graph_set_time := GetProcAddress(LDllHandle, 'ma_node_graph_set_time');
  ma_node_graph_uninit := GetProcAddress(LDllHandle, 'ma_node_graph_uninit');
  ma_node_init := GetProcAddress(LDllHandle, 'ma_node_init');
  ma_node_init_preallocated := GetProcAddress(LDllHandle, 'ma_node_init_preallocated');
  ma_node_set_output_bus_volume := GetProcAddress(LDllHandle, 'ma_node_set_output_bus_volume');
  ma_node_set_state := GetProcAddress(LDllHandle, 'ma_node_set_state');
  ma_node_set_state_time := GetProcAddress(LDllHandle, 'ma_node_set_state_time');
  ma_node_set_time := GetProcAddress(LDllHandle, 'ma_node_set_time');
  ma_node_uninit := GetProcAddress(LDllHandle, 'ma_node_uninit');
  ma_noise_config_init := GetProcAddress(LDllHandle, 'ma_noise_config_init');
  ma_noise_get_heap_size := GetProcAddress(LDllHandle, 'ma_noise_get_heap_size');
  ma_noise_init := GetProcAddress(LDllHandle, 'ma_noise_init');
  ma_noise_init_preallocated := GetProcAddress(LDllHandle, 'ma_noise_init_preallocated');
  ma_noise_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_noise_read_pcm_frames');
  ma_noise_set_amplitude := GetProcAddress(LDllHandle, 'ma_noise_set_amplitude');
  ma_noise_set_seed := GetProcAddress(LDllHandle, 'ma_noise_set_seed');
  ma_noise_set_type := GetProcAddress(LDllHandle, 'ma_noise_set_type');
  ma_noise_uninit := GetProcAddress(LDllHandle, 'ma_noise_uninit');
  ma_notch_node_config_init := GetProcAddress(LDllHandle, 'ma_notch_node_config_init');
  ma_notch_node_init := GetProcAddress(LDllHandle, 'ma_notch_node_init');
  ma_notch_node_reinit := GetProcAddress(LDllHandle, 'ma_notch_node_reinit');
  ma_notch_node_uninit := GetProcAddress(LDllHandle, 'ma_notch_node_uninit');
  ma_notch2_config_init := GetProcAddress(LDllHandle, 'ma_notch2_config_init');
  ma_notch2_get_heap_size := GetProcAddress(LDllHandle, 'ma_notch2_get_heap_size');
  ma_notch2_get_latency := GetProcAddress(LDllHandle, 'ma_notch2_get_latency');
  ma_notch2_init := GetProcAddress(LDllHandle, 'ma_notch2_init');
  ma_notch2_init_preallocated := GetProcAddress(LDllHandle, 'ma_notch2_init_preallocated');
  ma_notch2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_notch2_process_pcm_frames');
  ma_notch2_reinit := GetProcAddress(LDllHandle, 'ma_notch2_reinit');
  ma_notch2_uninit := GetProcAddress(LDllHandle, 'ma_notch2_uninit');
  ma_offset_pcm_frames_const_ptr := GetProcAddress(LDllHandle, 'ma_offset_pcm_frames_const_ptr');
  ma_offset_pcm_frames_ptr := GetProcAddress(LDllHandle, 'ma_offset_pcm_frames_ptr');
  ma_paged_audio_buffer_config_init := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_config_init');
  ma_paged_audio_buffer_data_allocate_and_append_page := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_allocate_and_append_page');
  ma_paged_audio_buffer_data_allocate_page := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_allocate_page');
  ma_paged_audio_buffer_data_append_page := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_append_page');
  ma_paged_audio_buffer_data_free_page := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_free_page');
  ma_paged_audio_buffer_data_get_head := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_get_head');
  ma_paged_audio_buffer_data_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_get_length_in_pcm_frames');
  ma_paged_audio_buffer_data_get_tail := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_get_tail');
  ma_paged_audio_buffer_data_init := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_init');
  ma_paged_audio_buffer_data_uninit := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_uninit');
  ma_paged_audio_buffer_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_get_cursor_in_pcm_frames');
  ma_paged_audio_buffer_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_get_length_in_pcm_frames');
  ma_paged_audio_buffer_init := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_init');
  ma_paged_audio_buffer_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_read_pcm_frames');
  ma_paged_audio_buffer_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_seek_to_pcm_frame');
  ma_paged_audio_buffer_uninit := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_uninit');
  ma_panner_config_init := GetProcAddress(LDllHandle, 'ma_panner_config_init');
  ma_panner_get_mode := GetProcAddress(LDllHandle, 'ma_panner_get_mode');
  ma_panner_get_pan := GetProcAddress(LDllHandle, 'ma_panner_get_pan');
  ma_panner_init := GetProcAddress(LDllHandle, 'ma_panner_init');
  ma_panner_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_panner_process_pcm_frames');
  ma_panner_set_mode := GetProcAddress(LDllHandle, 'ma_panner_set_mode');
  ma_panner_set_pan := GetProcAddress(LDllHandle, 'ma_panner_set_pan');
  ma_pcm_convert := GetProcAddress(LDllHandle, 'ma_pcm_convert');
  ma_pcm_f32_to_s16 := GetProcAddress(LDllHandle, 'ma_pcm_f32_to_s16');
  ma_pcm_f32_to_s24 := GetProcAddress(LDllHandle, 'ma_pcm_f32_to_s24');
  ma_pcm_f32_to_s32 := GetProcAddress(LDllHandle, 'ma_pcm_f32_to_s32');
  ma_pcm_f32_to_u8 := GetProcAddress(LDllHandle, 'ma_pcm_f32_to_u8');
  ma_pcm_rb_acquire_read := GetProcAddress(LDllHandle, 'ma_pcm_rb_acquire_read');
  ma_pcm_rb_acquire_write := GetProcAddress(LDllHandle, 'ma_pcm_rb_acquire_write');
  ma_pcm_rb_available_read := GetProcAddress(LDllHandle, 'ma_pcm_rb_available_read');
  ma_pcm_rb_available_write := GetProcAddress(LDllHandle, 'ma_pcm_rb_available_write');
  ma_pcm_rb_commit_read := GetProcAddress(LDllHandle, 'ma_pcm_rb_commit_read');
  ma_pcm_rb_commit_write := GetProcAddress(LDllHandle, 'ma_pcm_rb_commit_write');
  ma_pcm_rb_get_subbuffer_offset := GetProcAddress(LDllHandle, 'ma_pcm_rb_get_subbuffer_offset');
  ma_pcm_rb_get_subbuffer_ptr := GetProcAddress(LDllHandle, 'ma_pcm_rb_get_subbuffer_ptr');
  ma_pcm_rb_get_subbuffer_size := GetProcAddress(LDllHandle, 'ma_pcm_rb_get_subbuffer_size');
  ma_pcm_rb_get_subbuffer_stride := GetProcAddress(LDllHandle, 'ma_pcm_rb_get_subbuffer_stride');
  ma_pcm_rb_init := GetProcAddress(LDllHandle, 'ma_pcm_rb_init');
  ma_pcm_rb_init_ex := GetProcAddress(LDllHandle, 'ma_pcm_rb_init_ex');
  ma_pcm_rb_pointer_distance := GetProcAddress(LDllHandle, 'ma_pcm_rb_pointer_distance');
  ma_pcm_rb_reset := GetProcAddress(LDllHandle, 'ma_pcm_rb_reset');
  ma_pcm_rb_seek_read := GetProcAddress(LDllHandle, 'ma_pcm_rb_seek_read');
  ma_pcm_rb_seek_write := GetProcAddress(LDllHandle, 'ma_pcm_rb_seek_write');
  ma_pcm_rb_uninit := GetProcAddress(LDllHandle, 'ma_pcm_rb_uninit');
  ma_pcm_s16_to_f32 := GetProcAddress(LDllHandle, 'ma_pcm_s16_to_f32');
  ma_pcm_s16_to_s24 := GetProcAddress(LDllHandle, 'ma_pcm_s16_to_s24');
  ma_pcm_s16_to_s32 := GetProcAddress(LDllHandle, 'ma_pcm_s16_to_s32');
  ma_pcm_s16_to_u8 := GetProcAddress(LDllHandle, 'ma_pcm_s16_to_u8');
  ma_pcm_s24_to_f32 := GetProcAddress(LDllHandle, 'ma_pcm_s24_to_f32');
  ma_pcm_s24_to_s16 := GetProcAddress(LDllHandle, 'ma_pcm_s24_to_s16');
  ma_pcm_s24_to_s32 := GetProcAddress(LDllHandle, 'ma_pcm_s24_to_s32');
  ma_pcm_s24_to_u8 := GetProcAddress(LDllHandle, 'ma_pcm_s24_to_u8');
  ma_pcm_s32_to_f32 := GetProcAddress(LDllHandle, 'ma_pcm_s32_to_f32');
  ma_pcm_s32_to_s16 := GetProcAddress(LDllHandle, 'ma_pcm_s32_to_s16');
  ma_pcm_s32_to_s24 := GetProcAddress(LDllHandle, 'ma_pcm_s32_to_s24');
  ma_pcm_s32_to_u8 := GetProcAddress(LDllHandle, 'ma_pcm_s32_to_u8');
  ma_pcm_u8_to_f32 := GetProcAddress(LDllHandle, 'ma_pcm_u8_to_f32');
  ma_pcm_u8_to_s16 := GetProcAddress(LDllHandle, 'ma_pcm_u8_to_s16');
  ma_pcm_u8_to_s24 := GetProcAddress(LDllHandle, 'ma_pcm_u8_to_s24');
  ma_pcm_u8_to_s32 := GetProcAddress(LDllHandle, 'ma_pcm_u8_to_s32');
  ma_peak_node_config_init := GetProcAddress(LDllHandle, 'ma_peak_node_config_init');
  ma_peak_node_init := GetProcAddress(LDllHandle, 'ma_peak_node_init');
  ma_peak_node_reinit := GetProcAddress(LDllHandle, 'ma_peak_node_reinit');
  ma_peak_node_uninit := GetProcAddress(LDllHandle, 'ma_peak_node_uninit');
  ma_peak2_config_init := GetProcAddress(LDllHandle, 'ma_peak2_config_init');
  ma_peak2_get_heap_size := GetProcAddress(LDllHandle, 'ma_peak2_get_heap_size');
  ma_peak2_get_latency := GetProcAddress(LDllHandle, 'ma_peak2_get_latency');
  ma_peak2_init := GetProcAddress(LDllHandle, 'ma_peak2_init');
  ma_peak2_init_preallocated := GetProcAddress(LDllHandle, 'ma_peak2_init_preallocated');
  ma_peak2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_peak2_process_pcm_frames');
  ma_peak2_reinit := GetProcAddress(LDllHandle, 'ma_peak2_reinit');
  ma_peak2_uninit := GetProcAddress(LDllHandle, 'ma_peak2_uninit');
  ma_rb_acquire_read := GetProcAddress(LDllHandle, 'ma_rb_acquire_read');
  ma_rb_acquire_write := GetProcAddress(LDllHandle, 'ma_rb_acquire_write');
  ma_rb_available_read := GetProcAddress(LDllHandle, 'ma_rb_available_read');
  ma_rb_available_write := GetProcAddress(LDllHandle, 'ma_rb_available_write');
  ma_rb_commit_read := GetProcAddress(LDllHandle, 'ma_rb_commit_read');
  ma_rb_commit_write := GetProcAddress(LDllHandle, 'ma_rb_commit_write');
  ma_rb_get_subbuffer_offset := GetProcAddress(LDllHandle, 'ma_rb_get_subbuffer_offset');
  ma_rb_get_subbuffer_ptr := GetProcAddress(LDllHandle, 'ma_rb_get_subbuffer_ptr');
  ma_rb_get_subbuffer_size := GetProcAddress(LDllHandle, 'ma_rb_get_subbuffer_size');
  ma_rb_get_subbuffer_stride := GetProcAddress(LDllHandle, 'ma_rb_get_subbuffer_stride');
  ma_rb_init := GetProcAddress(LDllHandle, 'ma_rb_init');
  ma_rb_init_ex := GetProcAddress(LDllHandle, 'ma_rb_init_ex');
  ma_rb_pointer_distance := GetProcAddress(LDllHandle, 'ma_rb_pointer_distance');
  ma_rb_reset := GetProcAddress(LDllHandle, 'ma_rb_reset');
  ma_rb_seek_read := GetProcAddress(LDllHandle, 'ma_rb_seek_read');
  ma_rb_seek_write := GetProcAddress(LDllHandle, 'ma_rb_seek_write');
  ma_rb_uninit := GetProcAddress(LDllHandle, 'ma_rb_uninit');
  ma_realloc := GetProcAddress(LDllHandle, 'ma_realloc');
  ma_resampler_config_init := GetProcAddress(LDllHandle, 'ma_resampler_config_init');
  ma_resampler_get_expected_output_frame_count := GetProcAddress(LDllHandle, 'ma_resampler_get_expected_output_frame_count');
  ma_resampler_get_heap_size := GetProcAddress(LDllHandle, 'ma_resampler_get_heap_size');
  ma_resampler_get_input_latency := GetProcAddress(LDllHandle, 'ma_resampler_get_input_latency');
  ma_resampler_get_output_latency := GetProcAddress(LDllHandle, 'ma_resampler_get_output_latency');
  ma_resampler_get_required_input_frame_count := GetProcAddress(LDllHandle, 'ma_resampler_get_required_input_frame_count');
  ma_resampler_init := GetProcAddress(LDllHandle, 'ma_resampler_init');
  ma_resampler_init_preallocated := GetProcAddress(LDllHandle, 'ma_resampler_init_preallocated');
  ma_resampler_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_resampler_process_pcm_frames');
  ma_resampler_set_rate := GetProcAddress(LDllHandle, 'ma_resampler_set_rate');
  ma_resampler_set_rate_ratio := GetProcAddress(LDllHandle, 'ma_resampler_set_rate_ratio');
  ma_resampler_uninit := GetProcAddress(LDllHandle, 'ma_resampler_uninit');
  ma_resource_manager_config_init := GetProcAddress(LDllHandle, 'ma_resource_manager_config_init');
  ma_resource_manager_data_buffer_get_available_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_get_available_frames');
  ma_resource_manager_data_buffer_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_get_cursor_in_pcm_frames');
  ma_resource_manager_data_buffer_get_data_format := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_get_data_format');
  ma_resource_manager_data_buffer_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_get_length_in_pcm_frames');
  ma_resource_manager_data_buffer_init := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_init');
  ma_resource_manager_data_buffer_init_copy := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_init_copy');
  ma_resource_manager_data_buffer_init_ex := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_init_ex');
  ma_resource_manager_data_buffer_init_w := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_init_w');
  ma_resource_manager_data_buffer_is_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_is_looping');
  ma_resource_manager_data_buffer_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_read_pcm_frames');
  ma_resource_manager_data_buffer_result := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_result');
  ma_resource_manager_data_buffer_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_seek_to_pcm_frame');
  ma_resource_manager_data_buffer_set_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_set_looping');
  ma_resource_manager_data_buffer_uninit := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_uninit');
  ma_resource_manager_data_source_config_init := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_config_init');
  ma_resource_manager_data_source_get_available_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_get_available_frames');
  ma_resource_manager_data_source_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_get_cursor_in_pcm_frames');
  ma_resource_manager_data_source_get_data_format := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_get_data_format');
  ma_resource_manager_data_source_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_get_length_in_pcm_frames');
  ma_resource_manager_data_source_init := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_init');
  ma_resource_manager_data_source_init_copy := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_init_copy');
  ma_resource_manager_data_source_init_ex := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_init_ex');
  ma_resource_manager_data_source_init_w := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_init_w');
  ma_resource_manager_data_source_is_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_is_looping');
  ma_resource_manager_data_source_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_read_pcm_frames');
  ma_resource_manager_data_source_result := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_result');
  ma_resource_manager_data_source_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_seek_to_pcm_frame');
  ma_resource_manager_data_source_set_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_set_looping');
  ma_resource_manager_data_source_uninit := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_uninit');
  ma_resource_manager_data_stream_get_available_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_get_available_frames');
  ma_resource_manager_data_stream_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_get_cursor_in_pcm_frames');
  ma_resource_manager_data_stream_get_data_format := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_get_data_format');
  ma_resource_manager_data_stream_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_get_length_in_pcm_frames');
  ma_resource_manager_data_stream_init := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_init');
  ma_resource_manager_data_stream_init_ex := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_init_ex');
  ma_resource_manager_data_stream_init_w := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_init_w');
  ma_resource_manager_data_stream_is_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_is_looping');
  ma_resource_manager_data_stream_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_read_pcm_frames');
  ma_resource_manager_data_stream_result := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_result');
  ma_resource_manager_data_stream_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_seek_to_pcm_frame');
  ma_resource_manager_data_stream_set_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_set_looping');
  ma_resource_manager_data_stream_uninit := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_uninit');
  ma_resource_manager_get_log := GetProcAddress(LDllHandle, 'ma_resource_manager_get_log');
  ma_resource_manager_init := GetProcAddress(LDllHandle, 'ma_resource_manager_init');
  ma_resource_manager_next_job := GetProcAddress(LDllHandle, 'ma_resource_manager_next_job');
  ma_resource_manager_pipeline_notifications_init := GetProcAddress(LDllHandle, 'ma_resource_manager_pipeline_notifications_init');
  ma_resource_manager_post_job := GetProcAddress(LDllHandle, 'ma_resource_manager_post_job');
  ma_resource_manager_post_job_quit := GetProcAddress(LDllHandle, 'ma_resource_manager_post_job_quit');
  ma_resource_manager_process_job := GetProcAddress(LDllHandle, 'ma_resource_manager_process_job');
  ma_resource_manager_process_next_job := GetProcAddress(LDllHandle, 'ma_resource_manager_process_next_job');
  ma_resource_manager_register_decoded_data := GetProcAddress(LDllHandle, 'ma_resource_manager_register_decoded_data');
  ma_resource_manager_register_decoded_data_w := GetProcAddress(LDllHandle, 'ma_resource_manager_register_decoded_data_w');
  ma_resource_manager_register_encoded_data := GetProcAddress(LDllHandle, 'ma_resource_manager_register_encoded_data');
  ma_resource_manager_register_encoded_data_w := GetProcAddress(LDllHandle, 'ma_resource_manager_register_encoded_data_w');
  ma_resource_manager_register_file := GetProcAddress(LDllHandle, 'ma_resource_manager_register_file');
  ma_resource_manager_register_file_w := GetProcAddress(LDllHandle, 'ma_resource_manager_register_file_w');
  ma_resource_manager_uninit := GetProcAddress(LDllHandle, 'ma_resource_manager_uninit');
  ma_resource_manager_unregister_data := GetProcAddress(LDllHandle, 'ma_resource_manager_unregister_data');
  ma_resource_manager_unregister_data_w := GetProcAddress(LDllHandle, 'ma_resource_manager_unregister_data_w');
  ma_resource_manager_unregister_file := GetProcAddress(LDllHandle, 'ma_resource_manager_unregister_file');
  ma_resource_manager_unregister_file_w := GetProcAddress(LDllHandle, 'ma_resource_manager_unregister_file_w');
  ma_result_description := GetProcAddress(LDllHandle, 'ma_result_description');
  ma_silence_pcm_frames := GetProcAddress(LDllHandle, 'ma_silence_pcm_frames');
  ma_slot_allocator_alloc := GetProcAddress(LDllHandle, 'ma_slot_allocator_alloc');
  ma_slot_allocator_config_init := GetProcAddress(LDllHandle, 'ma_slot_allocator_config_init');
  ma_slot_allocator_free := GetProcAddress(LDllHandle, 'ma_slot_allocator_free');
  ma_slot_allocator_get_heap_size := GetProcAddress(LDllHandle, 'ma_slot_allocator_get_heap_size');
  ma_slot_allocator_init := GetProcAddress(LDllHandle, 'ma_slot_allocator_init');
  ma_slot_allocator_init_preallocated := GetProcAddress(LDllHandle, 'ma_slot_allocator_init_preallocated');
  ma_slot_allocator_uninit := GetProcAddress(LDllHandle, 'ma_slot_allocator_uninit');
  ma_sound_at_end := GetProcAddress(LDllHandle, 'ma_sound_at_end');
  ma_sound_config_init := GetProcAddress(LDllHandle, 'ma_sound_config_init');
  ma_sound_get_attenuation_model := GetProcAddress(LDllHandle, 'ma_sound_get_attenuation_model');
  ma_sound_get_cone := GetProcAddress(LDllHandle, 'ma_sound_get_cone');
  ma_sound_get_current_fade_volume := GetProcAddress(LDllHandle, 'ma_sound_get_current_fade_volume');
  ma_sound_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_get_cursor_in_pcm_frames');
  ma_sound_get_data_format := GetProcAddress(LDllHandle, 'ma_sound_get_data_format');
  ma_sound_get_data_source := GetProcAddress(LDllHandle, 'ma_sound_get_data_source');
  ma_sound_get_direction := GetProcAddress(LDllHandle, 'ma_sound_get_direction');
  ma_sound_get_direction_to_listener := GetProcAddress(LDllHandle, 'ma_sound_get_direction_to_listener');
  ma_sound_get_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_sound_get_directional_attenuation_factor');
  ma_sound_get_doppler_factor := GetProcAddress(LDllHandle, 'ma_sound_get_doppler_factor');
  ma_sound_get_engine := GetProcAddress(LDllHandle, 'ma_sound_get_engine');
  ma_sound_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_get_length_in_pcm_frames');
  ma_sound_get_listener_index := GetProcAddress(LDllHandle, 'ma_sound_get_listener_index');
  ma_sound_get_max_distance := GetProcAddress(LDllHandle, 'ma_sound_get_max_distance');
  ma_sound_get_max_gain := GetProcAddress(LDllHandle, 'ma_sound_get_max_gain');
  ma_sound_get_min_distance := GetProcAddress(LDllHandle, 'ma_sound_get_min_distance');
  ma_sound_get_min_gain := GetProcAddress(LDllHandle, 'ma_sound_get_min_gain');
  ma_sound_get_pan := GetProcAddress(LDllHandle, 'ma_sound_get_pan');
  ma_sound_get_pan_mode := GetProcAddress(LDllHandle, 'ma_sound_get_pan_mode');
  ma_sound_get_pinned_listener_index := GetProcAddress(LDllHandle, 'ma_sound_get_pinned_listener_index');
  ma_sound_get_pitch := GetProcAddress(LDllHandle, 'ma_sound_get_pitch');
  ma_sound_get_position := GetProcAddress(LDllHandle, 'ma_sound_get_position');
  ma_sound_get_positioning := GetProcAddress(LDllHandle, 'ma_sound_get_positioning');
  ma_sound_get_rolloff := GetProcAddress(LDllHandle, 'ma_sound_get_rolloff');
  ma_sound_get_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_get_time_in_pcm_frames');
  ma_sound_get_velocity := GetProcAddress(LDllHandle, 'ma_sound_get_velocity');
  ma_sound_get_volume := GetProcAddress(LDllHandle, 'ma_sound_get_volume');
  ma_sound_group_config_init := GetProcAddress(LDllHandle, 'ma_sound_group_config_init');
  ma_sound_group_get_attenuation_model := GetProcAddress(LDllHandle, 'ma_sound_group_get_attenuation_model');
  ma_sound_group_get_cone := GetProcAddress(LDllHandle, 'ma_sound_group_get_cone');
  ma_sound_group_get_current_fade_volume := GetProcAddress(LDllHandle, 'ma_sound_group_get_current_fade_volume');
  ma_sound_group_get_direction := GetProcAddress(LDllHandle, 'ma_sound_group_get_direction');
  ma_sound_group_get_direction_to_listener := GetProcAddress(LDllHandle, 'ma_sound_group_get_direction_to_listener');
  ma_sound_group_get_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_sound_group_get_directional_attenuation_factor');
  ma_sound_group_get_doppler_factor := GetProcAddress(LDllHandle, 'ma_sound_group_get_doppler_factor');
  ma_sound_group_get_engine := GetProcAddress(LDllHandle, 'ma_sound_group_get_engine');
  ma_sound_group_get_listener_index := GetProcAddress(LDllHandle, 'ma_sound_group_get_listener_index');
  ma_sound_group_get_max_distance := GetProcAddress(LDllHandle, 'ma_sound_group_get_max_distance');
  ma_sound_group_get_max_gain := GetProcAddress(LDllHandle, 'ma_sound_group_get_max_gain');
  ma_sound_group_get_min_distance := GetProcAddress(LDllHandle, 'ma_sound_group_get_min_distance');
  ma_sound_group_get_min_gain := GetProcAddress(LDllHandle, 'ma_sound_group_get_min_gain');
  ma_sound_group_get_pan := GetProcAddress(LDllHandle, 'ma_sound_group_get_pan');
  ma_sound_group_get_pan_mode := GetProcAddress(LDllHandle, 'ma_sound_group_get_pan_mode');
  ma_sound_group_get_pinned_listener_index := GetProcAddress(LDllHandle, 'ma_sound_group_get_pinned_listener_index');
  ma_sound_group_get_pitch := GetProcAddress(LDllHandle, 'ma_sound_group_get_pitch');
  ma_sound_group_get_position := GetProcAddress(LDllHandle, 'ma_sound_group_get_position');
  ma_sound_group_get_positioning := GetProcAddress(LDllHandle, 'ma_sound_group_get_positioning');
  ma_sound_group_get_rolloff := GetProcAddress(LDllHandle, 'ma_sound_group_get_rolloff');
  ma_sound_group_get_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_group_get_time_in_pcm_frames');
  ma_sound_group_get_velocity := GetProcAddress(LDllHandle, 'ma_sound_group_get_velocity');
  ma_sound_group_get_volume := GetProcAddress(LDllHandle, 'ma_sound_group_get_volume');
  ma_sound_group_init := GetProcAddress(LDllHandle, 'ma_sound_group_init');
  ma_sound_group_init_ex := GetProcAddress(LDllHandle, 'ma_sound_group_init_ex');
  ma_sound_group_is_playing := GetProcAddress(LDllHandle, 'ma_sound_group_is_playing');
  ma_sound_group_is_spatialization_enabled := GetProcAddress(LDllHandle, 'ma_sound_group_is_spatialization_enabled');
  ma_sound_group_set_attenuation_model := GetProcAddress(LDllHandle, 'ma_sound_group_set_attenuation_model');
  ma_sound_group_set_cone := GetProcAddress(LDllHandle, 'ma_sound_group_set_cone');
  ma_sound_group_set_direction := GetProcAddress(LDllHandle, 'ma_sound_group_set_direction');
  ma_sound_group_set_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_sound_group_set_directional_attenuation_factor');
  ma_sound_group_set_doppler_factor := GetProcAddress(LDllHandle, 'ma_sound_group_set_doppler_factor');
  ma_sound_group_set_fade_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_group_set_fade_in_milliseconds');
  ma_sound_group_set_fade_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_group_set_fade_in_pcm_frames');
  ma_sound_group_set_max_distance := GetProcAddress(LDllHandle, 'ma_sound_group_set_max_distance');
  ma_sound_group_set_max_gain := GetProcAddress(LDllHandle, 'ma_sound_group_set_max_gain');
  ma_sound_group_set_min_distance := GetProcAddress(LDllHandle, 'ma_sound_group_set_min_distance');
  ma_sound_group_set_min_gain := GetProcAddress(LDllHandle, 'ma_sound_group_set_min_gain');
  ma_sound_group_set_pan := GetProcAddress(LDllHandle, 'ma_sound_group_set_pan');
  ma_sound_group_set_pan_mode := GetProcAddress(LDllHandle, 'ma_sound_group_set_pan_mode');
  ma_sound_group_set_pinned_listener_index := GetProcAddress(LDllHandle, 'ma_sound_group_set_pinned_listener_index');
  ma_sound_group_set_pitch := GetProcAddress(LDllHandle, 'ma_sound_group_set_pitch');
  ma_sound_group_set_position := GetProcAddress(LDllHandle, 'ma_sound_group_set_position');
  ma_sound_group_set_positioning := GetProcAddress(LDllHandle, 'ma_sound_group_set_positioning');
  ma_sound_group_set_rolloff := GetProcAddress(LDllHandle, 'ma_sound_group_set_rolloff');
  ma_sound_group_set_spatialization_enabled := GetProcAddress(LDllHandle, 'ma_sound_group_set_spatialization_enabled');
  ma_sound_group_set_start_time_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_group_set_start_time_in_milliseconds');
  ma_sound_group_set_start_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_group_set_start_time_in_pcm_frames');
  ma_sound_group_set_stop_time_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_group_set_stop_time_in_milliseconds');
  ma_sound_group_set_stop_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_group_set_stop_time_in_pcm_frames');
  ma_sound_group_set_velocity := GetProcAddress(LDllHandle, 'ma_sound_group_set_velocity');
  ma_sound_group_set_volume := GetProcAddress(LDllHandle, 'ma_sound_group_set_volume');
  ma_sound_group_start := GetProcAddress(LDllHandle, 'ma_sound_group_start');
  ma_sound_group_stop := GetProcAddress(LDllHandle, 'ma_sound_group_stop');
  ma_sound_group_uninit := GetProcAddress(LDllHandle, 'ma_sound_group_uninit');
  ma_sound_init_copy := GetProcAddress(LDllHandle, 'ma_sound_init_copy');
  ma_sound_init_ex := GetProcAddress(LDllHandle, 'ma_sound_init_ex');
  ma_sound_init_from_data_source := GetProcAddress(LDllHandle, 'ma_sound_init_from_data_source');
  ma_sound_init_from_file := GetProcAddress(LDllHandle, 'ma_sound_init_from_file');
  ma_sound_init_from_file_w := GetProcAddress(LDllHandle, 'ma_sound_init_from_file_w');
  ma_sound_is_looping := GetProcAddress(LDllHandle, 'ma_sound_is_looping');
  ma_sound_is_playing := GetProcAddress(LDllHandle, 'ma_sound_is_playing');
  ma_sound_is_spatialization_enabled := GetProcAddress(LDllHandle, 'ma_sound_is_spatialization_enabled');
  ma_sound_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_sound_seek_to_pcm_frame');
  ma_sound_set_attenuation_model := GetProcAddress(LDllHandle, 'ma_sound_set_attenuation_model');
  ma_sound_set_cone := GetProcAddress(LDllHandle, 'ma_sound_set_cone');
  ma_sound_set_direction := GetProcAddress(LDllHandle, 'ma_sound_set_direction');
  ma_sound_set_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_sound_set_directional_attenuation_factor');
  ma_sound_set_doppler_factor := GetProcAddress(LDllHandle, 'ma_sound_set_doppler_factor');
  ma_sound_set_fade_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_set_fade_in_milliseconds');
  ma_sound_set_fade_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_set_fade_in_pcm_frames');
  ma_sound_set_looping := GetProcAddress(LDllHandle, 'ma_sound_set_looping');
  ma_sound_set_max_distance := GetProcAddress(LDllHandle, 'ma_sound_set_max_distance');
  ma_sound_set_max_gain := GetProcAddress(LDllHandle, 'ma_sound_set_max_gain');
  ma_sound_set_min_distance := GetProcAddress(LDllHandle, 'ma_sound_set_min_distance');
  ma_sound_set_min_gain := GetProcAddress(LDllHandle, 'ma_sound_set_min_gain');
  ma_sound_set_pan := GetProcAddress(LDllHandle, 'ma_sound_set_pan');
  ma_sound_set_pan_mode := GetProcAddress(LDllHandle, 'ma_sound_set_pan_mode');
  ma_sound_set_pinned_listener_index := GetProcAddress(LDllHandle, 'ma_sound_set_pinned_listener_index');
  ma_sound_set_pitch := GetProcAddress(LDllHandle, 'ma_sound_set_pitch');
  ma_sound_set_position := GetProcAddress(LDllHandle, 'ma_sound_set_position');
  ma_sound_set_positioning := GetProcAddress(LDllHandle, 'ma_sound_set_positioning');
  ma_sound_set_rolloff := GetProcAddress(LDllHandle, 'ma_sound_set_rolloff');
  ma_sound_set_spatialization_enabled := GetProcAddress(LDllHandle, 'ma_sound_set_spatialization_enabled');
  ma_sound_set_start_time_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_set_start_time_in_milliseconds');
  ma_sound_set_start_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_set_start_time_in_pcm_frames');
  ma_sound_set_stop_time_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_set_stop_time_in_milliseconds');
  ma_sound_set_stop_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_set_stop_time_in_pcm_frames');
  ma_sound_set_velocity := GetProcAddress(LDllHandle, 'ma_sound_set_velocity');
  ma_sound_set_volume := GetProcAddress(LDllHandle, 'ma_sound_set_volume');
  ma_sound_start := GetProcAddress(LDllHandle, 'ma_sound_start');
  ma_sound_stop := GetProcAddress(LDllHandle, 'ma_sound_stop');
  ma_sound_uninit := GetProcAddress(LDllHandle, 'ma_sound_uninit');
  ma_spatializer_config_init := GetProcAddress(LDllHandle, 'ma_spatializer_config_init');
  ma_spatializer_get_attenuation_model := GetProcAddress(LDllHandle, 'ma_spatializer_get_attenuation_model');
  ma_spatializer_get_cone := GetProcAddress(LDllHandle, 'ma_spatializer_get_cone');
  ma_spatializer_get_direction := GetProcAddress(LDllHandle, 'ma_spatializer_get_direction');
  ma_spatializer_get_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_spatializer_get_directional_attenuation_factor');
  ma_spatializer_get_doppler_factor := GetProcAddress(LDllHandle, 'ma_spatializer_get_doppler_factor');
  ma_spatializer_get_heap_size := GetProcAddress(LDllHandle, 'ma_spatializer_get_heap_size');
  ma_spatializer_get_input_channels := GetProcAddress(LDllHandle, 'ma_spatializer_get_input_channels');
  ma_spatializer_get_max_distance := GetProcAddress(LDllHandle, 'ma_spatializer_get_max_distance');
  ma_spatializer_get_max_gain := GetProcAddress(LDllHandle, 'ma_spatializer_get_max_gain');
  ma_spatializer_get_min_distance := GetProcAddress(LDllHandle, 'ma_spatializer_get_min_distance');
  ma_spatializer_get_min_gain := GetProcAddress(LDllHandle, 'ma_spatializer_get_min_gain');
  ma_spatializer_get_output_channels := GetProcAddress(LDllHandle, 'ma_spatializer_get_output_channels');
  ma_spatializer_get_position := GetProcAddress(LDllHandle, 'ma_spatializer_get_position');
  ma_spatializer_get_positioning := GetProcAddress(LDllHandle, 'ma_spatializer_get_positioning');
  ma_spatializer_get_relative_position_and_direction := GetProcAddress(LDllHandle, 'ma_spatializer_get_relative_position_and_direction');
  ma_spatializer_get_rolloff := GetProcAddress(LDllHandle, 'ma_spatializer_get_rolloff');
  ma_spatializer_get_velocity := GetProcAddress(LDllHandle, 'ma_spatializer_get_velocity');
  ma_spatializer_init := GetProcAddress(LDllHandle, 'ma_spatializer_init');
  ma_spatializer_init_preallocated := GetProcAddress(LDllHandle, 'ma_spatializer_init_preallocated');
  ma_spatializer_listener_config_init := GetProcAddress(LDllHandle, 'ma_spatializer_listener_config_init');
  ma_spatializer_listener_get_channel_map := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_channel_map');
  ma_spatializer_listener_get_cone := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_cone');
  ma_spatializer_listener_get_direction := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_direction');
  ma_spatializer_listener_get_heap_size := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_heap_size');
  ma_spatializer_listener_get_position := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_position');
  ma_spatializer_listener_get_speed_of_sound := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_speed_of_sound');
  ma_spatializer_listener_get_velocity := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_velocity');
  ma_spatializer_listener_get_world_up := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_world_up');
  ma_spatializer_listener_init := GetProcAddress(LDllHandle, 'ma_spatializer_listener_init');
  ma_spatializer_listener_init_preallocated := GetProcAddress(LDllHandle, 'ma_spatializer_listener_init_preallocated');
  ma_spatializer_listener_is_enabled := GetProcAddress(LDllHandle, 'ma_spatializer_listener_is_enabled');
  ma_spatializer_listener_set_cone := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_cone');
  ma_spatializer_listener_set_direction := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_direction');
  ma_spatializer_listener_set_enabled := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_enabled');
  ma_spatializer_listener_set_position := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_position');
  ma_spatializer_listener_set_speed_of_sound := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_speed_of_sound');
  ma_spatializer_listener_set_velocity := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_velocity');
  ma_spatializer_listener_set_world_up := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_world_up');
  ma_spatializer_listener_uninit := GetProcAddress(LDllHandle, 'ma_spatializer_listener_uninit');
  ma_spatializer_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_spatializer_process_pcm_frames');
  ma_spatializer_set_attenuation_model := GetProcAddress(LDllHandle, 'ma_spatializer_set_attenuation_model');
  ma_spatializer_set_cone := GetProcAddress(LDllHandle, 'ma_spatializer_set_cone');
  ma_spatializer_set_direction := GetProcAddress(LDllHandle, 'ma_spatializer_set_direction');
  ma_spatializer_set_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_spatializer_set_directional_attenuation_factor');
  ma_spatializer_set_doppler_factor := GetProcAddress(LDllHandle, 'ma_spatializer_set_doppler_factor');
  ma_spatializer_set_max_distance := GetProcAddress(LDllHandle, 'ma_spatializer_set_max_distance');
  ma_spatializer_set_max_gain := GetProcAddress(LDllHandle, 'ma_spatializer_set_max_gain');
  ma_spatializer_set_min_distance := GetProcAddress(LDllHandle, 'ma_spatializer_set_min_distance');
  ma_spatializer_set_min_gain := GetProcAddress(LDllHandle, 'ma_spatializer_set_min_gain');
  ma_spatializer_set_position := GetProcAddress(LDllHandle, 'ma_spatializer_set_position');
  ma_spatializer_set_positioning := GetProcAddress(LDllHandle, 'ma_spatializer_set_positioning');
  ma_spatializer_set_rolloff := GetProcAddress(LDllHandle, 'ma_spatializer_set_rolloff');
  ma_spatializer_set_velocity := GetProcAddress(LDllHandle, 'ma_spatializer_set_velocity');
  ma_spatializer_uninit := GetProcAddress(LDllHandle, 'ma_spatializer_uninit');
  ma_spinlock_lock := GetProcAddress(LDllHandle, 'ma_spinlock_lock');
  ma_spinlock_lock_noyield := GetProcAddress(LDllHandle, 'ma_spinlock_lock_noyield');
  ma_spinlock_unlock := GetProcAddress(LDllHandle, 'ma_spinlock_unlock');
  ma_splitter_node_config_init := GetProcAddress(LDllHandle, 'ma_splitter_node_config_init');
  ma_splitter_node_init := GetProcAddress(LDllHandle, 'ma_splitter_node_init');
  ma_splitter_node_uninit := GetProcAddress(LDllHandle, 'ma_splitter_node_uninit');
  ma_version := GetProcAddress(LDllHandle, 'ma_version');
  ma_version_string := GetProcAddress(LDllHandle, 'ma_version_string');
  ma_vfs_close := GetProcAddress(LDllHandle, 'ma_vfs_close');
  ma_vfs_info := GetProcAddress(LDllHandle, 'ma_vfs_info');
  ma_vfs_open := GetProcAddress(LDllHandle, 'ma_vfs_open');
  ma_vfs_open_and_read_file := GetProcAddress(LDllHandle, 'ma_vfs_open_and_read_file');
  ma_vfs_open_w := GetProcAddress(LDllHandle, 'ma_vfs_open_w');
  ma_vfs_read := GetProcAddress(LDllHandle, 'ma_vfs_read');
  ma_vfs_seek := GetProcAddress(LDllHandle, 'ma_vfs_seek');
  ma_vfs_tell := GetProcAddress(LDllHandle, 'ma_vfs_tell');
  ma_vfs_write := GetProcAddress(LDllHandle, 'ma_vfs_write');
  ma_volume_db_to_linear := GetProcAddress(LDllHandle, 'ma_volume_db_to_linear');
  ma_volume_linear_to_db := GetProcAddress(LDllHandle, 'ma_volume_linear_to_db');
  ma_waveform_config_init := GetProcAddress(LDllHandle, 'ma_waveform_config_init');
  ma_waveform_init := GetProcAddress(LDllHandle, 'ma_waveform_init');
  ma_waveform_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_waveform_read_pcm_frames');
  ma_waveform_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_waveform_seek_to_pcm_frame');
  ma_waveform_set_amplitude := GetProcAddress(LDllHandle, 'ma_waveform_set_amplitude');
  ma_waveform_set_frequency := GetProcAddress(LDllHandle, 'ma_waveform_set_frequency');
  ma_waveform_set_sample_rate := GetProcAddress(LDllHandle, 'ma_waveform_set_sample_rate');
  ma_waveform_set_type := GetProcAddress(LDllHandle, 'ma_waveform_set_type');
  ma_waveform_uninit := GetProcAddress(LDllHandle, 'ma_waveform_uninit');
  nk__begin := GetProcAddress(LDllHandle, 'nk__begin');
  nk__next := GetProcAddress(LDllHandle, 'nk__next');
  nk_begin := GetProcAddress(LDllHandle, 'nk_begin');
  nk_begin_titled := GetProcAddress(LDllHandle, 'nk_begin_titled');
  nk_buffer_clear := GetProcAddress(LDllHandle, 'nk_buffer_clear');
  nk_buffer_free := GetProcAddress(LDllHandle, 'nk_buffer_free');
  nk_buffer_info := GetProcAddress(LDllHandle, 'nk_buffer_info');
  nk_buffer_init := GetProcAddress(LDllHandle, 'nk_buffer_init');
  nk_buffer_init_default := GetProcAddress(LDllHandle, 'nk_buffer_init_default');
  nk_buffer_init_fixed := GetProcAddress(LDllHandle, 'nk_buffer_init_fixed');
  nk_buffer_mark := GetProcAddress(LDllHandle, 'nk_buffer_mark');
  nk_buffer_memory := GetProcAddress(LDllHandle, 'nk_buffer_memory');
  nk_buffer_memory_const := GetProcAddress(LDllHandle, 'nk_buffer_memory_const');
  nk_buffer_push := GetProcAddress(LDllHandle, 'nk_buffer_push');
  nk_buffer_reset := GetProcAddress(LDllHandle, 'nk_buffer_reset');
  nk_buffer_total := GetProcAddress(LDllHandle, 'nk_buffer_total');
  nk_button_color := GetProcAddress(LDllHandle, 'nk_button_color');
  nk_button_image := GetProcAddress(LDllHandle, 'nk_button_image');
  nk_button_image_label := GetProcAddress(LDllHandle, 'nk_button_image_label');
  nk_button_image_label_styled := GetProcAddress(LDllHandle, 'nk_button_image_label_styled');
  nk_button_image_styled := GetProcAddress(LDllHandle, 'nk_button_image_styled');
  nk_button_image_text := GetProcAddress(LDllHandle, 'nk_button_image_text');
  nk_button_image_text_styled := GetProcAddress(LDllHandle, 'nk_button_image_text_styled');
  nk_button_label := GetProcAddress(LDllHandle, 'nk_button_label');
  nk_button_label_styled := GetProcAddress(LDllHandle, 'nk_button_label_styled');
  nk_button_pop_behavior := GetProcAddress(LDllHandle, 'nk_button_pop_behavior');
  nk_button_push_behavior := GetProcAddress(LDllHandle, 'nk_button_push_behavior');
  nk_button_set_behavior := GetProcAddress(LDllHandle, 'nk_button_set_behavior');
  nk_button_symbol := GetProcAddress(LDllHandle, 'nk_button_symbol');
  nk_button_symbol_label := GetProcAddress(LDllHandle, 'nk_button_symbol_label');
  nk_button_symbol_label_styled := GetProcAddress(LDllHandle, 'nk_button_symbol_label_styled');
  nk_button_symbol_styled := GetProcAddress(LDllHandle, 'nk_button_symbol_styled');
  nk_button_symbol_text := GetProcAddress(LDllHandle, 'nk_button_symbol_text');
  nk_button_symbol_text_styled := GetProcAddress(LDllHandle, 'nk_button_symbol_text_styled');
  nk_button_text := GetProcAddress(LDllHandle, 'nk_button_text');
  nk_button_text_styled := GetProcAddress(LDllHandle, 'nk_button_text_styled');
  nk_chart_add_slot := GetProcAddress(LDllHandle, 'nk_chart_add_slot');
  nk_chart_add_slot_colored := GetProcAddress(LDllHandle, 'nk_chart_add_slot_colored');
  nk_chart_begin := GetProcAddress(LDllHandle, 'nk_chart_begin');
  nk_chart_begin_colored := GetProcAddress(LDllHandle, 'nk_chart_begin_colored');
  nk_chart_end := GetProcAddress(LDllHandle, 'nk_chart_end');
  nk_chart_push := GetProcAddress(LDllHandle, 'nk_chart_push');
  nk_chart_push_slot := GetProcAddress(LDllHandle, 'nk_chart_push_slot');
  nk_check_flags_label := GetProcAddress(LDllHandle, 'nk_check_flags_label');
  nk_check_flags_text := GetProcAddress(LDllHandle, 'nk_check_flags_text');
  nk_check_label := GetProcAddress(LDllHandle, 'nk_check_label');
  nk_check_text := GetProcAddress(LDllHandle, 'nk_check_text');
  nk_checkbox_flags_label := GetProcAddress(LDllHandle, 'nk_checkbox_flags_label');
  nk_checkbox_flags_text := GetProcAddress(LDllHandle, 'nk_checkbox_flags_text');
  nk_checkbox_label := GetProcAddress(LDllHandle, 'nk_checkbox_label');
  nk_checkbox_text := GetProcAddress(LDllHandle, 'nk_checkbox_text');
  nk_clear := GetProcAddress(LDllHandle, 'nk_clear');
  nk_color_cf := GetProcAddress(LDllHandle, 'nk_color_cf');
  nk_color_d := GetProcAddress(LDllHandle, 'nk_color_d');
  nk_color_dv := GetProcAddress(LDllHandle, 'nk_color_dv');
  nk_color_f := GetProcAddress(LDllHandle, 'nk_color_f');
  nk_color_fv := GetProcAddress(LDllHandle, 'nk_color_fv');
  nk_color_hex_rgb := GetProcAddress(LDllHandle, 'nk_color_hex_rgb');
  nk_color_hex_rgba := GetProcAddress(LDllHandle, 'nk_color_hex_rgba');
  nk_color_hsv_b := GetProcAddress(LDllHandle, 'nk_color_hsv_b');
  nk_color_hsv_bv := GetProcAddress(LDllHandle, 'nk_color_hsv_bv');
  nk_color_hsv_f := GetProcAddress(LDllHandle, 'nk_color_hsv_f');
  nk_color_hsv_fv := GetProcAddress(LDllHandle, 'nk_color_hsv_fv');
  nk_color_hsv_i := GetProcAddress(LDllHandle, 'nk_color_hsv_i');
  nk_color_hsv_iv := GetProcAddress(LDllHandle, 'nk_color_hsv_iv');
  nk_color_hsva_b := GetProcAddress(LDllHandle, 'nk_color_hsva_b');
  nk_color_hsva_bv := GetProcAddress(LDllHandle, 'nk_color_hsva_bv');
  nk_color_hsva_f := GetProcAddress(LDllHandle, 'nk_color_hsva_f');
  nk_color_hsva_fv := GetProcAddress(LDllHandle, 'nk_color_hsva_fv');
  nk_color_hsva_i := GetProcAddress(LDllHandle, 'nk_color_hsva_i');
  nk_color_hsva_iv := GetProcAddress(LDllHandle, 'nk_color_hsva_iv');
  nk_color_pick := GetProcAddress(LDllHandle, 'nk_color_pick');
  nk_color_picker := GetProcAddress(LDllHandle, 'nk_color_picker');
  nk_color_u32 := GetProcAddress(LDllHandle, 'nk_color_u32');
  nk_colorf_hsva_f := GetProcAddress(LDllHandle, 'nk_colorf_hsva_f');
  nk_colorf_hsva_fv := GetProcAddress(LDllHandle, 'nk_colorf_hsva_fv');
  nk_combo := GetProcAddress(LDllHandle, 'nk_combo');
  nk_combo_begin_color := GetProcAddress(LDllHandle, 'nk_combo_begin_color');
  nk_combo_begin_image := GetProcAddress(LDllHandle, 'nk_combo_begin_image');
  nk_combo_begin_image_label := GetProcAddress(LDllHandle, 'nk_combo_begin_image_label');
  nk_combo_begin_image_text := GetProcAddress(LDllHandle, 'nk_combo_begin_image_text');
  nk_combo_begin_label := GetProcAddress(LDllHandle, 'nk_combo_begin_label');
  nk_combo_begin_symbol := GetProcAddress(LDllHandle, 'nk_combo_begin_symbol');
  nk_combo_begin_symbol_label := GetProcAddress(LDllHandle, 'nk_combo_begin_symbol_label');
  nk_combo_begin_symbol_text := GetProcAddress(LDllHandle, 'nk_combo_begin_symbol_text');
  nk_combo_begin_text := GetProcAddress(LDllHandle, 'nk_combo_begin_text');
  nk_combo_callback := GetProcAddress(LDllHandle, 'nk_combo_callback');
  nk_combo_close := GetProcAddress(LDllHandle, 'nk_combo_close');
  nk_combo_end := GetProcAddress(LDllHandle, 'nk_combo_end');
  nk_combo_item_image_label := GetProcAddress(LDllHandle, 'nk_combo_item_image_label');
  nk_combo_item_image_text := GetProcAddress(LDllHandle, 'nk_combo_item_image_text');
  nk_combo_item_label := GetProcAddress(LDllHandle, 'nk_combo_item_label');
  nk_combo_item_symbol_label := GetProcAddress(LDllHandle, 'nk_combo_item_symbol_label');
  nk_combo_item_symbol_text := GetProcAddress(LDllHandle, 'nk_combo_item_symbol_text');
  nk_combo_item_text := GetProcAddress(LDllHandle, 'nk_combo_item_text');
  nk_combo_separator := GetProcAddress(LDllHandle, 'nk_combo_separator');
  nk_combo_string := GetProcAddress(LDllHandle, 'nk_combo_string');
  nk_combobox := GetProcAddress(LDllHandle, 'nk_combobox');
  nk_combobox_callback := GetProcAddress(LDllHandle, 'nk_combobox_callback');
  nk_combobox_separator := GetProcAddress(LDllHandle, 'nk_combobox_separator');
  nk_combobox_string := GetProcAddress(LDllHandle, 'nk_combobox_string');
  nk_contextual_begin := GetProcAddress(LDllHandle, 'nk_contextual_begin');
  nk_contextual_close := GetProcAddress(LDllHandle, 'nk_contextual_close');
  nk_contextual_end := GetProcAddress(LDllHandle, 'nk_contextual_end');
  nk_contextual_item_image_label := GetProcAddress(LDllHandle, 'nk_contextual_item_image_label');
  nk_contextual_item_image_text := GetProcAddress(LDllHandle, 'nk_contextual_item_image_text');
  nk_contextual_item_label := GetProcAddress(LDllHandle, 'nk_contextual_item_label');
  nk_contextual_item_symbol_label := GetProcAddress(LDllHandle, 'nk_contextual_item_symbol_label');
  nk_contextual_item_symbol_text := GetProcAddress(LDllHandle, 'nk_contextual_item_symbol_text');
  nk_contextual_item_text := GetProcAddress(LDllHandle, 'nk_contextual_item_text');
  nk_draw_image := GetProcAddress(LDllHandle, 'nk_draw_image');
  nk_draw_nine_slice := GetProcAddress(LDllHandle, 'nk_draw_nine_slice');
  nk_draw_text := GetProcAddress(LDllHandle, 'nk_draw_text');
  nk_edit_buffer := GetProcAddress(LDllHandle, 'nk_edit_buffer');
  nk_edit_focus := GetProcAddress(LDllHandle, 'nk_edit_focus');
  nk_edit_string := GetProcAddress(LDllHandle, 'nk_edit_string');
  nk_edit_string_zero_terminated := GetProcAddress(LDllHandle, 'nk_edit_string_zero_terminated');
  nk_edit_unfocus := GetProcAddress(LDllHandle, 'nk_edit_unfocus');
  nk_end := GetProcAddress(LDllHandle, 'nk_end');
  nk_fill_arc := GetProcAddress(LDllHandle, 'nk_fill_arc');
  nk_fill_circle := GetProcAddress(LDllHandle, 'nk_fill_circle');
  nk_fill_polygon := GetProcAddress(LDllHandle, 'nk_fill_polygon');
  nk_fill_rect := GetProcAddress(LDllHandle, 'nk_fill_rect');
  nk_fill_rect_multi_color := GetProcAddress(LDllHandle, 'nk_fill_rect_multi_color');
  nk_fill_triangle := GetProcAddress(LDllHandle, 'nk_fill_triangle');
  nk_filter_ascii := GetProcAddress(LDllHandle, 'nk_filter_ascii');
  nk_filter_binary := GetProcAddress(LDllHandle, 'nk_filter_binary');
  nk_filter_decimal := GetProcAddress(LDllHandle, 'nk_filter_decimal');
  nk_filter_default := GetProcAddress(LDllHandle, 'nk_filter_default');
  nk_filter_float := GetProcAddress(LDllHandle, 'nk_filter_float');
  nk_filter_hex := GetProcAddress(LDllHandle, 'nk_filter_hex');
  nk_filter_oct := GetProcAddress(LDllHandle, 'nk_filter_oct');
  nk_font_atlas_add := GetProcAddress(LDllHandle, 'nk_font_atlas_add');
  nk_font_atlas_add_compressed := GetProcAddress(LDllHandle, 'nk_font_atlas_add_compressed');
  nk_font_atlas_add_compressed_base85 := GetProcAddress(LDllHandle, 'nk_font_atlas_add_compressed_base85');
  nk_font_atlas_add_default := GetProcAddress(LDllHandle, 'nk_font_atlas_add_default');
  nk_font_atlas_add_from_file := GetProcAddress(LDllHandle, 'nk_font_atlas_add_from_file');
  nk_font_atlas_add_from_memory := GetProcAddress(LDllHandle, 'nk_font_atlas_add_from_memory');
  nk_font_atlas_bake := GetProcAddress(LDllHandle, 'nk_font_atlas_bake');
  nk_font_atlas_begin := GetProcAddress(LDllHandle, 'nk_font_atlas_begin');
  nk_font_atlas_cleanup := GetProcAddress(LDllHandle, 'nk_font_atlas_cleanup');
  nk_font_atlas_clear := GetProcAddress(LDllHandle, 'nk_font_atlas_clear');
  nk_font_atlas_end := GetProcAddress(LDllHandle, 'nk_font_atlas_end');
  nk_font_atlas_init := GetProcAddress(LDllHandle, 'nk_font_atlas_init');
  nk_font_atlas_init_custom := GetProcAddress(LDllHandle, 'nk_font_atlas_init_custom');
  nk_font_atlas_init_default := GetProcAddress(LDllHandle, 'nk_font_atlas_init_default');
  nk_font_chinese_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_chinese_glyph_ranges');
  nk_font_config_ := GetProcAddress(LDllHandle, 'nk_font_config');
  nk_font_cyrillic_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_cyrillic_glyph_ranges');
  nk_font_default_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_default_glyph_ranges');
  nk_font_find_glyph := GetProcAddress(LDllHandle, 'nk_font_find_glyph');
  nk_font_korean_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_korean_glyph_ranges');
  nk_free := GetProcAddress(LDllHandle, 'nk_free');
  nk_get_null_rect := GetProcAddress(LDllHandle, 'nk_get_null_rect');
  nk_group_begin := GetProcAddress(LDllHandle, 'nk_group_begin');
  nk_group_begin_titled := GetProcAddress(LDllHandle, 'nk_group_begin_titled');
  nk_group_end := GetProcAddress(LDllHandle, 'nk_group_end');
  nk_group_get_scroll := GetProcAddress(LDllHandle, 'nk_group_get_scroll');
  nk_group_scrolled_begin := GetProcAddress(LDllHandle, 'nk_group_scrolled_begin');
  nk_group_scrolled_end := GetProcAddress(LDllHandle, 'nk_group_scrolled_end');
  nk_group_scrolled_offset_begin := GetProcAddress(LDllHandle, 'nk_group_scrolled_offset_begin');
  nk_group_set_scroll := GetProcAddress(LDllHandle, 'nk_group_set_scroll');
  nk_handle_id := GetProcAddress(LDllHandle, 'nk_handle_id');
  nk_handle_ptr := GetProcAddress(LDllHandle, 'nk_handle_ptr');
  nk_hsv := GetProcAddress(LDllHandle, 'nk_hsv');
  nk_hsv_bv := GetProcAddress(LDllHandle, 'nk_hsv_bv');
  nk_hsv_f := GetProcAddress(LDllHandle, 'nk_hsv_f');
  nk_hsv_fv := GetProcAddress(LDllHandle, 'nk_hsv_fv');
  nk_hsv_iv := GetProcAddress(LDllHandle, 'nk_hsv_iv');
  nk_hsva := GetProcAddress(LDllHandle, 'nk_hsva');
  nk_hsva_bv := GetProcAddress(LDllHandle, 'nk_hsva_bv');
  nk_hsva_colorf := GetProcAddress(LDllHandle, 'nk_hsva_colorf');
  nk_hsva_colorfv := GetProcAddress(LDllHandle, 'nk_hsva_colorfv');
  nk_hsva_f := GetProcAddress(LDllHandle, 'nk_hsva_f');
  nk_hsva_fv := GetProcAddress(LDllHandle, 'nk_hsva_fv');
  nk_hsva_iv := GetProcAddress(LDllHandle, 'nk_hsva_iv');
  nk_image_ := GetProcAddress(LDllHandle, 'nk_image');
  nk_image_color := GetProcAddress(LDllHandle, 'nk_image_color');
  nk_image_handle := GetProcAddress(LDllHandle, 'nk_image_handle');
  nk_image_id := GetProcAddress(LDllHandle, 'nk_image_id');
  nk_image_is_subimage := GetProcAddress(LDllHandle, 'nk_image_is_subimage');
  nk_image_ptr := GetProcAddress(LDllHandle, 'nk_image_ptr');
  nk_init := GetProcAddress(LDllHandle, 'nk_init');
  nk_init_custom := GetProcAddress(LDllHandle, 'nk_init_custom');
  nk_init_default := GetProcAddress(LDllHandle, 'nk_init_default');
  nk_init_fixed := GetProcAddress(LDllHandle, 'nk_init_fixed');
  nk_input_any_mouse_click_in_rect := GetProcAddress(LDllHandle, 'nk_input_any_mouse_click_in_rect');
  nk_input_begin := GetProcAddress(LDllHandle, 'nk_input_begin');
  nk_input_button := GetProcAddress(LDllHandle, 'nk_input_button');
  nk_input_char := GetProcAddress(LDllHandle, 'nk_input_char');
  nk_input_end := GetProcAddress(LDllHandle, 'nk_input_end');
  nk_input_glyph := GetProcAddress(LDllHandle, 'nk_input_glyph');
  nk_input_has_mouse_click := GetProcAddress(LDllHandle, 'nk_input_has_mouse_click');
  nk_input_has_mouse_click_down_in_rect := GetProcAddress(LDllHandle, 'nk_input_has_mouse_click_down_in_rect');
  nk_input_has_mouse_click_in_rect := GetProcAddress(LDllHandle, 'nk_input_has_mouse_click_in_rect');
  nk_input_is_key_down := GetProcAddress(LDllHandle, 'nk_input_is_key_down');
  nk_input_is_key_pressed := GetProcAddress(LDllHandle, 'nk_input_is_key_pressed');
  nk_input_is_key_released := GetProcAddress(LDllHandle, 'nk_input_is_key_released');
  nk_input_is_mouse_click_down_in_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_click_down_in_rect');
  nk_input_is_mouse_click_in_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_click_in_rect');
  nk_input_is_mouse_down := GetProcAddress(LDllHandle, 'nk_input_is_mouse_down');
  nk_input_is_mouse_hovering_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_hovering_rect');
  nk_input_is_mouse_pressed := GetProcAddress(LDllHandle, 'nk_input_is_mouse_pressed');
  nk_input_is_mouse_prev_hovering_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_prev_hovering_rect');
  nk_input_is_mouse_released := GetProcAddress(LDllHandle, 'nk_input_is_mouse_released');
  nk_input_key := GetProcAddress(LDllHandle, 'nk_input_key');
  nk_input_motion := GetProcAddress(LDllHandle, 'nk_input_motion');
  nk_input_mouse_clicked := GetProcAddress(LDllHandle, 'nk_input_mouse_clicked');
  nk_input_scroll := GetProcAddress(LDllHandle, 'nk_input_scroll');
  nk_input_unicode := GetProcAddress(LDllHandle, 'nk_input_unicode');
  nk_item_is_any_active := GetProcAddress(LDllHandle, 'nk_item_is_any_active');
  nk_label := GetProcAddress(LDllHandle, 'nk_label');
  nk_label_colored := GetProcAddress(LDllHandle, 'nk_label_colored');
  nk_label_colored_wrap := GetProcAddress(LDllHandle, 'nk_label_colored_wrap');
  nk_label_wrap := GetProcAddress(LDllHandle, 'nk_label_wrap');
  nk_labelf := GetProcAddress(LDllHandle, 'nk_labelf');
  nk_labelf_colored := GetProcAddress(LDllHandle, 'nk_labelf_colored');
  nk_labelf_colored_wrap := GetProcAddress(LDllHandle, 'nk_labelf_colored_wrap');
  nk_labelf_wrap := GetProcAddress(LDllHandle, 'nk_labelf_wrap');
  nk_labelfv := GetProcAddress(LDllHandle, 'nk_labelfv');
  nk_labelfv_colored := GetProcAddress(LDllHandle, 'nk_labelfv_colored');
  nk_labelfv_colored_wrap := GetProcAddress(LDllHandle, 'nk_labelfv_colored_wrap');
  nk_labelfv_wrap := GetProcAddress(LDllHandle, 'nk_labelfv_wrap');
  nk_layout_ratio_from_pixel := GetProcAddress(LDllHandle, 'nk_layout_ratio_from_pixel');
  nk_layout_reset_min_row_height := GetProcAddress(LDllHandle, 'nk_layout_reset_min_row_height');
  nk_layout_row := GetProcAddress(LDllHandle, 'nk_layout_row');
  nk_layout_row_begin := GetProcAddress(LDllHandle, 'nk_layout_row_begin');
  nk_layout_row_dynamic := GetProcAddress(LDllHandle, 'nk_layout_row_dynamic');
  nk_layout_row_end := GetProcAddress(LDllHandle, 'nk_layout_row_end');
  nk_layout_row_push := GetProcAddress(LDllHandle, 'nk_layout_row_push');
  nk_layout_row_static := GetProcAddress(LDllHandle, 'nk_layout_row_static');
  nk_layout_row_template_begin := GetProcAddress(LDllHandle, 'nk_layout_row_template_begin');
  nk_layout_row_template_end := GetProcAddress(LDllHandle, 'nk_layout_row_template_end');
  nk_layout_row_template_push_dynamic := GetProcAddress(LDllHandle, 'nk_layout_row_template_push_dynamic');
  nk_layout_row_template_push_static := GetProcAddress(LDllHandle, 'nk_layout_row_template_push_static');
  nk_layout_row_template_push_variable := GetProcAddress(LDllHandle, 'nk_layout_row_template_push_variable');
  nk_layout_set_min_row_height := GetProcAddress(LDllHandle, 'nk_layout_set_min_row_height');
  nk_layout_space_begin := GetProcAddress(LDllHandle, 'nk_layout_space_begin');
  nk_layout_space_bounds := GetProcAddress(LDllHandle, 'nk_layout_space_bounds');
  nk_layout_space_end := GetProcAddress(LDllHandle, 'nk_layout_space_end');
  nk_layout_space_push := GetProcAddress(LDllHandle, 'nk_layout_space_push');
  nk_layout_space_rect_to_local := GetProcAddress(LDllHandle, 'nk_layout_space_rect_to_local');
  nk_layout_space_rect_to_screen := GetProcAddress(LDllHandle, 'nk_layout_space_rect_to_screen');
  nk_layout_space_to_local := GetProcAddress(LDllHandle, 'nk_layout_space_to_local');
  nk_layout_space_to_screen := GetProcAddress(LDllHandle, 'nk_layout_space_to_screen');
  nk_layout_widget_bounds := GetProcAddress(LDllHandle, 'nk_layout_widget_bounds');
  nk_list_view_begin := GetProcAddress(LDllHandle, 'nk_list_view_begin');
  nk_list_view_end := GetProcAddress(LDllHandle, 'nk_list_view_end');
  nk_menu_begin_image := GetProcAddress(LDllHandle, 'nk_menu_begin_image');
  nk_menu_begin_image_label := GetProcAddress(LDllHandle, 'nk_menu_begin_image_label');
  nk_menu_begin_image_text := GetProcAddress(LDllHandle, 'nk_menu_begin_image_text');
  nk_menu_begin_label := GetProcAddress(LDllHandle, 'nk_menu_begin_label');
  nk_menu_begin_symbol := GetProcAddress(LDllHandle, 'nk_menu_begin_symbol');
  nk_menu_begin_symbol_label := GetProcAddress(LDllHandle, 'nk_menu_begin_symbol_label');
  nk_menu_begin_symbol_text := GetProcAddress(LDllHandle, 'nk_menu_begin_symbol_text');
  nk_menu_begin_text := GetProcAddress(LDllHandle, 'nk_menu_begin_text');
  nk_menu_close := GetProcAddress(LDllHandle, 'nk_menu_close');
  nk_menu_end := GetProcAddress(LDllHandle, 'nk_menu_end');
  nk_menu_item_image_label := GetProcAddress(LDllHandle, 'nk_menu_item_image_label');
  nk_menu_item_image_text := GetProcAddress(LDllHandle, 'nk_menu_item_image_text');
  nk_menu_item_label := GetProcAddress(LDllHandle, 'nk_menu_item_label');
  nk_menu_item_symbol_label := GetProcAddress(LDllHandle, 'nk_menu_item_symbol_label');
  nk_menu_item_symbol_text := GetProcAddress(LDllHandle, 'nk_menu_item_symbol_text');
  nk_menu_item_text := GetProcAddress(LDllHandle, 'nk_menu_item_text');
  nk_menubar_begin := GetProcAddress(LDllHandle, 'nk_menubar_begin');
  nk_menubar_end := GetProcAddress(LDllHandle, 'nk_menubar_end');
  nk_murmur_hash := GetProcAddress(LDllHandle, 'nk_murmur_hash');
  nk_nine_slice_handle := GetProcAddress(LDllHandle, 'nk_nine_slice_handle');
  nk_nine_slice_id := GetProcAddress(LDllHandle, 'nk_nine_slice_id');
  nk_nine_slice_is_sub9slice := GetProcAddress(LDllHandle, 'nk_nine_slice_is_sub9slice');
  nk_nine_slice_ptr := GetProcAddress(LDllHandle, 'nk_nine_slice_ptr');
  nk_option_label := GetProcAddress(LDllHandle, 'nk_option_label');
  nk_option_text := GetProcAddress(LDllHandle, 'nk_option_text');
  nk_plot := GetProcAddress(LDllHandle, 'nk_plot');
  nk_plot_function := GetProcAddress(LDllHandle, 'nk_plot_function');
  nk_popup_begin := GetProcAddress(LDllHandle, 'nk_popup_begin');
  nk_popup_close := GetProcAddress(LDllHandle, 'nk_popup_close');
  nk_popup_end := GetProcAddress(LDllHandle, 'nk_popup_end');
  nk_popup_get_scroll := GetProcAddress(LDllHandle, 'nk_popup_get_scroll');
  nk_popup_set_scroll := GetProcAddress(LDllHandle, 'nk_popup_set_scroll');
  nk_prog := GetProcAddress(LDllHandle, 'nk_prog');
  nk_progress := GetProcAddress(LDllHandle, 'nk_progress');
  nk_property_double := GetProcAddress(LDllHandle, 'nk_property_double');
  nk_property_float := GetProcAddress(LDllHandle, 'nk_property_float');
  nk_property_int := GetProcAddress(LDllHandle, 'nk_property_int');
  nk_propertyd := GetProcAddress(LDllHandle, 'nk_propertyd');
  nk_propertyf := GetProcAddress(LDllHandle, 'nk_propertyf');
  nk_propertyi := GetProcAddress(LDllHandle, 'nk_propertyi');
  nk_push_custom := GetProcAddress(LDllHandle, 'nk_push_custom');
  nk_push_scissor := GetProcAddress(LDllHandle, 'nk_push_scissor');
  nk_radio_label := GetProcAddress(LDllHandle, 'nk_radio_label');
  nk_radio_text := GetProcAddress(LDllHandle, 'nk_radio_text');
  nk_rect_ := GetProcAddress(LDllHandle, 'nk_rect');
  nk_rect_pos := GetProcAddress(LDllHandle, 'nk_rect_pos');
  nk_rect_size := GetProcAddress(LDllHandle, 'nk_rect_size');
  nk_recta := GetProcAddress(LDllHandle, 'nk_recta');
  nk_recti_ := GetProcAddress(LDllHandle, 'nk_recti');
  nk_rectiv := GetProcAddress(LDllHandle, 'nk_rectiv');
  nk_rectv := GetProcAddress(LDllHandle, 'nk_rectv');
  nk_rgb_ := GetProcAddress(LDllHandle, 'nk_rgb');
  nk_rgb_bv := GetProcAddress(LDllHandle, 'nk_rgb_bv');
  nk_rgb_cf := GetProcAddress(LDllHandle, 'nk_rgb_cf');
  nk_rgb_f := GetProcAddress(LDllHandle, 'nk_rgb_f');
  nk_rgb_fv := GetProcAddress(LDllHandle, 'nk_rgb_fv');
  nk_rgb_hex := GetProcAddress(LDllHandle, 'nk_rgb_hex');
  nk_rgb_iv := GetProcAddress(LDllHandle, 'nk_rgb_iv');
  nk_rgba_ := GetProcAddress(LDllHandle, 'nk_rgba');
  nk_rgba_bv := GetProcAddress(LDllHandle, 'nk_rgba_bv');
  nk_rgba_cf := GetProcAddress(LDllHandle, 'nk_rgba_cf');
  nk_rgba_f := GetProcAddress(LDllHandle, 'nk_rgba_f');
  nk_rgba_fv := GetProcAddress(LDllHandle, 'nk_rgba_fv');
  nk_rgba_hex := GetProcAddress(LDllHandle, 'nk_rgba_hex');
  nk_rgba_iv := GetProcAddress(LDllHandle, 'nk_rgba_iv');
  nk_rgba_u32 := GetProcAddress(LDllHandle, 'nk_rgba_u32');
  nk_select_image_label := GetProcAddress(LDllHandle, 'nk_select_image_label');
  nk_select_image_text := GetProcAddress(LDllHandle, 'nk_select_image_text');
  nk_select_label := GetProcAddress(LDllHandle, 'nk_select_label');
  nk_select_symbol_label := GetProcAddress(LDllHandle, 'nk_select_symbol_label');
  nk_select_symbol_text := GetProcAddress(LDllHandle, 'nk_select_symbol_text');
  nk_select_text := GetProcAddress(LDllHandle, 'nk_select_text');
  nk_selectable_image_label := GetProcAddress(LDllHandle, 'nk_selectable_image_label');
  nk_selectable_image_text := GetProcAddress(LDllHandle, 'nk_selectable_image_text');
  nk_selectable_label := GetProcAddress(LDllHandle, 'nk_selectable_label');
  nk_selectable_symbol_label := GetProcAddress(LDllHandle, 'nk_selectable_symbol_label');
  nk_selectable_symbol_text := GetProcAddress(LDllHandle, 'nk_selectable_symbol_text');
  nk_selectable_text := GetProcAddress(LDllHandle, 'nk_selectable_text');
  nk_slide_float := GetProcAddress(LDllHandle, 'nk_slide_float');
  nk_slide_int := GetProcAddress(LDllHandle, 'nk_slide_int');
  nk_slider_float := GetProcAddress(LDllHandle, 'nk_slider_float');
  nk_slider_int := GetProcAddress(LDllHandle, 'nk_slider_int');
  nk_spacer := GetProcAddress(LDllHandle, 'nk_spacer');
  nk_spacing := GetProcAddress(LDllHandle, 'nk_spacing');
  nk_str_append_str_char := GetProcAddress(LDllHandle, 'nk_str_append_str_char');
  nk_str_append_str_runes := GetProcAddress(LDllHandle, 'nk_str_append_str_runes');
  nk_str_append_str_utf8 := GetProcAddress(LDllHandle, 'nk_str_append_str_utf8');
  nk_str_append_text_char := GetProcAddress(LDllHandle, 'nk_str_append_text_char');
  nk_str_append_text_runes := GetProcAddress(LDllHandle, 'nk_str_append_text_runes');
  nk_str_append_text_utf8 := GetProcAddress(LDllHandle, 'nk_str_append_text_utf8');
  nk_str_at_char := GetProcAddress(LDllHandle, 'nk_str_at_char');
  nk_str_at_char_const := GetProcAddress(LDllHandle, 'nk_str_at_char_const');
  nk_str_at_const := GetProcAddress(LDllHandle, 'nk_str_at_const');
  nk_str_at_rune := GetProcAddress(LDllHandle, 'nk_str_at_rune');
  nk_str_clear := GetProcAddress(LDllHandle, 'nk_str_clear');
  nk_str_delete_chars := GetProcAddress(LDllHandle, 'nk_str_delete_chars');
  nk_str_delete_runes := GetProcAddress(LDllHandle, 'nk_str_delete_runes');
  nk_str_free := GetProcAddress(LDllHandle, 'nk_str_free');
  nk_str_get := GetProcAddress(LDllHandle, 'nk_str_get');
  nk_str_get_const := GetProcAddress(LDllHandle, 'nk_str_get_const');
  nk_str_init := GetProcAddress(LDllHandle, 'nk_str_init');
  nk_str_init_default := GetProcAddress(LDllHandle, 'nk_str_init_default');
  nk_str_init_fixed := GetProcAddress(LDllHandle, 'nk_str_init_fixed');
  nk_str_insert_at_char := GetProcAddress(LDllHandle, 'nk_str_insert_at_char');
  nk_str_insert_at_rune := GetProcAddress(LDllHandle, 'nk_str_insert_at_rune');
  nk_str_insert_str_char := GetProcAddress(LDllHandle, 'nk_str_insert_str_char');
  nk_str_insert_str_runes := GetProcAddress(LDllHandle, 'nk_str_insert_str_runes');
  nk_str_insert_str_utf8 := GetProcAddress(LDllHandle, 'nk_str_insert_str_utf8');
  nk_str_insert_text_char := GetProcAddress(LDllHandle, 'nk_str_insert_text_char');
  nk_str_insert_text_runes := GetProcAddress(LDllHandle, 'nk_str_insert_text_runes');
  nk_str_insert_text_utf8 := GetProcAddress(LDllHandle, 'nk_str_insert_text_utf8');
  nk_str_len := GetProcAddress(LDllHandle, 'nk_str_len');
  nk_str_len_char := GetProcAddress(LDllHandle, 'nk_str_len_char');
  nk_str_remove_chars := GetProcAddress(LDllHandle, 'nk_str_remove_chars');
  nk_str_remove_runes := GetProcAddress(LDllHandle, 'nk_str_remove_runes');
  nk_str_rune_at := GetProcAddress(LDllHandle, 'nk_str_rune_at');
  nk_strfilter := GetProcAddress(LDllHandle, 'nk_strfilter');
  nk_stricmp := GetProcAddress(LDllHandle, 'nk_stricmp');
  nk_stricmpn := GetProcAddress(LDllHandle, 'nk_stricmpn');
  nk_strlen := GetProcAddress(LDllHandle, 'nk_strlen');
  nk_strmatch_fuzzy_string := GetProcAddress(LDllHandle, 'nk_strmatch_fuzzy_string');
  nk_strmatch_fuzzy_text := GetProcAddress(LDllHandle, 'nk_strmatch_fuzzy_text');
  nk_stroke_arc := GetProcAddress(LDllHandle, 'nk_stroke_arc');
  nk_stroke_circle := GetProcAddress(LDllHandle, 'nk_stroke_circle');
  nk_stroke_curve := GetProcAddress(LDllHandle, 'nk_stroke_curve');
  nk_stroke_line := GetProcAddress(LDllHandle, 'nk_stroke_line');
  nk_stroke_polygon := GetProcAddress(LDllHandle, 'nk_stroke_polygon');
  nk_stroke_polyline := GetProcAddress(LDllHandle, 'nk_stroke_polyline');
  nk_stroke_rect := GetProcAddress(LDllHandle, 'nk_stroke_rect');
  nk_stroke_triangle := GetProcAddress(LDllHandle, 'nk_stroke_triangle');
  nk_strtod := GetProcAddress(LDllHandle, 'nk_strtod');
  nk_strtof := GetProcAddress(LDllHandle, 'nk_strtof');
  nk_strtoi := GetProcAddress(LDllHandle, 'nk_strtoi');
  nk_style_default := GetProcAddress(LDllHandle, 'nk_style_default');
  nk_style_from_table := GetProcAddress(LDllHandle, 'nk_style_from_table');
  nk_style_get_color_by_name := GetProcAddress(LDllHandle, 'nk_style_get_color_by_name');
  nk_style_hide_cursor := GetProcAddress(LDllHandle, 'nk_style_hide_cursor');
  nk_style_item_color_ := GetProcAddress(LDllHandle, 'nk_style_item_color');
  nk_style_item_hide := GetProcAddress(LDllHandle, 'nk_style_item_hide');
  nk_style_item_image_ := GetProcAddress(LDllHandle, 'nk_style_item_image');
  nk_style_item_nine_slice_ := GetProcAddress(LDllHandle, 'nk_style_item_nine_slice');
  nk_style_load_all_cursors := GetProcAddress(LDllHandle, 'nk_style_load_all_cursors');
  nk_style_load_cursor := GetProcAddress(LDllHandle, 'nk_style_load_cursor');
  nk_style_pop_color := GetProcAddress(LDllHandle, 'nk_style_pop_color');
  nk_style_pop_flags := GetProcAddress(LDllHandle, 'nk_style_pop_flags');
  nk_style_pop_float := GetProcAddress(LDllHandle, 'nk_style_pop_float');
  nk_style_pop_font := GetProcAddress(LDllHandle, 'nk_style_pop_font');
  nk_style_pop_style_item := GetProcAddress(LDllHandle, 'nk_style_pop_style_item');
  nk_style_pop_vec2 := GetProcAddress(LDllHandle, 'nk_style_pop_vec2');
  nk_style_push_color := GetProcAddress(LDllHandle, 'nk_style_push_color');
  nk_style_push_flags := GetProcAddress(LDllHandle, 'nk_style_push_flags');
  nk_style_push_float := GetProcAddress(LDllHandle, 'nk_style_push_float');
  nk_style_push_font := GetProcAddress(LDllHandle, 'nk_style_push_font');
  nk_style_push_style_item := GetProcAddress(LDllHandle, 'nk_style_push_style_item');
  nk_style_push_vec2 := GetProcAddress(LDllHandle, 'nk_style_push_vec2');
  nk_style_set_cursor := GetProcAddress(LDllHandle, 'nk_style_set_cursor');
  nk_style_set_font := GetProcAddress(LDllHandle, 'nk_style_set_font');
  nk_style_show_cursor := GetProcAddress(LDllHandle, 'nk_style_show_cursor');
  nk_sub9slice_handle := GetProcAddress(LDllHandle, 'nk_sub9slice_handle');
  nk_sub9slice_id := GetProcAddress(LDllHandle, 'nk_sub9slice_id');
  nk_sub9slice_ptr := GetProcAddress(LDllHandle, 'nk_sub9slice_ptr');
  nk_subimage_handle := GetProcAddress(LDllHandle, 'nk_subimage_handle');
  nk_subimage_id := GetProcAddress(LDllHandle, 'nk_subimage_id');
  nk_subimage_ptr := GetProcAddress(LDllHandle, 'nk_subimage_ptr');
  nk_text := GetProcAddress(LDllHandle, 'nk_text');
  nk_text_colored := GetProcAddress(LDllHandle, 'nk_text_colored');
  nk_text_wrap := GetProcAddress(LDllHandle, 'nk_text_wrap');
  nk_text_wrap_colored := GetProcAddress(LDllHandle, 'nk_text_wrap_colored');
  nk_textedit_cut := GetProcAddress(LDllHandle, 'nk_textedit_cut');
  nk_textedit_delete := GetProcAddress(LDllHandle, 'nk_textedit_delete');
  nk_textedit_delete_selection := GetProcAddress(LDllHandle, 'nk_textedit_delete_selection');
  nk_textedit_free := GetProcAddress(LDllHandle, 'nk_textedit_free');
  nk_textedit_init := GetProcAddress(LDllHandle, 'nk_textedit_init');
  nk_textedit_init_default := GetProcAddress(LDllHandle, 'nk_textedit_init_default');
  nk_textedit_init_fixed := GetProcAddress(LDllHandle, 'nk_textedit_init_fixed');
  nk_textedit_paste := GetProcAddress(LDllHandle, 'nk_textedit_paste');
  nk_textedit_redo := GetProcAddress(LDllHandle, 'nk_textedit_redo');
  nk_textedit_select_all := GetProcAddress(LDllHandle, 'nk_textedit_select_all');
  nk_textedit_text := GetProcAddress(LDllHandle, 'nk_textedit_text');
  nk_textedit_undo := GetProcAddress(LDllHandle, 'nk_textedit_undo');
  nk_tooltip := GetProcAddress(LDllHandle, 'nk_tooltip');
  nk_tooltip_begin := GetProcAddress(LDllHandle, 'nk_tooltip_begin');
  nk_tooltip_end := GetProcAddress(LDllHandle, 'nk_tooltip_end');
  nk_tooltipf := GetProcAddress(LDllHandle, 'nk_tooltipf');
  nk_tooltipfv := GetProcAddress(LDllHandle, 'nk_tooltipfv');
  nk_tree_element_image_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_element_image_push_hashed');
  nk_tree_element_pop := GetProcAddress(LDllHandle, 'nk_tree_element_pop');
  nk_tree_element_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_element_push_hashed');
  nk_tree_image_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_image_push_hashed');
  nk_tree_pop := GetProcAddress(LDllHandle, 'nk_tree_pop');
  nk_tree_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_push_hashed');
  nk_tree_state_image_push := GetProcAddress(LDllHandle, 'nk_tree_state_image_push');
  nk_tree_state_pop := GetProcAddress(LDllHandle, 'nk_tree_state_pop');
  nk_tree_state_push := GetProcAddress(LDllHandle, 'nk_tree_state_push');
  nk_triangle_from_direction := GetProcAddress(LDllHandle, 'nk_triangle_from_direction');
  nk_utf_at := GetProcAddress(LDllHandle, 'nk_utf_at');
  nk_utf_decode := GetProcAddress(LDllHandle, 'nk_utf_decode');
  nk_utf_encode := GetProcAddress(LDllHandle, 'nk_utf_encode');
  nk_utf_len := GetProcAddress(LDllHandle, 'nk_utf_len');
  nk_value_bool := GetProcAddress(LDllHandle, 'nk_value_bool');
  nk_value_color_byte := GetProcAddress(LDllHandle, 'nk_value_color_byte');
  nk_value_color_float := GetProcAddress(LDllHandle, 'nk_value_color_float');
  nk_value_color_hex := GetProcAddress(LDllHandle, 'nk_value_color_hex');
  nk_value_float := GetProcAddress(LDllHandle, 'nk_value_float');
  nk_value_int := GetProcAddress(LDllHandle, 'nk_value_int');
  nk_value_uint := GetProcAddress(LDllHandle, 'nk_value_uint');
  nk_vec2_ := GetProcAddress(LDllHandle, 'nk_vec2');
  nk_vec2i_ := GetProcAddress(LDllHandle, 'nk_vec2i');
  nk_vec2iv := GetProcAddress(LDllHandle, 'nk_vec2iv');
  nk_vec2v := GetProcAddress(LDllHandle, 'nk_vec2v');
  nk_widget := GetProcAddress(LDllHandle, 'nk_widget');
  nk_widget_bounds := GetProcAddress(LDllHandle, 'nk_widget_bounds');
  nk_widget_fitting := GetProcAddress(LDllHandle, 'nk_widget_fitting');
  nk_widget_has_mouse_click_down := GetProcAddress(LDllHandle, 'nk_widget_has_mouse_click_down');
  nk_widget_height := GetProcAddress(LDllHandle, 'nk_widget_height');
  nk_widget_is_hovered := GetProcAddress(LDllHandle, 'nk_widget_is_hovered');
  nk_widget_is_mouse_clicked := GetProcAddress(LDllHandle, 'nk_widget_is_mouse_clicked');
  nk_widget_position := GetProcAddress(LDllHandle, 'nk_widget_position');
  nk_widget_size := GetProcAddress(LDllHandle, 'nk_widget_size');
  nk_widget_width := GetProcAddress(LDllHandle, 'nk_widget_width');
  nk_window_close := GetProcAddress(LDllHandle, 'nk_window_close');
  nk_window_collapse := GetProcAddress(LDllHandle, 'nk_window_collapse');
  nk_window_collapse_if := GetProcAddress(LDllHandle, 'nk_window_collapse_if');
  nk_window_find := GetProcAddress(LDllHandle, 'nk_window_find');
  nk_window_get_bounds := GetProcAddress(LDllHandle, 'nk_window_get_bounds');
  nk_window_get_canvas := GetProcAddress(LDllHandle, 'nk_window_get_canvas');
  nk_window_get_content_region := GetProcAddress(LDllHandle, 'nk_window_get_content_region');
  nk_window_get_content_region_max := GetProcAddress(LDllHandle, 'nk_window_get_content_region_max');
  nk_window_get_content_region_min := GetProcAddress(LDllHandle, 'nk_window_get_content_region_min');
  nk_window_get_content_region_size := GetProcAddress(LDllHandle, 'nk_window_get_content_region_size');
  nk_window_get_height := GetProcAddress(LDllHandle, 'nk_window_get_height');
  nk_window_get_panel := GetProcAddress(LDllHandle, 'nk_window_get_panel');
  nk_window_get_position := GetProcAddress(LDllHandle, 'nk_window_get_position');
  nk_window_get_scroll := GetProcAddress(LDllHandle, 'nk_window_get_scroll');
  nk_window_get_size := GetProcAddress(LDllHandle, 'nk_window_get_size');
  nk_window_get_width := GetProcAddress(LDllHandle, 'nk_window_get_width');
  nk_window_has_focus := GetProcAddress(LDllHandle, 'nk_window_has_focus');
  nk_window_is_active := GetProcAddress(LDllHandle, 'nk_window_is_active');
  nk_window_is_any_hovered := GetProcAddress(LDllHandle, 'nk_window_is_any_hovered');
  nk_window_is_closed := GetProcAddress(LDllHandle, 'nk_window_is_closed');
  nk_window_is_collapsed := GetProcAddress(LDllHandle, 'nk_window_is_collapsed');
  nk_window_is_hidden := GetProcAddress(LDllHandle, 'nk_window_is_hidden');
  nk_window_is_hovered := GetProcAddress(LDllHandle, 'nk_window_is_hovered');
  nk_window_set_bounds := GetProcAddress(LDllHandle, 'nk_window_set_bounds');
  nk_window_set_focus := GetProcAddress(LDllHandle, 'nk_window_set_focus');
  nk_window_set_position := GetProcAddress(LDllHandle, 'nk_window_set_position');
  nk_window_set_scroll := GetProcAddress(LDllHandle, 'nk_window_set_scroll');
  nk_window_set_size := GetProcAddress(LDllHandle, 'nk_window_set_size');
  nk_window_show := GetProcAddress(LDllHandle, 'nk_window_show');
  nk_window_show_if := GetProcAddress(LDllHandle, 'nk_window_show_if');
  PHYSFS_addToSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_addToSearchPath');
  PHYSFS_caseFold := GetProcAddress(LDllHandle, 'PHYSFS_caseFold');
  PHYSFS_close := GetProcAddress(LDllHandle, 'PHYSFS_close');
  PHYSFS_deinit := GetProcAddress(LDllHandle, 'PHYSFS_deinit');
  PHYSFS_delete := GetProcAddress(LDllHandle, 'PHYSFS_delete');
  PHYSFS_deregisterArchiver := GetProcAddress(LDllHandle, 'PHYSFS_deregisterArchiver');
  PHYSFS_enumerate := GetProcAddress(LDllHandle, 'PHYSFS_enumerate');
  PHYSFS_enumerateFiles := GetProcAddress(LDllHandle, 'PHYSFS_enumerateFiles');
  PHYSFS_enumerateFilesCallback := GetProcAddress(LDllHandle, 'PHYSFS_enumerateFilesCallback');
  PHYSFS_eof := GetProcAddress(LDllHandle, 'PHYSFS_eof');
  PHYSFS_exists := GetProcAddress(LDllHandle, 'PHYSFS_exists');
  PHYSFS_fileLength := GetProcAddress(LDllHandle, 'PHYSFS_fileLength');
  PHYSFS_flush := GetProcAddress(LDllHandle, 'PHYSFS_flush');
  PHYSFS_freeList := GetProcAddress(LDllHandle, 'PHYSFS_freeList');
  PHYSFS_getAllocator := GetProcAddress(LDllHandle, 'PHYSFS_getAllocator');
  PHYSFS_getBaseDir := GetProcAddress(LDllHandle, 'PHYSFS_getBaseDir');
  PHYSFS_getCdRomDirs := GetProcAddress(LDllHandle, 'PHYSFS_getCdRomDirs');
  PHYSFS_getCdRomDirsCallback := GetProcAddress(LDllHandle, 'PHYSFS_getCdRomDirsCallback');
  PHYSFS_getDirSeparator := GetProcAddress(LDllHandle, 'PHYSFS_getDirSeparator');
  PHYSFS_getErrorByCode := GetProcAddress(LDllHandle, 'PHYSFS_getErrorByCode');
  PHYSFS_getLastError := GetProcAddress(LDllHandle, 'PHYSFS_getLastError');
  PHYSFS_getLastErrorCode := GetProcAddress(LDllHandle, 'PHYSFS_getLastErrorCode');
  PHYSFS_getLastModTime := GetProcAddress(LDllHandle, 'PHYSFS_getLastModTime');
  PHYSFS_getLinkedVersion := GetProcAddress(LDllHandle, 'PHYSFS_getLinkedVersion');
  PHYSFS_getMountPoint := GetProcAddress(LDllHandle, 'PHYSFS_getMountPoint');
  PHYSFS_getPrefDir := GetProcAddress(LDllHandle, 'PHYSFS_getPrefDir');
  PHYSFS_getRealDir := GetProcAddress(LDllHandle, 'PHYSFS_getRealDir');
  PHYSFS_getSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_getSearchPath');
  PHYSFS_getSearchPathCallback := GetProcAddress(LDllHandle, 'PHYSFS_getSearchPathCallback');
  PHYSFS_getUserDir := GetProcAddress(LDllHandle, 'PHYSFS_getUserDir');
  PHYSFS_getWriteDir := GetProcAddress(LDllHandle, 'PHYSFS_getWriteDir');
  PHYSFS_init := GetProcAddress(LDllHandle, 'PHYSFS_init');
  PHYSFS_isDirectory := GetProcAddress(LDllHandle, 'PHYSFS_isDirectory');
  PHYSFS_isInit := GetProcAddress(LDllHandle, 'PHYSFS_isInit');
  PHYSFS_isSymbolicLink := GetProcAddress(LDllHandle, 'PHYSFS_isSymbolicLink');
  PHYSFS_mkdir := GetProcAddress(LDllHandle, 'PHYSFS_mkdir');
  PHYSFS_mount := GetProcAddress(LDllHandle, 'PHYSFS_mount');
  PHYSFS_mountHandle := GetProcAddress(LDllHandle, 'PHYSFS_mountHandle');
  PHYSFS_mountIo := GetProcAddress(LDllHandle, 'PHYSFS_mountIo');
  PHYSFS_mountMemory := GetProcAddress(LDllHandle, 'PHYSFS_mountMemory');
  PHYSFS_openAppend := GetProcAddress(LDllHandle, 'PHYSFS_openAppend');
  PHYSFS_openRead := GetProcAddress(LDllHandle, 'PHYSFS_openRead');
  PHYSFS_openWrite := GetProcAddress(LDllHandle, 'PHYSFS_openWrite');
  PHYSFS_permitSymbolicLinks := GetProcAddress(LDllHandle, 'PHYSFS_permitSymbolicLinks');
  PHYSFS_read := GetProcAddress(LDllHandle, 'PHYSFS_read');
  PHYSFS_readBytes := GetProcAddress(LDllHandle, 'PHYSFS_readBytes');
  PHYSFS_readSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE16');
  PHYSFS_readSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE32');
  PHYSFS_readSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE64');
  PHYSFS_readSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE16');
  PHYSFS_readSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE32');
  PHYSFS_readSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE64');
  PHYSFS_readUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE16');
  PHYSFS_readUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE32');
  PHYSFS_readUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE64');
  PHYSFS_readULE16 := GetProcAddress(LDllHandle, 'PHYSFS_readULE16');
  PHYSFS_readULE32 := GetProcAddress(LDllHandle, 'PHYSFS_readULE32');
  PHYSFS_readULE64 := GetProcAddress(LDllHandle, 'PHYSFS_readULE64');
  PHYSFS_registerArchiver := GetProcAddress(LDllHandle, 'PHYSFS_registerArchiver');
  PHYSFS_removeFromSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_removeFromSearchPath');
  PHYSFS_seek := GetProcAddress(LDllHandle, 'PHYSFS_seek');
  PHYSFS_setAllocator := GetProcAddress(LDllHandle, 'PHYSFS_setAllocator');
  PHYSFS_setBuffer := GetProcAddress(LDllHandle, 'PHYSFS_setBuffer');
  PHYSFS_setErrorCode := GetProcAddress(LDllHandle, 'PHYSFS_setErrorCode');
  PHYSFS_setRoot := GetProcAddress(LDllHandle, 'PHYSFS_setRoot');
  PHYSFS_setSaneConfig := GetProcAddress(LDllHandle, 'PHYSFS_setSaneConfig');
  PHYSFS_setWriteDir := GetProcAddress(LDllHandle, 'PHYSFS_setWriteDir');
  PHYSFS_stat := GetProcAddress(LDllHandle, 'PHYSFS_stat');
  PHYSFS_supportedArchiveTypes := GetProcAddress(LDllHandle, 'PHYSFS_supportedArchiveTypes');
  PHYSFS_swapSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE16');
  PHYSFS_swapSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE32');
  PHYSFS_swapSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE64');
  PHYSFS_swapSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE16');
  PHYSFS_swapSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE32');
  PHYSFS_swapSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE64');
  PHYSFS_swapUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE16');
  PHYSFS_swapUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE32');
  PHYSFS_swapUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE64');
  PHYSFS_swapULE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE16');
  PHYSFS_swapULE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE32');
  PHYSFS_swapULE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE64');
  PHYSFS_symbolicLinksPermitted := GetProcAddress(LDllHandle, 'PHYSFS_symbolicLinksPermitted');
  PHYSFS_tell := GetProcAddress(LDllHandle, 'PHYSFS_tell');
  PHYSFS_ucs4stricmp := GetProcAddress(LDllHandle, 'PHYSFS_ucs4stricmp');
  PHYSFS_unmount := GetProcAddress(LDllHandle, 'PHYSFS_unmount');
  PHYSFS_utf16stricmp := GetProcAddress(LDllHandle, 'PHYSFS_utf16stricmp');
  PHYSFS_utf8FromLatin1 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromLatin1');
  PHYSFS_utf8FromUcs2 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUcs2');
  PHYSFS_utf8FromUcs4 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUcs4');
  PHYSFS_utf8FromUtf16 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUtf16');
  PHYSFS_utf8stricmp := GetProcAddress(LDllHandle, 'PHYSFS_utf8stricmp');
  PHYSFS_utf8ToUcs2 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUcs2');
  PHYSFS_utf8ToUcs4 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUcs4');
  PHYSFS_utf8ToUtf16 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUtf16');
  PHYSFS_write := GetProcAddress(LDllHandle, 'PHYSFS_write');
  PHYSFS_writeBytes := GetProcAddress(LDllHandle, 'PHYSFS_writeBytes');
  PHYSFS_writeSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE16');
  PHYSFS_writeSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE32');
  PHYSFS_writeSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE64');
  PHYSFS_writeSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE16');
  PHYSFS_writeSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE32');
  PHYSFS_writeSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE64');
  PHYSFS_writeUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE16');
  PHYSFS_writeUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE32');
  PHYSFS_writeUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE64');
  PHYSFS_writeULE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE16');
  PHYSFS_writeULE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE32');
  PHYSFS_writeULE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE64');
  plm_audio_create_with_buffer := GetProcAddress(LDllHandle, 'plm_audio_create_with_buffer');
  plm_audio_decode := GetProcAddress(LDllHandle, 'plm_audio_decode');
  plm_audio_destroy := GetProcAddress(LDllHandle, 'plm_audio_destroy');
  plm_audio_get_samplerate := GetProcAddress(LDllHandle, 'plm_audio_get_samplerate');
  plm_audio_get_time := GetProcAddress(LDllHandle, 'plm_audio_get_time');
  plm_audio_has_ended := GetProcAddress(LDllHandle, 'plm_audio_has_ended');
  plm_audio_has_header := GetProcAddress(LDllHandle, 'plm_audio_has_header');
  plm_audio_rewind := GetProcAddress(LDllHandle, 'plm_audio_rewind');
  plm_audio_set_time := GetProcAddress(LDllHandle, 'plm_audio_set_time');
  plm_buffer_create_for_appending := GetProcAddress(LDllHandle, 'plm_buffer_create_for_appending');
  plm_buffer_create_with_capacity := GetProcAddress(LDllHandle, 'plm_buffer_create_with_capacity');
  plm_buffer_create_with_file := GetProcAddress(LDllHandle, 'plm_buffer_create_with_file');
  plm_buffer_create_with_filename := GetProcAddress(LDllHandle, 'plm_buffer_create_with_filename');
  plm_buffer_create_with_memory := GetProcAddress(LDllHandle, 'plm_buffer_create_with_memory');
  plm_buffer_destroy := GetProcAddress(LDllHandle, 'plm_buffer_destroy');
  plm_buffer_get_remaining := GetProcAddress(LDllHandle, 'plm_buffer_get_remaining');
  plm_buffer_get_size := GetProcAddress(LDllHandle, 'plm_buffer_get_size');
  plm_buffer_has_ended := GetProcAddress(LDllHandle, 'plm_buffer_has_ended');
  plm_buffer_rewind := GetProcAddress(LDllHandle, 'plm_buffer_rewind');
  plm_buffer_set_load_callback := GetProcAddress(LDllHandle, 'plm_buffer_set_load_callback');
  plm_buffer_signal_end := GetProcAddress(LDllHandle, 'plm_buffer_signal_end');
  plm_buffer_write := GetProcAddress(LDllHandle, 'plm_buffer_write');
  plm_create_with_buffer := GetProcAddress(LDllHandle, 'plm_create_with_buffer');
  plm_create_with_file := GetProcAddress(LDllHandle, 'plm_create_with_file');
  plm_create_with_filename := GetProcAddress(LDllHandle, 'plm_create_with_filename');
  plm_create_with_memory := GetProcAddress(LDllHandle, 'plm_create_with_memory');
  plm_decode := GetProcAddress(LDllHandle, 'plm_decode');
  plm_decode_audio := GetProcAddress(LDllHandle, 'plm_decode_audio');
  plm_decode_video := GetProcAddress(LDllHandle, 'plm_decode_video');
  plm_demux_create := GetProcAddress(LDllHandle, 'plm_demux_create');
  plm_demux_decode := GetProcAddress(LDllHandle, 'plm_demux_decode');
  plm_demux_destroy := GetProcAddress(LDllHandle, 'plm_demux_destroy');
  plm_demux_get_duration := GetProcAddress(LDllHandle, 'plm_demux_get_duration');
  plm_demux_get_num_audio_streams := GetProcAddress(LDllHandle, 'plm_demux_get_num_audio_streams');
  plm_demux_get_num_video_streams := GetProcAddress(LDllHandle, 'plm_demux_get_num_video_streams');
  plm_demux_get_start_time := GetProcAddress(LDllHandle, 'plm_demux_get_start_time');
  plm_demux_has_ended := GetProcAddress(LDllHandle, 'plm_demux_has_ended');
  plm_demux_has_headers := GetProcAddress(LDllHandle, 'plm_demux_has_headers');
  plm_demux_rewind := GetProcAddress(LDllHandle, 'plm_demux_rewind');
  plm_demux_seek := GetProcAddress(LDllHandle, 'plm_demux_seek');
  plm_destroy := GetProcAddress(LDllHandle, 'plm_destroy');
  plm_frame_to_abgr := GetProcAddress(LDllHandle, 'plm_frame_to_abgr');
  plm_frame_to_argb := GetProcAddress(LDllHandle, 'plm_frame_to_argb');
  plm_frame_to_bgr := GetProcAddress(LDllHandle, 'plm_frame_to_bgr');
  plm_frame_to_bgra := GetProcAddress(LDllHandle, 'plm_frame_to_bgra');
  plm_frame_to_rgb := GetProcAddress(LDllHandle, 'plm_frame_to_rgb');
  plm_frame_to_rgba := GetProcAddress(LDllHandle, 'plm_frame_to_rgba');
  plm_get_audio_enabled := GetProcAddress(LDllHandle, 'plm_get_audio_enabled');
  plm_get_audio_lead_time := GetProcAddress(LDllHandle, 'plm_get_audio_lead_time');
  plm_get_duration := GetProcAddress(LDllHandle, 'plm_get_duration');
  plm_get_framerate := GetProcAddress(LDllHandle, 'plm_get_framerate');
  plm_get_height := GetProcAddress(LDllHandle, 'plm_get_height');
  plm_get_loop := GetProcAddress(LDllHandle, 'plm_get_loop');
  plm_get_num_audio_streams := GetProcAddress(LDllHandle, 'plm_get_num_audio_streams');
  plm_get_num_video_streams := GetProcAddress(LDllHandle, 'plm_get_num_video_streams');
  plm_get_samplerate := GetProcAddress(LDllHandle, 'plm_get_samplerate');
  plm_get_time := GetProcAddress(LDllHandle, 'plm_get_time');
  plm_get_video_enabled := GetProcAddress(LDllHandle, 'plm_get_video_enabled');
  plm_get_width := GetProcAddress(LDllHandle, 'plm_get_width');
  plm_has_ended := GetProcAddress(LDllHandle, 'plm_has_ended');
  plm_has_headers := GetProcAddress(LDllHandle, 'plm_has_headers');
  plm_rewind := GetProcAddress(LDllHandle, 'plm_rewind');
  plm_seek := GetProcAddress(LDllHandle, 'plm_seek');
  plm_seek_frame := GetProcAddress(LDllHandle, 'plm_seek_frame');
  plm_set_audio_decode_callback := GetProcAddress(LDllHandle, 'plm_set_audio_decode_callback');
  plm_set_audio_enabled := GetProcAddress(LDllHandle, 'plm_set_audio_enabled');
  plm_set_audio_lead_time := GetProcAddress(LDllHandle, 'plm_set_audio_lead_time');
  plm_set_audio_stream := GetProcAddress(LDllHandle, 'plm_set_audio_stream');
  plm_set_loop := GetProcAddress(LDllHandle, 'plm_set_loop');
  plm_set_video_decode_callback := GetProcAddress(LDllHandle, 'plm_set_video_decode_callback');
  plm_set_video_enabled := GetProcAddress(LDllHandle, 'plm_set_video_enabled');
  plm_video_create_with_buffer := GetProcAddress(LDllHandle, 'plm_video_create_with_buffer');
  plm_video_decode := GetProcAddress(LDllHandle, 'plm_video_decode');
  plm_video_destroy := GetProcAddress(LDllHandle, 'plm_video_destroy');
  plm_video_get_framerate := GetProcAddress(LDllHandle, 'plm_video_get_framerate');
  plm_video_get_height := GetProcAddress(LDllHandle, 'plm_video_get_height');
  plm_video_get_time := GetProcAddress(LDllHandle, 'plm_video_get_time');
  plm_video_get_width := GetProcAddress(LDllHandle, 'plm_video_get_width');
  plm_video_has_ended := GetProcAddress(LDllHandle, 'plm_video_has_ended');
  plm_video_has_header := GetProcAddress(LDllHandle, 'plm_video_has_header');
  plm_video_rewind := GetProcAddress(LDllHandle, 'plm_video_rewind');
  plm_video_set_no_delay := GetProcAddress(LDllHandle, 'plm_video_set_no_delay');
  plm_video_set_time := GetProcAddress(LDllHandle, 'plm_video_set_time');
  stbi_convert_iphone_png_to_rgb := GetProcAddress(LDllHandle, 'stbi_convert_iphone_png_to_rgb');
  stbi_convert_iphone_png_to_rgb_thread := GetProcAddress(LDllHandle, 'stbi_convert_iphone_png_to_rgb_thread');
  stbi_failure_reason := GetProcAddress(LDllHandle, 'stbi_failure_reason');
  stbi_flip_vertically_on_write := GetProcAddress(LDllHandle, 'stbi_flip_vertically_on_write');
  stbi_hdr_to_ldr_gamma := GetProcAddress(LDllHandle, 'stbi_hdr_to_ldr_gamma');
  stbi_hdr_to_ldr_scale := GetProcAddress(LDllHandle, 'stbi_hdr_to_ldr_scale');
  stbi_image_free := GetProcAddress(LDllHandle, 'stbi_image_free');
  stbi_info := GetProcAddress(LDllHandle, 'stbi_info');
  stbi_info_from_callbacks := GetProcAddress(LDllHandle, 'stbi_info_from_callbacks');
  stbi_info_from_file := GetProcAddress(LDllHandle, 'stbi_info_from_file');
  stbi_info_from_memory := GetProcAddress(LDllHandle, 'stbi_info_from_memory');
  stbi_is_16_bit := GetProcAddress(LDllHandle, 'stbi_is_16_bit');
  stbi_is_16_bit_from_callbacks := GetProcAddress(LDllHandle, 'stbi_is_16_bit_from_callbacks');
  stbi_is_16_bit_from_file := GetProcAddress(LDllHandle, 'stbi_is_16_bit_from_file');
  stbi_is_16_bit_from_memory := GetProcAddress(LDllHandle, 'stbi_is_16_bit_from_memory');
  stbi_is_hdr := GetProcAddress(LDllHandle, 'stbi_is_hdr');
  stbi_is_hdr_from_callbacks := GetProcAddress(LDllHandle, 'stbi_is_hdr_from_callbacks');
  stbi_is_hdr_from_file := GetProcAddress(LDllHandle, 'stbi_is_hdr_from_file');
  stbi_is_hdr_from_memory := GetProcAddress(LDllHandle, 'stbi_is_hdr_from_memory');
  stbi_ldr_to_hdr_gamma := GetProcAddress(LDllHandle, 'stbi_ldr_to_hdr_gamma');
  stbi_ldr_to_hdr_scale := GetProcAddress(LDllHandle, 'stbi_ldr_to_hdr_scale');
  stbi_load := GetProcAddress(LDllHandle, 'stbi_load');
  stbi_load_16 := GetProcAddress(LDllHandle, 'stbi_load_16');
  stbi_load_16_from_callbacks := GetProcAddress(LDllHandle, 'stbi_load_16_from_callbacks');
  stbi_load_16_from_memory := GetProcAddress(LDllHandle, 'stbi_load_16_from_memory');
  stbi_load_from_callbacks := GetProcAddress(LDllHandle, 'stbi_load_from_callbacks');
  stbi_load_from_file := GetProcAddress(LDllHandle, 'stbi_load_from_file');
  stbi_load_from_file_16 := GetProcAddress(LDllHandle, 'stbi_load_from_file_16');
  stbi_load_from_memory := GetProcAddress(LDllHandle, 'stbi_load_from_memory');
  stbi_load_gif_from_memory := GetProcAddress(LDllHandle, 'stbi_load_gif_from_memory');
  stbi_loadf := GetProcAddress(LDllHandle, 'stbi_loadf');
  stbi_loadf_from_callbacks := GetProcAddress(LDllHandle, 'stbi_loadf_from_callbacks');
  stbi_loadf_from_file := GetProcAddress(LDllHandle, 'stbi_loadf_from_file');
  stbi_loadf_from_memory := GetProcAddress(LDllHandle, 'stbi_loadf_from_memory');
  stbi_set_flip_vertically_on_load := GetProcAddress(LDllHandle, 'stbi_set_flip_vertically_on_load');
  stbi_set_flip_vertically_on_load_thread := GetProcAddress(LDllHandle, 'stbi_set_flip_vertically_on_load_thread');
  stbi_set_unpremultiply_on_load := GetProcAddress(LDllHandle, 'stbi_set_unpremultiply_on_load');
  stbi_set_unpremultiply_on_load_thread := GetProcAddress(LDllHandle, 'stbi_set_unpremultiply_on_load_thread');
  stbi_write_bmp := GetProcAddress(LDllHandle, 'stbi_write_bmp');
  stbi_write_bmp_to_func := GetProcAddress(LDllHandle, 'stbi_write_bmp_to_func');
  stbi_write_hdr := GetProcAddress(LDllHandle, 'stbi_write_hdr');
  stbi_write_hdr_to_func := GetProcAddress(LDllHandle, 'stbi_write_hdr_to_func');
  stbi_write_jpg := GetProcAddress(LDllHandle, 'stbi_write_jpg');
  stbi_write_jpg_to_func := GetProcAddress(LDllHandle, 'stbi_write_jpg_to_func');
  stbi_write_png := GetProcAddress(LDllHandle, 'stbi_write_png');
  stbi_write_png_to_func := GetProcAddress(LDllHandle, 'stbi_write_png_to_func');
  stbi_write_tga := GetProcAddress(LDllHandle, 'stbi_write_tga');
  stbi_write_tga_to_func := GetProcAddress(LDllHandle, 'stbi_write_tga_to_func');
  stbi_zlib_decode_buffer := GetProcAddress(LDllHandle, 'stbi_zlib_decode_buffer');
  stbi_zlib_decode_malloc := GetProcAddress(LDllHandle, 'stbi_zlib_decode_malloc');
  stbi_zlib_decode_malloc_guesssize := GetProcAddress(LDllHandle, 'stbi_zlib_decode_malloc_guesssize');
  stbi_zlib_decode_malloc_guesssize_headerflag := GetProcAddress(LDllHandle, 'stbi_zlib_decode_malloc_guesssize_headerflag');
  stbi_zlib_decode_noheader_buffer := GetProcAddress(LDllHandle, 'stbi_zlib_decode_noheader_buffer');
  stbi_zlib_decode_noheader_malloc := GetProcAddress(LDllHandle, 'stbi_zlib_decode_noheader_malloc');
  stbtt_BakeFontBitmap := GetProcAddress(LDllHandle, 'stbtt_BakeFontBitmap');
  stbtt_CompareUTF8toUTF16_bigendian := GetProcAddress(LDllHandle, 'stbtt_CompareUTF8toUTF16_bigendian');
  stbtt_FindGlyphIndex := GetProcAddress(LDllHandle, 'stbtt_FindGlyphIndex');
  stbtt_FindMatchingFont := GetProcAddress(LDllHandle, 'stbtt_FindMatchingFont');
  stbtt_FindSVGDoc := GetProcAddress(LDllHandle, 'stbtt_FindSVGDoc');
  stbtt_FreeBitmap := GetProcAddress(LDllHandle, 'stbtt_FreeBitmap');
  stbtt_FreeSDF := GetProcAddress(LDllHandle, 'stbtt_FreeSDF');
  stbtt_FreeShape := GetProcAddress(LDllHandle, 'stbtt_FreeShape');
  stbtt_GetBakedQuad := GetProcAddress(LDllHandle, 'stbtt_GetBakedQuad');
  stbtt_GetCodepointBitmap := GetProcAddress(LDllHandle, 'stbtt_GetCodepointBitmap');
  stbtt_GetCodepointBitmapBox := GetProcAddress(LDllHandle, 'stbtt_GetCodepointBitmapBox');
  stbtt_GetCodepointBitmapBoxSubpixel := GetProcAddress(LDllHandle, 'stbtt_GetCodepointBitmapBoxSubpixel');
  stbtt_GetCodepointBitmapSubpixel := GetProcAddress(LDllHandle, 'stbtt_GetCodepointBitmapSubpixel');
  stbtt_GetCodepointBox := GetProcAddress(LDllHandle, 'stbtt_GetCodepointBox');
  stbtt_GetCodepointHMetrics := GetProcAddress(LDllHandle, 'stbtt_GetCodepointHMetrics');
  stbtt_GetCodepointKernAdvance := GetProcAddress(LDllHandle, 'stbtt_GetCodepointKernAdvance');
  stbtt_GetCodepointSDF := GetProcAddress(LDllHandle, 'stbtt_GetCodepointSDF');
  stbtt_GetCodepointShape := GetProcAddress(LDllHandle, 'stbtt_GetCodepointShape');
  stbtt_GetCodepointSVG := GetProcAddress(LDllHandle, 'stbtt_GetCodepointSVG');
  stbtt_GetFontBoundingBox := GetProcAddress(LDllHandle, 'stbtt_GetFontBoundingBox');
  stbtt_GetFontNameString := GetProcAddress(LDllHandle, 'stbtt_GetFontNameString');
  stbtt_GetFontOffsetForIndex := GetProcAddress(LDllHandle, 'stbtt_GetFontOffsetForIndex');
  stbtt_GetFontVMetrics := GetProcAddress(LDllHandle, 'stbtt_GetFontVMetrics');
  stbtt_GetFontVMetricsOS2 := GetProcAddress(LDllHandle, 'stbtt_GetFontVMetricsOS2');
  stbtt_GetGlyphBitmap := GetProcAddress(LDllHandle, 'stbtt_GetGlyphBitmap');
  stbtt_GetGlyphBitmapBox := GetProcAddress(LDllHandle, 'stbtt_GetGlyphBitmapBox');
  stbtt_GetGlyphBitmapBoxSubpixel := GetProcAddress(LDllHandle, 'stbtt_GetGlyphBitmapBoxSubpixel');
  stbtt_GetGlyphBitmapSubpixel := GetProcAddress(LDllHandle, 'stbtt_GetGlyphBitmapSubpixel');
  stbtt_GetGlyphBox := GetProcAddress(LDllHandle, 'stbtt_GetGlyphBox');
  stbtt_GetGlyphHMetrics := GetProcAddress(LDllHandle, 'stbtt_GetGlyphHMetrics');
  stbtt_GetGlyphKernAdvance := GetProcAddress(LDllHandle, 'stbtt_GetGlyphKernAdvance');
  stbtt_GetGlyphSDF := GetProcAddress(LDllHandle, 'stbtt_GetGlyphSDF');
  stbtt_GetGlyphShape := GetProcAddress(LDllHandle, 'stbtt_GetGlyphShape');
  stbtt_GetGlyphSVG := GetProcAddress(LDllHandle, 'stbtt_GetGlyphSVG');
  stbtt_GetKerningTable := GetProcAddress(LDllHandle, 'stbtt_GetKerningTable');
  stbtt_GetKerningTableLength := GetProcAddress(LDllHandle, 'stbtt_GetKerningTableLength');
  stbtt_GetNumberOfFonts := GetProcAddress(LDllHandle, 'stbtt_GetNumberOfFonts');
  stbtt_GetPackedQuad := GetProcAddress(LDllHandle, 'stbtt_GetPackedQuad');
  stbtt_GetScaledFontVMetrics := GetProcAddress(LDllHandle, 'stbtt_GetScaledFontVMetrics');
  stbtt_InitFont := GetProcAddress(LDllHandle, 'stbtt_InitFont');
  stbtt_IsGlyphEmpty := GetProcAddress(LDllHandle, 'stbtt_IsGlyphEmpty');
  stbtt_MakeCodepointBitmap := GetProcAddress(LDllHandle, 'stbtt_MakeCodepointBitmap');
  stbtt_MakeCodepointBitmapSubpixel := GetProcAddress(LDllHandle, 'stbtt_MakeCodepointBitmapSubpixel');
  stbtt_MakeCodepointBitmapSubpixelPrefilter := GetProcAddress(LDllHandle, 'stbtt_MakeCodepointBitmapSubpixelPrefilter');
  stbtt_MakeGlyphBitmap := GetProcAddress(LDllHandle, 'stbtt_MakeGlyphBitmap');
  stbtt_MakeGlyphBitmapSubpixel := GetProcAddress(LDllHandle, 'stbtt_MakeGlyphBitmapSubpixel');
  stbtt_MakeGlyphBitmapSubpixelPrefilter := GetProcAddress(LDllHandle, 'stbtt_MakeGlyphBitmapSubpixelPrefilter');
  stbtt_PackBegin := GetProcAddress(LDllHandle, 'stbtt_PackBegin');
  stbtt_PackEnd := GetProcAddress(LDllHandle, 'stbtt_PackEnd');
  stbtt_PackFontRange := GetProcAddress(LDllHandle, 'stbtt_PackFontRange');
  stbtt_PackFontRanges := GetProcAddress(LDllHandle, 'stbtt_PackFontRanges');
  stbtt_PackFontRangesGatherRects := GetProcAddress(LDllHandle, 'stbtt_PackFontRangesGatherRects');
  stbtt_PackFontRangesPackRects := GetProcAddress(LDllHandle, 'stbtt_PackFontRangesPackRects');
  stbtt_PackFontRangesRenderIntoRects := GetProcAddress(LDllHandle, 'stbtt_PackFontRangesRenderIntoRects');
  stbtt_PackSetOversampling := GetProcAddress(LDllHandle, 'stbtt_PackSetOversampling');
  stbtt_PackSetSkipMissingCodepoints := GetProcAddress(LDllHandle, 'stbtt_PackSetSkipMissingCodepoints');
  stbtt_Rasterize := GetProcAddress(LDllHandle, 'stbtt_Rasterize');
  stbtt_ScaleForMappingEmToPixels := GetProcAddress(LDllHandle, 'stbtt_ScaleForMappingEmToPixels');
  stbtt_ScaleForPixelHeight := GetProcAddress(LDllHandle, 'stbtt_ScaleForPixelHeight');
  zipClose := GetProcAddress(LDllHandle, 'zipClose');
  zipCloseFileInZip := GetProcAddress(LDllHandle, 'zipCloseFileInZip');
  zipOpen := GetProcAddress(LDllHandle, 'zipOpen');
  zipOpenNewFileInZip3 := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip3');
  zipWriteInFileInZip := GetProcAddress(LDllHandle, 'zipWriteInFileInZip');
  {$ENDREGION}

end;

procedure UnloadDLL;
begin
  FreeLibrary(LDllHandle);
  DeferDelFile(LDllName);
end;

initialization
  ReportMemoryLeaksOnShutdown := True;
  LoadDLL;

finalization
  UnloadDLL;

end.
